/*
 * Automatically Generated from Mathematica.
 * Sun 7 Nov 2021 14:26:06 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "p_com_LeftStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t1052;
  double t1535;
  double t5173;
  double t5504;
  double t5529;
  double t6330;
  double t6378;
  double t6508;
  double t6520;
  double t5561;
  double t5699;
  double t6291;
  double t6643;
  double t6883;
  double t6884;
  double t6885;
  double t6892;
  double t6879;
  double t6880;
  double t6881;
  double t6922;
  double t6935;
  double t6940;
  double t7003;
  double t7023;
  double t7041;
  double t7051;
  double t7059;
  double t7061;
  double t7105;
  double t7123;
  double t7128;
  double t7132;
  double t7146;
  double t7150;
  double t7168;
  double t7185;
  double t7258;
  double t7263;
  double t7272;
  double t7306;
  double t7307;
  double t7308;
  double t7311;
  double t7312;
  double t7313;
  double t7316;
  double t7346;
  double t7347;
  double t7348;
  double t7385;
  double t7390;
  double t7396;
  double t7408;
  double t7413;
  double t7419;
  double t7427;
  double t7440;
  double t7441;
  double t7442;
  double t7447;
  double t7461;
  double t7470;
  double t7575;
  double t7580;
  double t7576;
  double t7582;
  double t7583;
  double t7584;
  double t7605;
  double t7609;
  double t7615;
  double t7626;
  double t7585;
  double t7586;
  double t7587;
  double t7589;
  double t7593;
  double t7596;
  double t7621;
  double t7631;
  double t7635;
  double t7640;
  double t7642;
  double t7643;
  double t7644;
  double t7646;
  double t7649;
  double t7650;
  double t7651;
  double t7694;
  double t7695;
  double t7696;
  double t7706;
  double t7666;
  double t7670;
  double t7671;
  double t7702;
  double t7712;
  double t7716;
  double t7721;
  double t7739;
  double t7743;
  double t7744;
  double t7745;
  double t7747;
  double t7748;
  double t7750;
  double t7767;
  double t7768;
  double t7769;
  double t7771;
  double t7753;
  double t7754;
  double t7755;
  double t7770;
  double t7776;
  double t7782;
  double t7786;
  double t7790;
  double t7794;
  double t7798;
  double t7802;
  double t7807;
  double t7808;
  double t7809;
  double t7818;
  double t7822;
  double t7827;
  double t7829;
  double t7811;
  double t7812;
  double t7813;
  double t7828;
  double t7833;
  double t7841;
  double t7867;
  double t7874;
  double t7878;
  double t7882;
  double t7891;
  double t7895;
  double t7896;
  double t7897;
  double t7908;
  double t7912;
  double t7913;
  double t7916;
  double t7900;
  double t7901;
  double t7902;
  double t7963;
  double t7967;
  double t7971;
  double t7977;
  double t7914;
  double t7921;
  double t7925;
  double t7930;
  double t7934;
  double t7938;
  double t7942;
  double t7947;
  double t7994;
  double t7951;
  double t7952;
  double t7953;
  double t7973;
  double t8013;
  double t7955;
  double t7956;
  double t7957;
  double t8044;
  double t8050;
  double t8019;
  double t8077;
  double t8014;
  double t8086;
  double t7999;
  double t8074;
  double t7981;
  double t8144;
  double t8149;
  double t8153;
  double t8169;
  double t7574;
  double t3890;
  double t4124;
  double t8211;
  double t8212;
  double t6515;
  double t6522;
  double t6523;
  double t6754;
  double t6769;
  double t6797;
  double t6837;
  double t6870;
  double t6877;
  double t8237;
  double t8241;
  double t6886;
  double t6896;
  double t6914;
  double t6953;
  double t6973;
  double t6977;
  double t8260;
  double t8261;
  double t7046;
  double t7052;
  double t7054;
  double t7116;
  double t7117;
  double t7119;
  double t8268;
  double t8269;
  double t7180;
  double t7204;
  double t7248;
  double t7294;
  double t7299;
  double t7305;
  double t8288;
  double t8292;
  double t7315;
  double t7327;
  double t7345;
  double t7353;
  double t7368;
  double t7381;
  double t8315;
  double t8319;
  double t8323;
  double t8341;
  double t8304;
  double t8306;
  double t8334;
  double t8356;
  double t8364;
  double t8410;
  double t8413;
  double t8386;
  double t8426;
  double t8372;
  double t8443;
  double t8347;
  double t8418;
  double t8357;
  double t7424;
  double t7430;
  double t7436;
  double t7444;
  double t7445;
  double t7446;
  double t7473;
  double t7474;
  double t7475;
  double t7490;
  double t7494;
  double t7508;
  double t8529;
  double t8526;
  double t8528;
  double t8530;
  double t8531;
  double t8536;
  double t8537;
  double t8540;
  double t8545;
  double t8546;
  double t8547;
  double t8553;
  double t8554;
  double t8558;
  double t8564;
  double t8570;
  double t8576;
  double t8578;
  double t8591;
  double t8594;
  double t8596;
  double t8597;
  double t8598;
  double t8600;
  double t8608;
  double t8612;
  double t8620;
  double t8622;
  double t8623;
  double t8626;
  double t8627;
  double t8628;
  double t8630;
  double t8631;
  double t8632;
  double t8637;
  double t8638;
  double t8639;
  double t8651;
  double t8652;
  double t8653;
  double t8688;
  double t8690;
  double t8691;
  double t8695;
  double t8696;
  double t8698;
  double t8699;
  double t8700;
  double t8704;
  double t8705;
  double t8711;
  double t8712;
  double t8714;
  double t8716;
  double t8717;
  double t8718;
  double t8722;
  double t8724;
  double t8725;
  double t8726;
  double t8727;
  double t8729;
  double t8730;
  double t8731;
  double t8736;
  double t8737;
  double t8738;
  double t8740;
  double t8741;
  double t8743;
  double t8744;
  double t8745;
  double t8750;
  double t8751;
  double t8752;
  double t8753;
  double t8754;
  double t8757;
  double t8758;
  double t8759;
  double t7961;
  double t7972;
  double t7986;
  double t7990;
  double t8003;
  double t8007;
  double t8009;
  double t8764;
  double t8765;
  double t8011;
  double t8012;
  double t8015;
  double t8017;
  double t8023;
  double t8031;
  double t8039;
  double t8766;
  double t8767;
  double t8768;
  double t8042;
  double t8043;
  double t8045;
  double t8046;
  double t8054;
  double t8060;
  double t8065;
  double t8770;
  double t8771;
  double t8772;
  double t8075;
  double t8078;
  double t8080;
  double t8081;
  double t8088;
  double t8091;
  double t8092;
  double t8094;
  double t8120;
  double t8124;
  double t8132;
  double t8137;
  double t8167;
  double t8171;
  double t8172;
  double t8174;
  double t8175;
  double t8181;
  double t8689;
  double t8812;
  double t8813;
  double t8549;
  double t8550;
  double t8551;
  double t8820;
  double t8821;
  double t8827;
  double t8828;
  double t8834;
  double t8835;
  double t8841;
  double t8843;
  double t8311;
  double t8328;
  double t8351;
  double t8355;
  double t8358;
  double t8359;
  double t8360;
  double t8849;
  double t8850;
  double t8362;
  double t8363;
  double t8378;
  double t8381;
  double t8393;
  double t8398;
  double t8403;
  double t8408;
  double t8409;
  double t8411;
  double t8412;
  double t8414;
  double t8415;
  double t8416;
  double t8419;
  double t8430;
  double t8438;
  double t8439;
  double t8444;
  double t8447;
  double t8448;
  double t8453;
  double t8468;
  double t8472;
  double t8477;
  double t8479;
  double t8660;
  double t8663;
  double t8666;
  double t8669;
  double t8670;
  double t8672;
  double t8891;
  double t8892;
  double t8893;
  double t8896;
  double t8897;
  double t8898;
  double t8900;
  double t8901;
  double t8902;
  double t8908;
  double t8909;
  double t8910;
  double t8912;
  double t8913;
  double t8914;
  double t8916;
  double t8917;
  double t8918;
  double t8920;
  double t8921;
  double t8922;
  double t8924;
  double t8925;
  double t8926;
  double t8928;
  double t8929;
  double t8930;
  double t8932;
  double t8933;
  double t8934;
  double t8936;
  double t8937;
  double t8938;
  double t8940;
  double t8941;
  double t8942;
  double t8944;
  double t8945;
  double t8946;
  double t8961;
  double t8963;
  double t8965;
  double t8966;
  double t8967;
  double t8969;
  double t8970;
  double t8971;
  double t8975;
  double t8976;
  double t8978;
  double t8979;
  double t8980;
  double t8982;
  double t8983;
  double t8985;
  double t8990;
  double t8992;
  double t8993;
  double t8994;
  double t8995;
  double t8997;
  double t8998;
  double t8999;
  double t9004;
  double t9005;
  double t9006;
  double t9007;
  double t9008;
  double t9010;
  double t9011;
  double t9012;
  double t9017;
  double t9018;
  double t9019;
  double t9020;
  double t9021;
  double t9023;
  double t9024;
  double t9025;
  double t9030;
  double t9031;
  double t9032;
  double t9033;
  double t9034;
  double t9036;
  double t9037;
  double t9038;
  double t8962;
  double t9075;
  double t9076;
  double t8904;
  double t8905;
  double t8906;
  double t9084;
  double t9085;
  double t9091;
  double t9092;
  double t9098;
  double t9099;
  double t9106;
  double t9107;
  double t9113;
  double t9114;
  double t8948;
  double t8949;
  double t8950;
  double t8952;
  double t8953;
  double t8954;
  t1052 = Cos(var1[4]);
  t1535 = Cos(var1[6]);
  t5173 = Sin(var1[5]);
  t5504 = Sin(var1[4]);
  t5529 = Sin(var1[6]);
  t6330 = Cos(var1[7]);
  t6378 = -1.*t6330;
  t6508 = 1. + t6378;
  t6520 = Sin(var1[7]);
  t5561 = -1.*t1052*t1535*t5173;
  t5699 = t5504*t5529;
  t6291 = t5561 + t5699;
  t6643 = Cos(var1[5]);
  t6883 = Cos(var1[8]);
  t6884 = -1.*t6883;
  t6885 = 1. + t6884;
  t6892 = Sin(var1[8]);
  t6879 = t1052*t6643*t6330;
  t6880 = t6291*t6520;
  t6881 = t6879 + t6880;
  t6922 = t1535*t5504;
  t6935 = t1052*t5173*t5529;
  t6940 = t6922 + t6935;
  t7003 = Cos(var1[9]);
  t7023 = -1.*t7003;
  t7041 = 1. + t7023;
  t7051 = Sin(var1[9]);
  t7059 = t6883*t6881;
  t7061 = t6940*t6892;
  t7105 = t7059 + t7061;
  t7123 = t6883*t6940;
  t7128 = -1.*t6881*t6892;
  t7132 = t7123 + t7128;
  t7146 = Cos(var1[10]);
  t7150 = -1.*t7146;
  t7168 = 1. + t7150;
  t7185 = Sin(var1[10]);
  t7258 = -1.*t7051*t7105;
  t7263 = t7003*t7132;
  t7272 = t7258 + t7263;
  t7306 = t7003*t7105;
  t7307 = t7051*t7132;
  t7308 = t7306 + t7307;
  t7311 = Cos(var1[11]);
  t7312 = -1.*t7311;
  t7313 = 1. + t7312;
  t7316 = Sin(var1[11]);
  t7346 = t7185*t7272;
  t7347 = t7146*t7308;
  t7348 = t7346 + t7347;
  t7385 = t7146*t7272;
  t7390 = -1.*t7185*t7308;
  t7396 = t7385 + t7390;
  t7408 = Cos(var1[13]);
  t7413 = -1.*t7408;
  t7419 = 1. + t7413;
  t7427 = Sin(var1[13]);
  t7440 = -1.*t7316*t7348;
  t7441 = t7311*t7396;
  t7442 = t7440 + t7441;
  t7447 = t7311*t7348;
  t7461 = t7316*t7396;
  t7470 = t7447 + t7461;
  t7575 = Sin(var1[14]);
  t7580 = Cos(var1[14]);
  t7576 = 0.135*t7575*t5504;
  t7582 = -1.*t7580;
  t7583 = 1. + t7582;
  t7584 = 0.135*t7583*t1052*t5173;
  t7605 = Cos(var1[15]);
  t7609 = -1.*t7605;
  t7615 = 1. + t7609;
  t7626 = Sin(var1[15]);
  t7585 = t7575*t5504;
  t7586 = -1.*t7580*t1052*t5173;
  t7587 = t7585 + t7586;
  t7589 = t7580*t5504;
  t7593 = t1052*t7575*t5173;
  t7596 = t7589 + t7593;
  t7621 = -0.049*t7615;
  t7631 = -0.135*t7626;
  t7635 = t7621 + t7631;
  t7640 = t1052*t6643*t7635;
  t7642 = -0.135*t7615;
  t7643 = 0.049*t7626;
  t7644 = t7642 + t7643;
  t7646 = t7644*t7587;
  t7649 = -1.*t1052*t6643*t7626;
  t7650 = t7605*t7587;
  t7651 = t7649 + t7650;
  t7694 = Cos(var1[16]);
  t7695 = -1.*t7694;
  t7696 = 1. + t7695;
  t7706 = Sin(var1[16]);
  t7666 = t7605*t1052*t6643;
  t7670 = t7626*t7587;
  t7671 = t7666 + t7670;
  t7702 = -0.09*t7696;
  t7712 = 0.049*t7706;
  t7716 = t7702 + t7712;
  t7721 = t7716*t7596;
  t7739 = -0.049*t7696;
  t7743 = -0.09*t7706;
  t7744 = t7739 + t7743;
  t7745 = t7744*t7671;
  t7747 = t7706*t7596;
  t7748 = t7694*t7671;
  t7750 = t7747 + t7748;
  t7767 = Cos(var1[17]);
  t7768 = -1.*t7767;
  t7769 = 1. + t7768;
  t7771 = Sin(var1[17]);
  t7753 = t7694*t7596;
  t7754 = -1.*t7706*t7671;
  t7755 = t7753 + t7754;
  t7770 = -0.049*t7769;
  t7776 = -0.21*t7771;
  t7782 = t7770 + t7776;
  t7786 = t7782*t7750;
  t7790 = -0.21*t7769;
  t7794 = 0.049*t7771;
  t7798 = t7790 + t7794;
  t7802 = t7798*t7755;
  t7807 = -1.*t7771*t7750;
  t7808 = t7767*t7755;
  t7809 = t7807 + t7808;
  t7818 = Cos(var1[18]);
  t7822 = -1.*t7818;
  t7827 = 1. + t7822;
  t7829 = Sin(var1[18]);
  t7811 = t7767*t7750;
  t7812 = t7771*t7755;
  t7813 = t7811 + t7812;
  t7828 = -0.27068*t7827;
  t7833 = 0.00159*t7829;
  t7841 = t7828 + t7833;
  t7867 = t7841*t7809;
  t7874 = -0.00159*t7827;
  t7878 = -0.27068*t7829;
  t7882 = t7874 + t7878;
  t7891 = t7882*t7813;
  t7895 = t7829*t7809;
  t7896 = t7818*t7813;
  t7897 = t7895 + t7896;
  t7908 = Cos(var1[19]);
  t7912 = -1.*t7908;
  t7913 = 1. + t7912;
  t7916 = Sin(var1[19]);
  t7900 = t7818*t7809;
  t7901 = -1.*t7829*t7813;
  t7902 = t7900 + t7901;
  t7963 = Cos(var1[20]);
  t7967 = -1.*t7963;
  t7971 = 1. + t7967;
  t7977 = Sin(var1[20]);
  t7914 = 0.01841*t7913;
  t7921 = -0.70544*t7916;
  t7925 = t7914 + t7921;
  t7930 = t7925*t7897;
  t7934 = -0.70544*t7913;
  t7938 = -0.01841*t7916;
  t7942 = t7934 + t7938;
  t7947 = t7942*t7902;
  t7994 = 0.005481192614*t7971;
  t7951 = -1.*t7916*t7897;
  t7952 = t7908*t7902;
  t7953 = t7951 + t7952;
  t7973 = 0.07769774964800001*t7971;
  t8013 = -0.0004284921280000001*t7971;
  t7955 = t7908*t7897;
  t7956 = t7916*t7902;
  t7957 = t7955 + t7956;
  t8044 = 0.005498*t7977;
  t8050 = 0.996943*t7977;
  t8019 = -0.077936*t7977;
  t8077 = 0.0004284921280000001*t7971;
  t8014 = -0.996943*t7977;
  t8086 = -0.005481192614*t7971;
  t7999 = 0.077936*t7977;
  t8074 = -0.07769774964800001*t7971;
  t7981 = -0.005498*t7977;
  t8144 = Cos(var1[21]);
  t8149 = -1.*t8144;
  t8153 = 1. + t8149;
  t8169 = Sin(var1[21]);
  t7574 = -0.0233*t1052*t6643;
  t3890 = -1.*t1535;
  t4124 = 1. + t3890;
  t8211 = -0.135*t1052*t4124*t5173;
  t8212 = -0.135*t5504*t5529;
  t6515 = 0.135*t6508;
  t6522 = 0.049*t6520;
  t6523 = t6515 + t6522;
  t6754 = -0.049*t6508;
  t6769 = 0.135*t6520;
  t6797 = t6754 + t6769;
  t6837 = t6330*t6291;
  t6870 = -1.*t1052*t6643*t6520;
  t6877 = t6837 + t6870;
  t8237 = t6291*t6523;
  t8241 = t1052*t6643*t6797;
  t6886 = -0.049*t6885;
  t6896 = -0.09*t6892;
  t6914 = t6886 + t6896;
  t6953 = -0.09*t6885;
  t6973 = 0.049*t6892;
  t6977 = t6953 + t6973;
  t8260 = t6881*t6914;
  t8261 = t6940*t6977;
  t7046 = -0.049*t7041;
  t7052 = -0.21*t7051;
  t7054 = t7046 + t7052;
  t7116 = -0.21*t7041;
  t7117 = 0.049*t7051;
  t7119 = t7116 + t7117;
  t8268 = t7054*t7105;
  t8269 = t7119*t7132;
  t7180 = -0.27068*t7168;
  t7204 = 0.00159*t7185;
  t7248 = t7180 + t7204;
  t7294 = -0.00159*t7168;
  t7299 = -0.27068*t7185;
  t7305 = t7294 + t7299;
  t8288 = t7248*t7272;
  t8292 = t7305*t7308;
  t7315 = 0.01841*t7313;
  t7327 = -0.70544*t7316;
  t7345 = t7315 + t7327;
  t7353 = -0.70544*t7313;
  t7368 = -0.01841*t7316;
  t7381 = t7353 + t7368;
  t8315 = Cos(var1[12]);
  t8319 = -1.*t8315;
  t8323 = 1. + t8319;
  t8341 = Sin(var1[12]);
  t8304 = t7345*t7348;
  t8306 = t7381*t7396;
  t8334 = -0.005481192614*t8323;
  t8356 = -0.07769774964800001*t8323;
  t8364 = -0.0004284921280000001*t8323;
  t8410 = -0.005498*t8341;
  t8413 = 0.996943*t8341;
  t8386 = 0.077936*t8341;
  t8426 = 0.0004284921280000001*t8323;
  t8372 = -0.996943*t8341;
  t8443 = 0.005481192614*t8323;
  t8347 = -0.077936*t8341;
  t8418 = 0.07769774964800001*t8323;
  t8357 = 0.005498*t8341;
  t7424 = -1.11344*t7419;
  t7430 = 0.02159*t7427;
  t7436 = t7424 + t7430;
  t7444 = -0.02159*t7419;
  t7445 = -1.11344*t7427;
  t7446 = t7444 + t7445;
  t7473 = t7427*t7442;
  t7474 = t7408*t7470;
  t7475 = t7473 + t7474;
  t7490 = t7408*t7442;
  t7494 = -1.*t7427*t7470;
  t7508 = t7490 + t7494;
  t8529 = Sin(var1[3]);
  t8526 = Cos(var1[3]);
  t8528 = t8526*t6643;
  t8530 = -1.*t8529*t5504*t5173;
  t8531 = t8528 + t8530;
  t8536 = t1535*t8531;
  t8537 = -1.*t1052*t8529*t5529;
  t8540 = t8536 + t8537;
  t8545 = t6643*t8529*t5504;
  t8546 = t8526*t5173;
  t8547 = t8545 + t8546;
  t8553 = t6330*t8547;
  t8554 = t8540*t6520;
  t8558 = t8553 + t8554;
  t8564 = -1.*t1052*t1535*t8529;
  t8570 = -1.*t8531*t5529;
  t8576 = t8564 + t8570;
  t8578 = t6883*t8558;
  t8591 = t8576*t6892;
  t8594 = t8578 + t8591;
  t8596 = t6883*t8576;
  t8597 = -1.*t8558*t6892;
  t8598 = t8596 + t8597;
  t8600 = -1.*t7051*t8594;
  t8608 = t7003*t8598;
  t8612 = t8600 + t8608;
  t8620 = t7003*t8594;
  t8622 = t7051*t8598;
  t8623 = t8620 + t8622;
  t8626 = t7185*t8612;
  t8627 = t7146*t8623;
  t8628 = t8626 + t8627;
  t8630 = t7146*t8612;
  t8631 = -1.*t7185*t8623;
  t8632 = t8630 + t8631;
  t8637 = -1.*t7316*t8628;
  t8638 = t7311*t8632;
  t8639 = t8637 + t8638;
  t8651 = t7311*t8628;
  t8652 = t7316*t8632;
  t8653 = t8651 + t8652;
  t8688 = -0.135*t1052*t7575*t8529;
  t8690 = -0.135*t7583*t8531;
  t8691 = -1.*t1052*t7575*t8529;
  t8695 = t7580*t8531;
  t8696 = t8691 + t8695;
  t8698 = -1.*t7580*t1052*t8529;
  t8699 = -1.*t7575*t8531;
  t8700 = t8698 + t8699;
  t8704 = t7635*t8547;
  t8705 = t7644*t8696;
  t8711 = -1.*t7626*t8547;
  t8712 = t7605*t8696;
  t8714 = t8711 + t8712;
  t8716 = t7605*t8547;
  t8717 = t7626*t8696;
  t8718 = t8716 + t8717;
  t8722 = t7716*t8700;
  t8724 = t7744*t8718;
  t8725 = t7706*t8700;
  t8726 = t7694*t8718;
  t8727 = t8725 + t8726;
  t8729 = t7694*t8700;
  t8730 = -1.*t7706*t8718;
  t8731 = t8729 + t8730;
  t8736 = t7782*t8727;
  t8737 = t7798*t8731;
  t8738 = -1.*t7771*t8727;
  t8740 = t7767*t8731;
  t8741 = t8738 + t8740;
  t8743 = t7767*t8727;
  t8744 = t7771*t8731;
  t8745 = t8743 + t8744;
  t8750 = t7841*t8741;
  t8751 = t7882*t8745;
  t8752 = t7829*t8741;
  t8753 = t7818*t8745;
  t8754 = t8752 + t8753;
  t8757 = t7818*t8741;
  t8758 = -1.*t7829*t8745;
  t8759 = t8757 + t8758;
  t7961 = 2.1934241414728571e-7*var1[20];
  t7972 = -0.000033783761634830594*t7971;
  t7986 = t7973 + t7981;
  t7990 = -0.021877537552*t7986;
  t8003 = t7994 + t7999;
  t8007 = -0.6934341012630001*t8003;
  t8009 = t7961 + t7972 + t7990 + t8007;
  t8764 = t7925*t8754;
  t8765 = t7942*t8759;
  t8011 = -1.2096424700126054e-9*var1[20];
  t8012 = -0.6934128581485427*t7971;
  t8015 = t8013 + t8014;
  t8017 = -0.021877537552*t8015;
  t8023 = t7994 + t8019;
  t8031 = -0.005534467322*t8023;
  t8039 = t8011 + t8012 + t8017 + t8031;
  t8766 = -1.*t7916*t8754;
  t8767 = t7908*t8759;
  t8768 = t8766 + t8767;
  t8042 = -1.7147089040178687e-8*var1[20];
  t8043 = -0.021744644052735636*t7971;
  t8045 = t7973 + t8044;
  t8046 = -0.005534467322*t8045;
  t8054 = t8013 + t8050;
  t8060 = -0.6934341012630001*t8054;
  t8065 = t8042 + t8043 + t8046 + t8060;
  t8770 = t7908*t8754;
  t8771 = t7916*t8759;
  t8772 = t8770 + t8771;
  t8075 = t8074 + t8044;
  t8078 = t8077 + t8050;
  t8080 = -0.993925573253*t7971;
  t8081 = 1. + t8080;
  t8088 = t8086 + t8019;
  t8091 = -0.999969365345*t7971;
  t8092 = 1. + t8091;
  t8094 = t8077 + t8014;
  t8120 = -0.006104248100000001*t7971;
  t8124 = 1. + t8120;
  t8132 = t8086 + t7999;
  t8137 = t8074 + t7981;
  t8167 = -1.11344*t8153;
  t8171 = 0.02159*t8169;
  t8172 = t8167 + t8171;
  t8174 = -0.02159*t8153;
  t8175 = -1.11344*t8169;
  t8181 = t8174 + t8175;
  t8689 = -0.0233*t8547;
  t8812 = 0.135*t4124*t8531;
  t8813 = 0.135*t1052*t8529*t5529;
  t8549 = t6330*t8540;
  t8550 = -1.*t8547*t6520;
  t8551 = t8549 + t8550;
  t8820 = t8540*t6523;
  t8821 = t8547*t6797;
  t8827 = t8558*t6914;
  t8828 = t8576*t6977;
  t8834 = t7054*t8594;
  t8835 = t7119*t8598;
  t8841 = t7248*t8612;
  t8843 = t7305*t8623;
  t8311 = -2.1934241414728571e-7*var1[12];
  t8328 = 0.000033783761634830594*t8323;
  t8351 = t8334 + t8347;
  t8355 = -0.6934341012630001*t8351;
  t8358 = t8356 + t8357;
  t8359 = -0.021877537552*t8358;
  t8360 = t8311 + t8328 + t8355 + t8359;
  t8849 = t7345*t8628;
  t8850 = t7381*t8632;
  t8362 = -1.2096424700126054e-9*var1[12];
  t8363 = -0.6934128581485427*t8323;
  t8378 = t8364 + t8372;
  t8381 = -0.021877537552*t8378;
  t8393 = t8334 + t8386;
  t8398 = 0.005534467322*t8393;
  t8403 = t8362 + t8363 + t8381 + t8398;
  t8408 = -1.7147089040178687e-8*var1[12];
  t8409 = -0.021744644052735636*t8323;
  t8411 = t8356 + t8410;
  t8412 = 0.005534467322*t8411;
  t8414 = t8364 + t8413;
  t8415 = -0.6934341012630001*t8414;
  t8416 = t8408 + t8409 + t8412 + t8415;
  t8419 = t8418 + t8410;
  t8430 = t8426 + t8413;
  t8438 = -0.993925573253*t8323;
  t8439 = 1. + t8438;
  t8444 = t8443 + t8386;
  t8447 = -0.999969365345*t8323;
  t8448 = 1. + t8447;
  t8453 = t8426 + t8372;
  t8468 = -0.006104248100000001*t8323;
  t8472 = 1. + t8468;
  t8477 = t8443 + t8347;
  t8479 = t8418 + t8357;
  t8660 = t7427*t8639;
  t8663 = t7408*t8653;
  t8666 = t8660 + t8663;
  t8669 = t7408*t8639;
  t8670 = -1.*t7427*t8653;
  t8672 = t8669 + t8670;
  t8891 = t6643*t8529;
  t8892 = t8526*t5504*t5173;
  t8893 = t8891 + t8892;
  t8896 = t1535*t8893;
  t8897 = t8526*t1052*t5529;
  t8898 = t8896 + t8897;
  t8900 = -1.*t8526*t6643*t5504;
  t8901 = t8529*t5173;
  t8902 = t8900 + t8901;
  t8908 = t6330*t8902;
  t8909 = t8898*t6520;
  t8910 = t8908 + t8909;
  t8912 = t8526*t1052*t1535;
  t8913 = -1.*t8893*t5529;
  t8914 = t8912 + t8913;
  t8916 = t6883*t8910;
  t8917 = t8914*t6892;
  t8918 = t8916 + t8917;
  t8920 = t6883*t8914;
  t8921 = -1.*t8910*t6892;
  t8922 = t8920 + t8921;
  t8924 = -1.*t7051*t8918;
  t8925 = t7003*t8922;
  t8926 = t8924 + t8925;
  t8928 = t7003*t8918;
  t8929 = t7051*t8922;
  t8930 = t8928 + t8929;
  t8932 = t7185*t8926;
  t8933 = t7146*t8930;
  t8934 = t8932 + t8933;
  t8936 = t7146*t8926;
  t8937 = -1.*t7185*t8930;
  t8938 = t8936 + t8937;
  t8940 = -1.*t7316*t8934;
  t8941 = t7311*t8938;
  t8942 = t8940 + t8941;
  t8944 = t7311*t8934;
  t8945 = t7316*t8938;
  t8946 = t8944 + t8945;
  t8961 = 0.135*t8526*t1052*t7575;
  t8963 = -0.135*t7583*t8893;
  t8965 = t8526*t1052*t7575;
  t8966 = t7580*t8893;
  t8967 = t8965 + t8966;
  t8969 = t7580*t8526*t1052;
  t8970 = -1.*t7575*t8893;
  t8971 = t8969 + t8970;
  t8975 = t7635*t8902;
  t8976 = t7644*t8967;
  t8978 = -1.*t7626*t8902;
  t8979 = t7605*t8967;
  t8980 = t8978 + t8979;
  t8982 = t7605*t8902;
  t8983 = t7626*t8967;
  t8985 = t8982 + t8983;
  t8990 = t7716*t8971;
  t8992 = t7744*t8985;
  t8993 = t7706*t8971;
  t8994 = t7694*t8985;
  t8995 = t8993 + t8994;
  t8997 = t7694*t8971;
  t8998 = -1.*t7706*t8985;
  t8999 = t8997 + t8998;
  t9004 = t7782*t8995;
  t9005 = t7798*t8999;
  t9006 = -1.*t7771*t8995;
  t9007 = t7767*t8999;
  t9008 = t9006 + t9007;
  t9010 = t7767*t8995;
  t9011 = t7771*t8999;
  t9012 = t9010 + t9011;
  t9017 = t7841*t9008;
  t9018 = t7882*t9012;
  t9019 = t7829*t9008;
  t9020 = t7818*t9012;
  t9021 = t9019 + t9020;
  t9023 = t7818*t9008;
  t9024 = -1.*t7829*t9012;
  t9025 = t9023 + t9024;
  t9030 = t7925*t9021;
  t9031 = t7942*t9025;
  t9032 = -1.*t7916*t9021;
  t9033 = t7908*t9025;
  t9034 = t9032 + t9033;
  t9036 = t7908*t9021;
  t9037 = t7916*t9025;
  t9038 = t9036 + t9037;
  t8962 = -0.0233*t8902;
  t9075 = 0.135*t4124*t8893;
  t9076 = -0.135*t8526*t1052*t5529;
  t8904 = t6330*t8898;
  t8905 = -1.*t8902*t6520;
  t8906 = t8904 + t8905;
  t9084 = t8898*t6523;
  t9085 = t8902*t6797;
  t9091 = t8910*t6914;
  t9092 = t8914*t6977;
  t9098 = t7054*t8918;
  t9099 = t7119*t8922;
  t9106 = t7248*t8926;
  t9107 = t7305*t8930;
  t9113 = t7345*t8934;
  t9114 = t7381*t8938;
  t8948 = t7427*t8942;
  t8949 = t7408*t8946;
  t8950 = t8948 + t8949;
  t8952 = t7408*t8942;
  t8953 = -1.*t7427*t8946;
  t8954 = t8952 + t8953;
  p_output1[0]=0.135*t1052*t4124*t5173 + 0.135*t5504*t5529 - 1.*t6291*t6523 - 1.*t1052*t6643*t6797 - 0.1305*t6877 - 1.*t6881*t6914 - 1.*t6940*t6977 - 1.*t7054*t7105 - 1.*t7119*t7132 - 1.*t7248*t7272 - 1.*t7305*t7308 - 1.*t7345*t7348 - 1.*t7381*t7396 - 1.*t7436*t7442 - 1.*t7446*t7470 + 0.02159*t7475 + 1.11344*t7508 - 1.*var1[0] + 0.0288377642750394*(10.33*(-0.000346*t1052*t5173 + 0.02841*t5504 + 0.05066*t1052*t6643 + var1[0]) + 1.965608*(t7574 + t7576 + t7584 - 0.1351*t7587 + 0.01793*t7596 + var1[0]) + 1.316608*(t7576 + t7584 - 0.0343*t7596 + t7640 + t7646 - 0.135*t7651 - 0.049*t7671 + var1[0]) + 5.79228*(t7576 + t7584 + t7640 + t7646 - 0.17081*t7651 + t7721 + t7745 - 0.04895*t7750 - 0.14946*t7755 + var1[0]) + 1.03008*(t7576 + t7584 + t7640 + t7646 - 0.132168*t7651 + t7721 + t7745 + t7786 + t7802 - 0.255862*t7809 - 0.007761*t7813 + var1[0]) + 0.763*(t7576 + t7584 + t7640 + t7646 - 0.130288*t7651 + t7721 + t7745 + t7786 + t7802 + t7867 + t7891 - 0.000421*t7897 - 0.45406*t7902 + var1[0]) + 1.03*(t7576 + t7584 + t7640 + t7646 - 0.127241*t7651 + t7721 + t7745 + t7786 + t7802 + t7867 + t7891 + t7930 + t7947 - 0.826587*t7953 - 0.004179*t7957 + var1[0]) + 0.126*(t7576 + t7584 + t7640 + t7646 + t7721 + t7745 + t7786 + t7802 + t7867 + t7891 + t7930 + t7947 + t7651*t8009 + t7953*t8039 + t7957*t8065 + 0.01889*(t7651*t8075 + t7953*t8078 + t7957*t8081) - 0.617968*(t7651*t8088 + t7953*t8092 + t7957*t8094) - 0.126739*(t7651*t8124 + t7953*t8132 + t7957*t8137) + var1[0]) + 0.1498*(t7576 + t7584 + t7640 + t7646 - 0.13064*t7651 + t7721 + t7745 + t7786 + t7802 + t7867 + t7891 + t7930 + t7947 + 0.00589*(t7957*t8144 + t7953*t8169) - 1.11818*(t7953*t8144 - 1.*t7957*t8169) + t7953*t8172 + t7957*t8181 + var1[0]) + 1.965608*(0.1351*t6291 + 0.01793*t6940 + t7574 + t8211 + t8212 + var1[0]) + 1.316608*(0.135*t6877 - 0.049*t6881 - 0.0343*t6940 + t8211 + t8212 + t8237 + t8241 + var1[0]) + 5.79228*(0.17081*t6877 - 0.04895*t7105 - 0.14946*t7132 + t8211 + t8212 + t8237 + t8241 + t8260 + t8261 + var1[0]) + 1.03008*(0.132168*t6877 - 0.255862*t7272 - 0.007761*t7308 + t8211 + t8212 + t8237 + t8241 + t8260 + t8261 + t8268 + t8269 + var1[0]) + 0.763*(0.130288*t6877 - 0.000421*t7348 - 0.45406*t7396 + t8211 + t8212 + t8237 + t8241 + t8260 + t8261 + t8268 + t8269 + t8288 + t8292 + var1[0]) + 1.03*(0.127241*t6877 - 0.826587*t7442 - 0.004179*t7470 + t8211 + t8212 + t8237 + t8241 + t8260 + t8261 + t8268 + t8269 + t8288 + t8292 + t8304 + t8306 + var1[0]) + 0.1498*(0.13064*t6877 + t7436*t7442 + t7446*t7470 + 0.00589*t7475 - 1.11818*t7508 + t8211 + t8212 + t8237 + t8241 + t8260 + t8261 + t8268 + t8269 + t8288 + t8292 + t8304 + t8306 + var1[0]) + 0.126*(t8211 + t8212 + t8237 + t8241 + t8260 + t8261 + t8268 + t8269 + t8288 + t8292 + t8304 + t8306 + t6877*t8360 + t7442*t8403 + t7470*t8416 + 0.01889*(t6877*t8419 + t7442*t8430 + t7470*t8439) - 0.617968*(t6877*t8444 + t7442*t8448 + t7470*t8453) + 0.126739*(t6877*t8472 + t7442*t8477 + t7470*t8479) + var1[0]));
  p_output1[1]=-0.135*t1052*t5529*t8529 - 0.135*t4124*t8531 - 1.*t6523*t8540 - 1.*t6797*t8547 - 0.1305*t8551 - 1.*t6914*t8558 - 1.*t6977*t8576 - 1.*t7054*t8594 - 1.*t7119*t8598 - 1.*t7248*t8612 - 1.*t7305*t8623 - 1.*t7345*t8628 - 1.*t7381*t8632 - 1.*t7436*t8639 - 1.*t7446*t8653 + 0.02159*t8666 + 1.11344*t8672 - 1.*var1[1] + 0.0288377642750394*(10.33*(-0.02841*t1052*t8529 + 0.000346*t8531 + 0.05066*t8547 + var1[1]) + 1.965608*(t8688 + t8689 + t8690 - 0.1351*t8696 + 0.01793*t8700 + var1[1]) + 1.316608*(t8688 + t8690 - 0.0343*t8700 + t8704 + t8705 - 0.135*t8714 - 0.049*t8718 + var1[1]) + 5.79228*(t8688 + t8690 + t8704 + t8705 - 0.17081*t8714 + t8722 + t8724 - 0.04895*t8727 - 0.14946*t8731 + var1[1]) + 1.03008*(t8688 + t8690 + t8704 + t8705 - 0.132168*t8714 + t8722 + t8724 + t8736 + t8737 - 0.255862*t8741 - 0.007761*t8745 + var1[1]) + 0.763*(t8688 + t8690 + t8704 + t8705 - 0.130288*t8714 + t8722 + t8724 + t8736 + t8737 + t8750 + t8751 - 0.000421*t8754 - 0.45406*t8759 + var1[1]) + 1.03*(t8688 + t8690 + t8704 + t8705 - 0.127241*t8714 + t8722 + t8724 + t8736 + t8737 + t8750 + t8751 + t8764 + t8765 - 0.826587*t8768 - 0.004179*t8772 + var1[1]) + 0.126*(t8688 + t8690 + t8704 + t8705 + t8009*t8714 + t8722 + t8724 + t8736 + t8737 + t8750 + t8751 + t8764 + t8765 + t8039*t8768 + t8065*t8772 + 0.01889*(t8075*t8714 + t8078*t8768 + t8081*t8772) - 0.617968*(t8088*t8714 + t8092*t8768 + t8094*t8772) - 0.126739*(t8124*t8714 + t8132*t8768 + t8137*t8772) + var1[1]) + 0.1498*(t8688 + t8690 + t8704 + t8705 - 0.13064*t8714 + t8722 + t8724 + t8736 + t8737 + t8750 + t8751 + t8764 + t8765 + t8172*t8768 + t8181*t8772 + 0.00589*(t8169*t8768 + t8144*t8772) - 1.11818*(t8144*t8768 - 1.*t8169*t8772) + var1[1]) + 1.965608*(0.1351*t8540 + 0.01793*t8576 + t8689 + t8812 + t8813 + var1[1]) + 1.316608*(0.135*t8551 - 0.049*t8558 - 0.0343*t8576 + t8812 + t8813 + t8820 + t8821 + var1[1]) + 5.79228*(0.17081*t8551 - 0.04895*t8594 - 0.14946*t8598 + t8812 + t8813 + t8820 + t8821 + t8827 + t8828 + var1[1]) + 1.03008*(0.132168*t8551 - 0.255862*t8612 - 0.007761*t8623 + t8812 + t8813 + t8820 + t8821 + t8827 + t8828 + t8834 + t8835 + var1[1]) + 0.763*(0.130288*t8551 - 0.000421*t8628 - 0.45406*t8632 + t8812 + t8813 + t8820 + t8821 + t8827 + t8828 + t8834 + t8835 + t8841 + t8843 + var1[1]) + 1.03*(0.127241*t8551 - 0.826587*t8639 - 0.004179*t8653 + t8812 + t8813 + t8820 + t8821 + t8827 + t8828 + t8834 + t8835 + t8841 + t8843 + t8849 + t8850 + var1[1]) + 0.126*(t8360*t8551 + t8403*t8639 + t8416*t8653 + 0.01889*(t8419*t8551 + t8430*t8639 + t8439*t8653) - 0.617968*(t8444*t8551 + t8448*t8639 + t8453*t8653) + 0.126739*(t8472*t8551 + t8477*t8639 + t8479*t8653) + t8812 + t8813 + t8820 + t8821 + t8827 + t8828 + t8834 + t8835 + t8841 + t8843 + t8849 + t8850 + var1[1]) + 0.1498*(0.13064*t8551 + t7436*t8639 + t7446*t8653 + 0.00589*t8666 - 1.11818*t8672 + t8812 + t8813 + t8820 + t8821 + t8827 + t8828 + t8834 + t8835 + t8841 + t8843 + t8849 + t8850 + var1[1]));
  p_output1[2]=0.135*t1052*t5529*t8526 - 0.135*t4124*t8893 - 1.*t6523*t8898 - 1.*t6797*t8902 - 0.1305*t8906 - 1.*t6914*t8910 - 1.*t6977*t8914 - 1.*t7054*t8918 - 1.*t7119*t8922 - 1.*t7248*t8926 - 1.*t7305*t8930 - 1.*t7345*t8934 - 1.*t7381*t8938 - 1.*t7436*t8942 - 1.*t7446*t8946 + 0.02159*t8950 + 1.11344*t8954 - 1.*var1[2] + 0.0288377642750394*(10.33*(0.02841*t1052*t8526 + 0.000346*t8893 + 0.05066*t8902 + var1[2]) + 1.965608*(t8961 + t8962 + t8963 - 0.1351*t8967 + 0.01793*t8971 + var1[2]) + 1.316608*(t8961 + t8963 - 0.0343*t8971 + t8975 + t8976 - 0.135*t8980 - 0.049*t8985 + var1[2]) + 5.79228*(t8961 + t8963 + t8975 + t8976 - 0.17081*t8980 + t8990 + t8992 - 0.04895*t8995 - 0.14946*t8999 + var1[2]) + 1.03008*(t8961 + t8963 + t8975 + t8976 - 0.132168*t8980 + t8990 + t8992 + t9004 + t9005 - 0.255862*t9008 - 0.007761*t9012 + var1[2]) + 0.763*(t8961 + t8963 + t8975 + t8976 - 0.130288*t8980 + t8990 + t8992 + t9004 + t9005 + t9017 + t9018 - 0.000421*t9021 - 0.45406*t9025 + var1[2]) + 1.03*(t8961 + t8963 + t8975 + t8976 - 0.127241*t8980 + t8990 + t8992 + t9004 + t9005 + t9017 + t9018 + t9030 + t9031 - 0.826587*t9034 - 0.004179*t9038 + var1[2]) + 0.126*(t8961 + t8963 + t8975 + t8976 + t8009*t8980 + t8990 + t8992 + t9004 + t9005 + t9017 + t9018 + t9030 + t9031 + t8039*t9034 + t8065*t9038 + 0.01889*(t8075*t8980 + t8078*t9034 + t8081*t9038) - 0.617968*(t8088*t8980 + t8092*t9034 + t8094*t9038) - 0.126739*(t8124*t8980 + t8132*t9034 + t8137*t9038) + var1[2]) + 0.1498*(t8961 + t8963 + t8975 + t8976 - 0.13064*t8980 + t8990 + t8992 + t9004 + t9005 + t9017 + t9018 + t9030 + t9031 + t8172*t9034 + t8181*t9038 + 0.00589*(t8169*t9034 + t8144*t9038) - 1.11818*(t8144*t9034 - 1.*t8169*t9038) + var1[2]) + 1.965608*(0.1351*t8898 + 0.01793*t8914 + t8962 + t9075 + t9076 + var1[2]) + 1.316608*(0.135*t8906 - 0.049*t8910 - 0.0343*t8914 + t9075 + t9076 + t9084 + t9085 + var1[2]) + 5.79228*(0.17081*t8906 - 0.04895*t8918 - 0.14946*t8922 + t9075 + t9076 + t9084 + t9085 + t9091 + t9092 + var1[2]) + 1.03008*(0.132168*t8906 - 0.255862*t8926 - 0.007761*t8930 + t9075 + t9076 + t9084 + t9085 + t9091 + t9092 + t9098 + t9099 + var1[2]) + 0.763*(0.130288*t8906 - 0.000421*t8934 - 0.45406*t8938 + t9075 + t9076 + t9084 + t9085 + t9091 + t9092 + t9098 + t9099 + t9106 + t9107 + var1[2]) + 1.03*(0.127241*t8906 - 0.826587*t8942 - 0.004179*t8946 + t9075 + t9076 + t9084 + t9085 + t9091 + t9092 + t9098 + t9099 + t9106 + t9107 + t9113 + t9114 + var1[2]) + 0.126*(t8360*t8906 + t8403*t8942 + t8416*t8946 + 0.01889*(t8419*t8906 + t8430*t8942 + t8439*t8946) - 0.617968*(t8444*t8906 + t8448*t8942 + t8453*t8946) + 0.126739*(t8472*t8906 + t8477*t8942 + t8479*t8946) + t9075 + t9076 + t9084 + t9085 + t9091 + t9092 + t9098 + t9099 + t9106 + t9107 + t9113 + t9114 + var1[2]) + 0.1498*(0.13064*t8906 + t7436*t8942 + t7446*t8946 + 0.00589*t8950 - 1.11818*t8954 + t9075 + t9076 + t9084 + t9085 + t9091 + t9092 + t9098 + t9099 + t9106 + t9107 + t9113 + t9114 + var1[2]));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void p_com_LeftStance_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




