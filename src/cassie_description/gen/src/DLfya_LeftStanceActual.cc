/*
 * Automatically Generated from Mathematica.
 * Sun 7 Nov 2021 14:27:58 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "DLfya_LeftStanceActual.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t36;
  double t215;
  double t337;
  double t339;
  double t428;
  double t586;
  double t824;
  double t845;
  double t862;
  double t866;
  double t871;
  double t910;
  double t1138;
  double t1160;
  double t1228;
  double t1385;
  double t1501;
  double t1522;
  double t1593;
  double t1596;
  double t1605;
  double t1609;
  double t1685;
  double t1707;
  double t1711;
  double t1885;
  double t1902;
  double t1911;
  double t677;
  double t693;
  double t699;
  double t376;
  double t438;
  double t523;
  double t1313;
  double t1315;
  double t1373;
  double t892;
  double t1045;
  double t1113;
  double t1837;
  double t1861;
  double t1884;
  double t2512;
  double t2548;
  double t2552;
  double t1607;
  double t1611;
  double t1667;
  double t2590;
  double t2595;
  double t2698;
  double t2699;
  double t2733;
  double t1916;
  double t1928;
  double t1942;
  double t38;
  double t580;
  double t628;
  double t727;
  double t1303;
  double t1585;
  double t1792;
  double t1912;
  double t1967;
  double t2138;
  double t2145;
  double t2198;
  double t2207;
  double t2254;
  double t2308;
  double t2429;
  double t2460;
  double t2507;
  double t2556;
  double t2579;
  double t2665;
  double t2735;
  double t2754;
  double t2763;
  double t2814;
  double t2839;
  double t2893;
  double t2896;
  double t2926;
  double t2968;
  double t2974;
  double t3048;
  double t3114;
  double t3001;
  double t3003;
  double t3030;
  double t3740;
  double t3755;
  double t3762;
  double t3773;
  double t3786;
  double t3791;
  double t3825;
  double t3846;
  double t2280;
  double t2978;
  double t2995;
  double t3000;
  double t3627;
  double t3650;
  double t3661;
  double t3664;
  double t3696;
  double t3730;
  double t3764;
  double t3813;
  double t3854;
  double t3866;
  double t3878;
  double t3881;
  double t3891;
  double t3906;
  double t3907;
  double t3908;
  double t3920;
  double t3935;
  double t3956;
  double t3970;
  double t4067;
  double t4079;
  double t4182;
  double t4194;
  double t4009;
  double t3034;
  double t3170;
  double t3235;
  double t3258;
  double t3267;
  double t3317;
  double t3328;
  double t3360;
  double t3379;
  double t3415;
  double t3418;
  double t3496;
  double t3511;
  double t3519;
  double t3555;
  double t3563;
  double t4740;
  double t4776;
  double t4555;
  double t4559;
  double t4564;
  double t4533;
  double t4539;
  double t4684;
  double t4703;
  double t4707;
  double t4626;
  double t4649;
  double t4869;
  double t4890;
  double t4542;
  double t4612;
  double t4674;
  double t4731;
  double t4771;
  double t4795;
  double t4796;
  double t4813;
  double t4819;
  double t4839;
  double t4840;
  double t4841;
  double t4842;
  double t4846;
  double t4850;
  double t4054;
  double t4064;
  double t4854;
  double t4857;
  double t4864;
  double t4867;
  double t4874;
  double t4902;
  double t4903;
  double t4904;
  double t4910;
  double t4914;
  double t4915;
  double t4922;
  double t4926;
  double t4929;
  double t4934;
  double t3375;
  double t3602;
  double t3619;
  double t4852;
  double t4935;
  double t4936;
  double t4938;
  double t4940;
  double t4943;
  double t4944;
  double t4945;
  double t4946;
  double t4947;
  double t4951;
  double t4954;
  double t4955;
  double t5133;
  double t5151;
  double t5155;
  double t5157;
  double t5083;
  double t5085;
  double t5086;
  double t5099;
  double t5118;
  double t5128;
  double t5233;
  double t5238;
  double t5240;
  double t5244;
  double t5305;
  double t5312;
  double t5314;
  double t4474;
  double t4478;
  double t4479;
  double t4481;
  double t4490;
  double t4493;
  double t4494;
  double t4502;
  double t4511;
  double t4515;
  double t4520;
  double t4521;
  double t4524;
  double t4996;
  double t5007;
  double t5016;
  double t5018;
  double t5020;
  double t5023;
  double t5030;
  double t5031;
  double t5039;
  double t5040;
  double t5043;
  double t5044;
  double t5048;
  double t5055;
  double t5056;
  double t5057;
  double t5058;
  double t5063;
  double t5069;
  double t5072;
  double t5073;
  double t5400;
  double t5403;
  double t5413;
  double t5414;
  double t5415;
  double t5421;
  double t5434;
  double t5435;
  double t5436;
  double t5437;
  double t5439;
  double t5443;
  double t5460;
  double t5469;
  double t5470;
  double t5481;
  double t5482;
  double t5483;
  double t5488;
  double t5490;
  double t5493;
  double t5496;
  double t5501;
  double t5502;
  double t5504;
  double t5485;
  double t5486;
  double t5487;
  double t5419;
  double t5422;
  double t5424;
  double t5427;
  double t5428;
  double t5431;
  double t5472;
  double t5473;
  double t5480;
  double t5442;
  double t5444;
  double t5454;
  double t5541;
  double t5543;
  double t5546;
  double t5495;
  double t5497;
  double t5498;
  double t5506;
  double t5507;
  double t5508;
  double t5554;
  double t5555;
  double t5561;
  double t5564;
  double t5569;
  double t5512;
  double t5513;
  double t5515;
  double t5401;
  double t5405;
  double t5425;
  double t5432;
  double t5471;
  double t5484;
  double t5499;
  double t5509;
  double t5520;
  double t5525;
  double t5526;
  double t5527;
  double t5529;
  double t5530;
  double t5534;
  double t5535;
  double t5536;
  double t5538;
  double t5547;
  double t5553;
  double t5563;
  double t5571;
  double t5579;
  double t5580;
  double t5583;
  double t5586;
  double t5587;
  double t5588;
  double t5590;
  double t5591;
  double t5592;
  double t5598;
  double t5599;
  double t5613;
  double t5618;
  double t5619;
  double t5667;
  double t5671;
  double t5673;
  double t5683;
  double t5687;
  double t5691;
  double t5692;
  double t5694;
  double t5532;
  double t5593;
  double t5595;
  double t5597;
  double t5651;
  double t5654;
  double t5660;
  double t5662;
  double t5665;
  double t5666;
  double t5681;
  double t5689;
  double t5695;
  double t5696;
  double t5699;
  double t5700;
  double t5702;
  double t5704;
  double t5705;
  double t5706;
  double t5708;
  double t5710;
  double t5712;
  double t5715;
  double t5741;
  double t5743;
  double t5736;
  double t5737;
  double t5723;
  double t5611;
  double t5620;
  double t5622;
  double t5623;
  double t5624;
  double t5625;
  double t5628;
  double t5629;
  double t5632;
  double t5636;
  double t5637;
  double t5639;
  double t5644;
  double t5645;
  double t5646;
  double t5648;
  double t5837;
  double t5840;
  double t5818;
  double t5819;
  double t5822;
  double t5823;
  double t5825;
  double t5832;
  double t5833;
  double t5834;
  double t5829;
  double t5830;
  double t5881;
  double t5887;
  double t5821;
  double t5827;
  double t5831;
  double t5836;
  double t5839;
  double t5842;
  double t5844;
  double t5846;
  double t5852;
  double t5855;
  double t5859;
  double t5861;
  double t5865;
  double t5868;
  double t5869;
  double t5732;
  double t5735;
  double t5871;
  double t5874;
  double t5877;
  double t5879;
  double t5882;
  double t5888;
  double t5891;
  double t5892;
  double t5893;
  double t5897;
  double t5898;
  double t5901;
  double t5903;
  double t5905;
  double t5906;
  double t5728;
  double t5729;
  double t5730;
  double t5731;
  double t5933;
  double t5934;
  double t5935;
  double t5940;
  double t5941;
  double t5942;
  double t5944;
  double t5945;
  double t5946;
  double t5947;
  double t5948;
  double t5949;
  double t5950;
  double t5951;
  double t5953;
  double t5954;
  double t5957;
  double t5958;
  double t5959;
  double t5960;
  double t5962;
  double t5963;
  double t5964;
  double t5796;
  double t5798;
  double t5799;
  double t5974;
  double t5980;
  double t5984;
  double t5985;
  double t5987;
  double t6005;
  double t6007;
  double t6009;
  double t6011;
  double t6012;
  double t6013;
  double t6014;
  double t6018;
  double t6021;
  double t6022;
  double t6025;
  double t5748;
  double t5752;
  double t5756;
  double t5759;
  double t5764;
  double t5765;
  double t6033;
  double t6034;
  double t5914;
  double t5918;
  double t6062;
  double t6063;
  double t6065;
  double t6066;
  double t6092;
  double t6093;
  double t6095;
  double t6097;
  double t6098;
  double t6100;
  double t6101;
  double t6102;
  double t6103;
  double t6082;
  double t6085;
  double t6088;
  double t5631;
  double t5649;
  double t5650;
  double t5870;
  double t5909;
  double t5910;
  double t5912;
  double t5919;
  double t5920;
  double t5925;
  double t5927;
  double t5928;
  double t5929;
  double t5930;
  double t6210;
  double t6211;
  double t6213;
  double t6218;
  double t6191;
  double t6193;
  double t6194;
  double t6200;
  double t6203;
  double t6204;
  double t6256;
  double t6246;
  double t6247;
  double t6248;
  double t6143;
  double t6145;
  double t6148;
  double t6165;
  double t6166;
  double t6167;
  double t6305;
  double t6308;
  double t6310;
  double t6060;
  double t6061;
  double t6076;
  double t6079;
  double t6106;
  double t6220;
  double t6224;
  double t6227;
  double t6229;
  double t6233;
  double t6235;
  double t6259;
  double t6260;
  double t6261;
  double t6263;
  double t6264;
  double t6266;
  double t6394;
  double t6395;
  double t6397;
  double t5783;
  double t5784;
  double t5785;
  double t5788;
  double t5790;
  double t5800;
  double t5801;
  double t5808;
  double t5809;
  double t5814;
  double t6138;
  double t6141;
  double t6154;
  double t6155;
  double t6156;
  double t6158;
  double t6159;
  double t6160;
  double t6163;
  double t6164;
  double t6171;
  double t6172;
  double t6174;
  double t6176;
  double t6177;
  double t6444;
  double t6447;
  double t6448;
  double t6399;
  double t6400;
  double t6401;
  double t6420;
  double t6422;
  double t6425;
  double t5970;
  double t5992;
  double t5993;
  double t5994;
  double t5995;
  double t6000;
  double t6004;
  double t6276;
  double t6278;
  double t6279;
  double t6281;
  double t6282;
  double t6284;
  double t6293;
  double t6294;
  double t6296;
  double t6297;
  double t6302;
  double t6303;
  t36 = Cos(var1[8]);
  t215 = Cos(var1[9]);
  t337 = -1.*t215;
  t339 = 1. + t337;
  t428 = Sin(var1[9]);
  t586 = Sin(var1[8]);
  t824 = -1.*var1[9];
  t845 = 0.226893 + t824;
  t862 = Cos(t845);
  t866 = -1.*t862;
  t871 = 1. + t866;
  t910 = Sin(t845);
  t1138 = -1.*t36*t428;
  t1160 = -1.*t215*t586;
  t1228 = t1138 + t1160;
  t1385 = t215*t36;
  t1501 = -1.*t428*t586;
  t1522 = t1385 + t1501;
  t1593 = Cos(var1[13]);
  t1596 = -1.*t1593;
  t1605 = 1. + t1596;
  t1609 = Sin(var1[13]);
  t1685 = t910*t1228;
  t1707 = t862*t1522;
  t1711 = t1685 + t1707;
  t1885 = t862*t1228;
  t1902 = -1.*t910*t1522;
  t1911 = t1885 + t1902;
  t677 = -0.21*t339;
  t693 = 0.049*t428;
  t699 = t677 + t693;
  t376 = -0.049*t339;
  t438 = -0.21*t428;
  t523 = t376 + t438;
  t1313 = 0.01841*t871;
  t1315 = -0.70544*t910;
  t1373 = t1313 + t1315;
  t892 = -0.70544*t871;
  t1045 = -0.01841*t910;
  t1113 = t892 + t1045;
  t1837 = -1.11344*t1605;
  t1861 = 0.02159*t1609;
  t1884 = t1837 + t1861;
  t2512 = t36*t428;
  t2548 = t215*t586;
  t2552 = t2512 + t2548;
  t1607 = -0.02159*t1605;
  t1611 = -1.11344*t1609;
  t1667 = t1607 + t1611;
  t2590 = -1.*t910*t2552;
  t2595 = t2590 + t1707;
  t2698 = t862*t2552;
  t2699 = t910*t1522;
  t2733 = t2698 + t2699;
  t1916 = -1.*t1609*t1711;
  t1928 = t1593*t1911;
  t1942 = t1916 + t1928;
  t38 = 0.049*t36;
  t580 = t36*t523;
  t628 = -0.09*t586;
  t727 = -1.*t699*t586;
  t1303 = t1113*t1228;
  t1585 = t1373*t1522;
  t1792 = t1667*t1711;
  t1912 = t1884*t1911;
  t1967 = -1.11344*t1942;
  t2138 = t1593*t1711;
  t2145 = t1609*t1911;
  t2198 = t2138 + t2145;
  t2207 = -0.02159*t2198;
  t2254 = t38 + t580 + t628 + t727 + t1303 + t1585 + t1792 + t1912 + t1967 + t2207;
  t2308 = 0.09*t36;
  t2429 = t36*t699;
  t2460 = 0.049*t586;
  t2507 = t523*t586;
  t2556 = t1373*t2552;
  t2579 = t1113*t1522;
  t2665 = t1884*t2595;
  t2735 = t1667*t2733;
  t2754 = t1609*t2595;
  t2763 = t1593*t2733;
  t2814 = t2754 + t2763;
  t2839 = -0.02159*t2814;
  t2893 = t1593*t2595;
  t2896 = -1.*t1609*t2733;
  t2926 = t2893 + t2896;
  t2968 = -1.11344*t2926;
  t2974 = t2308 + t2429 + t2460 + t2507 + t2556 + t2579 + t2665 + t2735 + t2839 + t2968;
  t3048 = 0.02159*t1593;
  t3114 = t3048 + t1611;
  t3001 = -1.11344*t1593;
  t3003 = -0.02159*t1609;
  t3030 = t3001 + t3003;
  t3740 = -1.*t215*t36;
  t3755 = t428*t586;
  t3762 = t3740 + t3755;
  t3773 = -1.*t910*t1228;
  t3786 = t862*t3762;
  t3791 = t3773 + t3786;
  t3825 = t910*t3762;
  t3846 = t1885 + t3825;
  t2280 = Power(t2254,2);
  t2978 = Power(t2974,2);
  t2995 = 0.00002025 + t2280 + t2978;
  t3000 = Power(t2995,-1.5);
  t3627 = 2.*t2254*t2974;
  t3650 = -0.09*t36;
  t3661 = -1.*t36*t699;
  t3664 = -0.049*t586;
  t3696 = -1.*t523*t586;
  t3730 = t1373*t1228;
  t3764 = t1113*t3762;
  t3813 = t1884*t3791;
  t3854 = t1667*t3846;
  t3866 = t1609*t3791;
  t3878 = t1593*t3846;
  t3881 = t3866 + t3878;
  t3891 = -0.02159*t3881;
  t3906 = t1593*t3791;
  t3907 = -1.*t1609*t3846;
  t3908 = t3906 + t3907;
  t3920 = -1.11344*t3908;
  t3935 = t3650 + t3661 + t3664 + t3696 + t3730 + t3764 + t3813 + t3854 + t3891 + t3920;
  t3956 = 2.*t2254*t3935;
  t3970 = t3627 + t3956;
  t4067 = t910*t2552;
  t4079 = t4067 + t3786;
  t4182 = -1.*t910*t3762;
  t4194 = t2698 + t4182;
  t4009 = 1/Sqrt(t2995);
  t3034 = t3030*t1711;
  t3170 = t3114*t1911;
  t3235 = -0.02159*t1942;
  t3258 = -1.*t1593*t1711;
  t3267 = -1.*t1609*t1911;
  t3317 = t3258 + t3267;
  t3328 = -1.11344*t3317;
  t3360 = t3034 + t3170 + t3235 + t3328;
  t3379 = t3114*t2595;
  t3415 = t3030*t2733;
  t3418 = -1.*t1609*t2595;
  t3496 = -1.*t1593*t2733;
  t3511 = t3418 + t3496;
  t3519 = -1.11344*t3511;
  t3555 = -0.02159*t2926;
  t3563 = t3379 + t3415 + t3519 + t3555;
  t4740 = t1885 + t2698;
  t4776 = t1685 + t4067;
  t4555 = -0.21*t215;
  t4559 = -0.049*t428;
  t4564 = t4555 + t4559;
  t4533 = 0.049*t215;
  t4539 = t4533 + t438;
  t4684 = 0.01841*t862;
  t4703 = 0.70544*t910;
  t4707 = t4684 + t4703;
  t4626 = 0.70544*t862;
  t4649 = t4626 + t1045;
  t4869 = t1707 + t3786;
  t4890 = t2699 + t3825;
  t4542 = t36*t4539;
  t4612 = t4564*t586;
  t4674 = t4649*t2552;
  t4731 = t4707*t1522;
  t4771 = t1884*t4740;
  t4795 = t1667*t4776;
  t4796 = t1609*t4740;
  t4813 = t1593*t4776;
  t4819 = t4796 + t4813;
  t4839 = -0.02159*t4819;
  t4840 = t1593*t4740;
  t4841 = -1.*t1609*t4776;
  t4842 = t4840 + t4841;
  t4846 = -1.11344*t4842;
  t4850 = t4542 + t4612 + t1303 + t4674 + t1585 + t4731 + t4771 + t4795 + t4839 + t4846;
  t4054 = t1113*t2552;
  t4064 = t1373*t3762;
  t4854 = t36*t4564;
  t4857 = -1.*t4539*t586;
  t4864 = t4707*t1228;
  t4867 = t4649*t1522;
  t4874 = t1884*t4869;
  t4902 = t1667*t4890;
  t4903 = t1609*t4869;
  t4904 = t1593*t4890;
  t4910 = t4903 + t4904;
  t4914 = -0.02159*t4910;
  t4915 = t1593*t4869;
  t4922 = -1.*t1609*t4890;
  t4926 = t4915 + t4922;
  t4929 = -1.11344*t4926;
  t4934 = t4854 + t4857 + t3730 + t4864 + t4867 + t3764 + t4874 + t4902 + t4914 + t4929;
  t3375 = 2.*t3360*t2254;
  t3602 = 2.*t2974*t3563;
  t3619 = t3375 + t3602;
  t4852 = 2.*t4850*t2974;
  t4935 = 2.*t2254*t4934;
  t4936 = t4852 + t4935;
  t4938 = 2.*t4850*t2254;
  t4940 = -1.*t36*t4539;
  t4943 = -1.*t4564*t586;
  t4944 = t4649*t1228;
  t4945 = t4707*t3762;
  t4946 = t4940 + t4943 + t4944 + t4054 + t4064 + t4945 + t4771 + t4795 + t4839 + t4846;
  t4947 = 2.*t4946*t2254;
  t4951 = 2.*t2974*t4934;
  t4954 = 2.*t3935*t4934;
  t4955 = t4938 + t4947 + t4951 + t4954;
  t5133 = t1685 + t4067 + t1707 + t3786;
  t5151 = -1.*t862*t1228;
  t5155 = -1.*t862*t2552;
  t5157 = t5151 + t5155 + t2699 + t3825;
  t5083 = -0.049*t215;
  t5085 = 0.21*t428;
  t5086 = t5083 + t5085;
  t5099 = -0.70544*t862;
  t5118 = 0.01841*t910;
  t5128 = t5099 + t5118;
  t5233 = -1.*t862*t1522;
  t5238 = -1.*t862*t3762;
  t5240 = t1685 + t4067 + t5233 + t5238;
  t5244 = t1885 + t2698 + t2699 + t3825;
  t5305 = -0.02159*t1593;
  t5312 = 1.11344*t1609;
  t5314 = t5305 + t5312;
  t4474 = 2.*t3360*t2974;
  t4478 = 2.*t2254*t3563;
  t4479 = 2.*t3360*t3935;
  t4481 = t3114*t3791;
  t4490 = t3030*t3846;
  t4493 = -1.*t1609*t3791;
  t4494 = -1.*t1593*t3846;
  t4502 = t4493 + t4494;
  t4511 = -1.11344*t4502;
  t4515 = -0.02159*t3908;
  t4520 = t4481 + t4490 + t4511 + t4515;
  t4521 = 2.*t2254*t4520;
  t4524 = t4474 + t4478 + t4479 + t4521;
  t4996 = t3114*t4740;
  t5007 = t3030*t4776;
  t5016 = -1.*t1609*t4740;
  t5018 = -1.*t1593*t4776;
  t5020 = t5016 + t5018;
  t5023 = -1.11344*t5020;
  t5030 = -0.02159*t4842;
  t5031 = t4996 + t5007 + t5023 + t5030;
  t5039 = 2.*t5031*t2974;
  t5040 = 2.*t4850*t3563;
  t5043 = 2.*t3360*t4934;
  t5044 = t3114*t4869;
  t5048 = t3030*t4890;
  t5055 = -1.*t1609*t4869;
  t5056 = -1.*t1593*t4890;
  t5057 = t5055 + t5056;
  t5058 = -1.11344*t5057;
  t5063 = -0.02159*t4926;
  t5069 = t5044 + t5048 + t5058 + t5063;
  t5072 = 2.*t2254*t5069;
  t5073 = t5039 + t5040 + t5043 + t5072;
  t5400 = Cos(var1[16]);
  t5403 = Sin(var1[16]);
  t5413 = Cos(var1[17]);
  t5414 = -1.*t5413;
  t5415 = 1. + t5414;
  t5421 = Sin(var1[17]);
  t5434 = -1.*var1[17];
  t5435 = 0.226893 + t5434;
  t5436 = Cos(t5435);
  t5437 = -1.*t5436;
  t5439 = 1. + t5437;
  t5443 = Sin(t5435);
  t5460 = -1.*t5413*t5403;
  t5469 = -1.*t5400*t5421;
  t5470 = t5460 + t5469;
  t5481 = t5400*t5413;
  t5482 = -1.*t5403*t5421;
  t5483 = t5481 + t5482;
  t5488 = Cos(var1[21]);
  t5490 = -1.*t5488;
  t5493 = 1. + t5490;
  t5496 = Sin(var1[21]);
  t5501 = t5436*t5470;
  t5502 = -1.*t5443*t5483;
  t5504 = t5501 + t5502;
  t5485 = t5443*t5470;
  t5486 = t5436*t5483;
  t5487 = t5485 + t5486;
  t5419 = -0.049*t5415;
  t5422 = -0.21*t5421;
  t5424 = t5419 + t5422;
  t5427 = -0.21*t5415;
  t5428 = 0.049*t5421;
  t5431 = t5427 + t5428;
  t5472 = 0.01841*t5439;
  t5473 = -0.70544*t5443;
  t5480 = t5472 + t5473;
  t5442 = -0.70544*t5439;
  t5444 = -0.01841*t5443;
  t5454 = t5442 + t5444;
  t5541 = t5413*t5403;
  t5543 = t5400*t5421;
  t5546 = t5541 + t5543;
  t5495 = -0.02159*t5493;
  t5497 = -1.11344*t5496;
  t5498 = t5495 + t5497;
  t5506 = -1.11344*t5493;
  t5507 = 0.02159*t5496;
  t5508 = t5506 + t5507;
  t5554 = t5436*t5546;
  t5555 = t5443*t5483;
  t5561 = t5554 + t5555;
  t5564 = -1.*t5443*t5546;
  t5569 = t5564 + t5486;
  t5512 = t5488*t5504;
  t5513 = -1.*t5487*t5496;
  t5515 = t5512 + t5513;
  t5401 = 0.049*t5400;
  t5405 = -0.09*t5403;
  t5425 = t5400*t5424;
  t5432 = -1.*t5403*t5431;
  t5471 = t5454*t5470;
  t5484 = t5480*t5483;
  t5499 = t5487*t5498;
  t5509 = t5504*t5508;
  t5520 = -1.11344*t5515;
  t5525 = t5488*t5487;
  t5526 = t5504*t5496;
  t5527 = t5525 + t5526;
  t5529 = -0.02159*t5527;
  t5530 = t5401 + t5405 + t5425 + t5432 + t5471 + t5484 + t5499 + t5509 + t5520 + t5529;
  t5534 = 0.09*t5400;
  t5535 = 0.049*t5403;
  t5536 = t5403*t5424;
  t5538 = t5400*t5431;
  t5547 = t5480*t5546;
  t5553 = t5454*t5483;
  t5563 = t5561*t5498;
  t5571 = t5569*t5508;
  t5579 = t5488*t5561;
  t5580 = t5569*t5496;
  t5583 = t5579 + t5580;
  t5586 = -0.02159*t5583;
  t5587 = t5488*t5569;
  t5588 = -1.*t5561*t5496;
  t5590 = t5587 + t5588;
  t5591 = -1.11344*t5590;
  t5592 = t5534 + t5535 + t5536 + t5538 + t5547 + t5553 + t5563 + t5571 + t5586 + t5591;
  t5598 = 0.02159*t5488;
  t5599 = t5598 + t5497;
  t5613 = -1.11344*t5488;
  t5618 = -0.02159*t5496;
  t5619 = t5613 + t5618;
  t5667 = -1.*t5400*t5413;
  t5671 = t5403*t5421;
  t5673 = t5667 + t5671;
  t5683 = t5443*t5673;
  t5687 = t5501 + t5683;
  t5691 = -1.*t5443*t5470;
  t5692 = t5436*t5673;
  t5694 = t5691 + t5692;
  t5532 = Power(t5530,2);
  t5593 = Power(t5592,2);
  t5595 = 0.00002025 + t5532 + t5593;
  t5597 = Power(t5595,-1.5);
  t5651 = 2.*t5530*t5592;
  t5654 = -0.09*t5400;
  t5660 = -0.049*t5403;
  t5662 = -1.*t5403*t5424;
  t5665 = -1.*t5400*t5431;
  t5666 = t5480*t5470;
  t5681 = t5454*t5673;
  t5689 = t5687*t5498;
  t5695 = t5694*t5508;
  t5696 = t5488*t5687;
  t5699 = t5694*t5496;
  t5700 = t5696 + t5699;
  t5702 = -0.02159*t5700;
  t5704 = t5488*t5694;
  t5705 = -1.*t5687*t5496;
  t5706 = t5704 + t5705;
  t5708 = -1.11344*t5706;
  t5710 = t5654 + t5660 + t5662 + t5665 + t5666 + t5681 + t5689 + t5695 + t5702 + t5708;
  t5712 = 2.*t5530*t5710;
  t5715 = t5651 + t5712;
  t5741 = -1.*t5443*t5673;
  t5743 = t5554 + t5741;
  t5736 = t5443*t5546;
  t5737 = t5736 + t5692;
  t5723 = 1/Sqrt(t5595);
  t5611 = t5504*t5599;
  t5620 = t5487*t5619;
  t5622 = -0.02159*t5515;
  t5623 = -1.*t5488*t5487;
  t5624 = -1.*t5504*t5496;
  t5625 = t5623 + t5624;
  t5628 = -1.11344*t5625;
  t5629 = t5611 + t5620 + t5622 + t5628;
  t5632 = t5569*t5599;
  t5636 = t5561*t5619;
  t5637 = -1.*t5488*t5561;
  t5639 = -1.*t5569*t5496;
  t5644 = t5637 + t5639;
  t5645 = -1.11344*t5644;
  t5646 = -0.02159*t5590;
  t5648 = t5632 + t5636 + t5645 + t5646;
  t5837 = t5485 + t5736;
  t5840 = t5501 + t5554;
  t5818 = 0.049*t5413;
  t5819 = t5818 + t5422;
  t5822 = -0.21*t5413;
  t5823 = -0.049*t5421;
  t5825 = t5822 + t5823;
  t5832 = 0.01841*t5436;
  t5833 = 0.70544*t5443;
  t5834 = t5832 + t5833;
  t5829 = 0.70544*t5436;
  t5830 = t5829 + t5444;
  t5881 = t5555 + t5683;
  t5887 = t5486 + t5692;
  t5821 = t5400*t5819;
  t5827 = t5403*t5825;
  t5831 = t5830*t5546;
  t5836 = t5834*t5483;
  t5839 = t5837*t5498;
  t5842 = t5840*t5508;
  t5844 = t5488*t5837;
  t5846 = t5840*t5496;
  t5852 = t5844 + t5846;
  t5855 = -0.02159*t5852;
  t5859 = t5488*t5840;
  t5861 = -1.*t5837*t5496;
  t5865 = t5859 + t5861;
  t5868 = -1.11344*t5865;
  t5869 = t5821 + t5827 + t5471 + t5831 + t5484 + t5836 + t5839 + t5842 + t5855 + t5868;
  t5732 = t5454*t5546;
  t5735 = t5480*t5673;
  t5871 = -1.*t5403*t5819;
  t5874 = t5400*t5825;
  t5877 = t5834*t5470;
  t5879 = t5830*t5483;
  t5882 = t5881*t5498;
  t5888 = t5887*t5508;
  t5891 = t5488*t5881;
  t5892 = t5887*t5496;
  t5893 = t5891 + t5892;
  t5897 = -0.02159*t5893;
  t5898 = t5488*t5887;
  t5901 = -1.*t5881*t5496;
  t5903 = t5898 + t5901;
  t5905 = -1.11344*t5903;
  t5906 = t5871 + t5874 + t5666 + t5877 + t5879 + t5681 + t5882 + t5888 + t5897 + t5905;
  t5728 = -0.049*t5400;
  t5729 = 0.09*t5403;
  t5730 = -1.*t5400*t5424;
  t5731 = t5403*t5431;
  t5933 = -1.*t5504*t5599;
  t5934 = -1.*t5487*t5619;
  t5935 = 0.02159*t5515;
  t5940 = 1.11344*t5625;
  t5941 = t5933 + t5934 + t5935 + t5940;
  t5942 = -1.*t5454*t5470;
  t5944 = -1.*t5480*t5483;
  t5945 = -1.*t5487*t5498;
  t5946 = -1.*t5504*t5508;
  t5947 = 1.11344*t5515;
  t5948 = 0.02159*t5527;
  t5949 = t5728 + t5729 + t5730 + t5731 + t5942 + t5944 + t5945 + t5946 + t5947 + t5948;
  t5950 = Power(t5949,2);
  t5951 = -1.*t5480*t5546;
  t5953 = -1.*t5454*t5483;
  t5954 = -1.*t5561*t5498;
  t5957 = -1.*t5569*t5508;
  t5958 = 0.02159*t5583;
  t5959 = 1.11344*t5590;
  t5960 = t5654 + t5660 + t5662 + t5665 + t5951 + t5953 + t5954 + t5957 + t5958 + t5959;
  t5962 = Power(t5960,2);
  t5963 = t5950 + t5962;
  t5964 = 1/t5963;
  t5796 = -1.*t5488*t5687;
  t5798 = -1.*t5694*t5496;
  t5799 = t5796 + t5798;
  t5974 = -1.*t5569*t5599;
  t5980 = -1.*t5561*t5619;
  t5984 = 1.11344*t5644;
  t5985 = 0.02159*t5590;
  t5987 = t5974 + t5980 + t5984 + t5985;
  t6005 = Power(t5963,-2);
  t6007 = 2.*t5949*t5960;
  t6009 = -1.*t5480*t5470;
  t6011 = -1.*t5454*t5673;
  t6012 = -1.*t5687*t5498;
  t6013 = -1.*t5694*t5508;
  t6014 = 0.02159*t5700;
  t6018 = 1.11344*t5706;
  t6021 = t5534 + t5535 + t5536 + t5538 + t6009 + t6011 + t6012 + t6013 + t6014 + t6018;
  t6022 = 2.*t5949*t6021;
  t6025 = t6007 + t6022;
  t5748 = t5488*t5743;
  t5752 = -1.*t5737*t5496;
  t5756 = t5748 + t5752;
  t5759 = t5488*t5737;
  t5764 = t5743*t5496;
  t5765 = t5759 + t5764;
  t6033 = -1.*t5454*t5546;
  t6034 = -1.*t5480*t5673;
  t5914 = -1.*t5400*t5819;
  t5918 = -1.*t5403*t5825;
  t6062 = -1.*t5837*t5498;
  t6063 = -1.*t5840*t5508;
  t6065 = 0.02159*t5852;
  t6066 = 1.11344*t5865;
  t6092 = t5403*t5819;
  t6093 = -1.*t5400*t5825;
  t6095 = -1.*t5834*t5470;
  t6097 = -1.*t5830*t5483;
  t6098 = -1.*t5881*t5498;
  t6100 = -1.*t5887*t5508;
  t6101 = 0.02159*t5893;
  t6102 = 1.11344*t5903;
  t6103 = t6092 + t6093 + t6009 + t6095 + t6097 + t6011 + t6098 + t6100 + t6101 + t6102;
  t6082 = -1.*t5830*t5546;
  t6085 = -1.*t5834*t5483;
  t6088 = t5914 + t5918 + t5942 + t6082 + t5944 + t6085 + t6062 + t6063 + t6065 + t6066;
  t5631 = 2.*t5629*t5530;
  t5649 = 2.*t5592*t5648;
  t5650 = t5631 + t5649;
  t5870 = 2.*t5869*t5592;
  t5909 = 2.*t5530*t5906;
  t5910 = t5870 + t5909;
  t5912 = 2.*t5869*t5530;
  t5919 = t5830*t5470;
  t5920 = t5834*t5673;
  t5925 = t5914 + t5918 + t5919 + t5732 + t5735 + t5920 + t5839 + t5842 + t5855 + t5868;
  t5927 = 2.*t5925*t5530;
  t5928 = 2.*t5592*t5906;
  t5929 = 2.*t5710*t5906;
  t5930 = t5912 + t5927 + t5928 + t5929;
  t6210 = -1.*t5436*t5470;
  t6211 = -1.*t5436*t5546;
  t6213 = t6210 + t6211 + t5555 + t5683;
  t6218 = t5485 + t5736 + t5486 + t5692;
  t6191 = -0.049*t5413;
  t6193 = 0.21*t5421;
  t6194 = t6191 + t6193;
  t6200 = -0.70544*t5436;
  t6203 = 0.01841*t5443;
  t6204 = t6200 + t6203;
  t6256 = t5501 + t5554 + t5555 + t5683;
  t6246 = -1.*t5436*t5483;
  t6247 = -1.*t5436*t5673;
  t6248 = t5485 + t5736 + t6246 + t6247;
  t6143 = -1.*t5488*t5837;
  t6145 = -1.*t5840*t5496;
  t6148 = t6143 + t6145;
  t6165 = -1.*t5488*t5881;
  t6166 = -1.*t5887*t5496;
  t6167 = t6165 + t6166;
  t6305 = 2.*t6088*t5960;
  t6308 = 2.*t5949*t6103;
  t6310 = t6305 + t6308;
  t6060 = -1.*t5830*t5470;
  t6061 = -1.*t5834*t5673;
  t6076 = t5821 + t5827 + t6060 + t6033 + t6034 + t6061 + t6062 + t6063 + t6065 + t6066;
  t6079 = t6076*t5960*t5964;
  t6106 = t5530*t6103*t5964;
  t6220 = t5488*t6213;
  t6224 = t6218*t5496;
  t6227 = t6220 + t6224;
  t6229 = t5488*t6218;
  t6233 = -1.*t6213*t5496;
  t6235 = t6229 + t6233;
  t6259 = t5488*t6256;
  t6260 = -1.*t6248*t5496;
  t6261 = t6259 + t6260;
  t6263 = t5488*t6248;
  t6264 = t6256*t5496;
  t6266 = t6263 + t6264;
  t6394 = -0.02159*t5488;
  t6395 = 1.11344*t5496;
  t6397 = t6394 + t6395;
  t5783 = 2.*t5629*t5592;
  t5784 = 2.*t5530*t5648;
  t5785 = 2.*t5629*t5710;
  t5788 = t5694*t5599;
  t5790 = t5687*t5619;
  t5800 = -1.11344*t5799;
  t5801 = -0.02159*t5706;
  t5808 = t5788 + t5790 + t5800 + t5801;
  t5809 = 2.*t5530*t5808;
  t5814 = t5783 + t5784 + t5785 + t5809;
  t6138 = t5840*t5599;
  t6141 = t5837*t5619;
  t6154 = -1.11344*t6148;
  t6155 = -0.02159*t5865;
  t6156 = t6138 + t6141 + t6154 + t6155;
  t6158 = 2.*t6156*t5592;
  t6159 = 2.*t5869*t5648;
  t6160 = 2.*t5629*t5906;
  t6163 = t5887*t5599;
  t6164 = t5881*t5619;
  t6171 = -1.11344*t6167;
  t6172 = -0.02159*t5903;
  t6174 = t6163 + t6164 + t6171 + t6172;
  t6176 = 2.*t5530*t6174;
  t6177 = t6158 + t6159 + t6160 + t6176;
  t6444 = 2.*t5941*t5949;
  t6447 = 2.*t5987*t5960;
  t6448 = t6444 + t6447;
  t6399 = -1.*t5488*t5504;
  t6400 = t5487*t5496;
  t6401 = t6399 + t6400;
  t6420 = -1.*t5488*t5569;
  t6422 = t5561*t5496;
  t6425 = t6420 + t6422;
  t5970 = t5941*t5530*t5964;
  t5992 = -1.*t5694*t5599;
  t5993 = -1.*t5687*t5619;
  t5994 = 1.11344*t5799;
  t5995 = 0.02159*t5706;
  t6000 = t5992 + t5993 + t5994 + t5995;
  t6004 = t5960*t6000*t5964;
  t6276 = -1.*t5840*t5599;
  t6278 = -1.*t5837*t5619;
  t6279 = 1.11344*t6148;
  t6281 = 0.02159*t5865;
  t6282 = t6276 + t6278 + t6279 + t6281;
  t6284 = t6282*t5530*t5964;
  t6293 = -1.*t5887*t5599;
  t6294 = -1.*t5881*t5619;
  t6296 = 1.11344*t6167;
  t6297 = 0.02159*t5903;
  t6302 = t6293 + t6294 + t6296 + t6297;
  t6303 = t5960*t6302*t5964;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0;
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=-0.25*t3000*Power(t3970,2)*var2[8] + 0.5*t4009*(2.*t2280 + 2.*t2974*t3935 + 2.*Power(t3935,2) + 2.*t2254*(-0.049*t36 + t4054 + t4064 + t1667*t4079 + t1884*t4194 - 1.11344*(-1.*t1609*t4079 + t1593*t4194) - 0.02159*(t1593*t4079 + t1609*t4194) - 1.*t36*t523 + 0.09*t586 + t586*t699))*var2[8] - 0.25*t3000*t3970*t4936*var2[9] + 0.5*t4009*t4955*var2[9] - 0.25*t3000*t3619*t3970*var2[13] + 0.5*t4009*t4524*var2[13];
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=-0.25*t3000*t3970*t4936*var2[8] + 0.5*t4009*t4955*var2[8] - 0.25*t3000*Power(t4936,2)*var2[9] + 0.5*t4009*(2.*Power(t4850,2) + 2.*Power(t4934,2) + 2.*t2254*(t4054 + t4064 + 2.*t1228*t4649 + 2.*t3762*t4707 + t4731 + t4943 + t36*t5086 + t1228*t5128 + t1667*t5240 + t1884*t5244 - 1.11344*(-1.*t1609*t5240 + t1593*t5244) - 0.02159*(t1593*t5240 + t1609*t5244)) + 2.*t2974*(t3730 + t3764 + 2.*t1522*t4649 + 2.*t1228*t4707 + t2552*t4707 + t4854 + t1522*t5128 + t1884*t5133 + t1667*t5157 - 0.02159*(t1609*t5133 + t1593*t5157) - 1.11344*(t1593*t5133 - 1.*t1609*t5157) + t5086*t586))*var2[9] - 0.25*t3000*t3619*t4936*var2[13] + 0.5*t4009*t5073*var2[13];
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=0;
  p_output1[109]=0;
  p_output1[110]=0;
  p_output1[111]=0;
  p_output1[112]=0;
  p_output1[113]=0;
  p_output1[114]=0;
  p_output1[115]=0;
  p_output1[116]=0;
  p_output1[117]=0;
  p_output1[118]=0;
  p_output1[119]=0;
  p_output1[120]=-0.25*t3000*t3619*t3970*var2[8] + 0.5*t4009*t4524*var2[8] - 0.25*t3000*t3619*t4936*var2[9] + 0.5*t4009*t5073*var2[9] - 0.25*t3000*Power(t3619,2)*var2[13] + 0.5*t4009*(2.*Power(t3360,2) + 2.*Power(t3563,2) + 2.*t2254*(-1.11344*(t1609*t1711 - 1.*t1593*t1911) + t1911*t3030 - 0.02159*t3317 + t1711*t5314) + 2.*t2974*(-1.11344*(-1.*t1593*t2595 + t1609*t2733) + t2595*t3030 - 0.02159*t3511 + t2733*t5314))*var2[13];
  p_output1[121]=0;
  p_output1[122]=0;
  p_output1[123]=0;
  p_output1[124]=0;
  p_output1[125]=0;
  p_output1[126]=0;
  p_output1[127]=0;
  p_output1[128]=0;
  p_output1[129]=0;
  p_output1[130]=0;
  p_output1[131]=0;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=0;
  p_output1[136]=0;
  p_output1[137]=0;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=0;
  p_output1[142]=0;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=-0.25*t5597*Power(t5715,2)*var2[16] + 0.5*t5723*(2.*t5532 + 2.*t5592*t5710 + 2.*Power(t5710,2) + 2.*t5530*(t5728 + t5729 + t5730 + t5731 + t5732 + t5735 + t5498*t5737 + t5508*t5743 - 1.11344*t5756 - 0.02159*t5765))*var2[16] - 0.25*t5597*t5715*t5910*var2[17] + 0.5*t5723*t5930*var2[17] - 0.25*t5597*t5650*t5715*var2[21] + 0.5*t5723*t5814*var2[21];
  p_output1[149]=(t5710*t5949*t5964 + t5530*t5964*t6021 + t5949*t5964*t6021 - 1.*t5530*t5949*t6005*t6025 - 1.*t5960*t6005*t6021*t6025 + t5960*t5964*(t5401 + t5405 + t5425 + t5432 - 1.*t5498*t5737 - 1.*t5508*t5743 + 1.11344*t5756 + 0.02159*t5765 + t6033 + t6034))*var2[16] + (t6079 + t5710*t5964*t6088 - 1.*t5530*t6005*t6025*t6088 + t5949*t5964*t6103 - 1.*t5960*t6005*t6025*t6103 + t6106)*var2[17] + (t5941*t5949*t5964 + t5970 + t5710*t5964*t5987 + t6004 - 1.*t5941*t5960*t6005*t6025 - 1.*t5530*t5987*t6005*t6025)*var2[21];
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=-0.25*t5597*t5715*t5910*var2[16] + 0.5*t5723*t5930*var2[16] - 0.25*t5597*Power(t5910,2)*var2[17] + 0.5*t5723*(2.*Power(t5869,2) + 2.*Power(t5906,2) + 2.*t5592*(t5666 + t5681 + 2.*t5483*t5830 + 2.*t5470*t5834 + t5546*t5834 + t5874 + t5403*t6194 + t5483*t6204 + t5498*t6213 + t5508*t6218 - 0.02159*t6227 - 1.11344*t6235) + 2.*t5530*(t5732 + t5735 + 2.*t5470*t5830 + 2.*t5673*t5834 + t5836 + t5918 + t5400*t6194 + t5470*t6204 + t5498*t6248 + t5508*t6256 - 1.11344*t6261 - 0.02159*t6266))*var2[17] - 0.25*t5597*t5650*t5910*var2[21] + 0.5*t5723*t6177*var2[21];
  p_output1[158]=(t5906*t5949*t5964 + t6079 + t5964*t6021*t6088 + t6106 - 1.*t5530*t5949*t6005*t6310 - 1.*t5960*t6005*t6021*t6310)*var2[16] + (t5906*t5964*t6088 + t5964*t6088*t6103 + t5530*t5964*(-2.*t5483*t5830 - 2.*t5470*t5834 - 1.*t5546*t5834 + t6009 + t6011 + t6093 - 1.*t5403*t6194 - 1.*t5483*t6204 - 1.*t5498*t6213 - 1.*t5508*t6218 + 0.02159*t6227 + 1.11344*t6235) + t5960*t5964*(t5827 - 2.*t5470*t5830 - 2.*t5673*t5834 + t6033 + t6034 + t6085 - 1.*t5400*t6194 - 1.*t5470*t6204 - 1.*t5498*t6248 - 1.*t5508*t6256 + 1.11344*t6261 + 0.02159*t6266) - 1.*t5530*t6005*t6088*t6310 - 1.*t5960*t6005*t6103*t6310)*var2[17] + (t5906*t5964*t5987 + t5941*t5964*t6088 + t6284 + t6303 - 1.*t5941*t5960*t6005*t6310 - 1.*t5530*t5987*t6005*t6310)*var2[21];
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
  p_output1[180]=0;
  p_output1[181]=0;
  p_output1[182]=0;
  p_output1[183]=0;
  p_output1[184]=0;
  p_output1[185]=0;
  p_output1[186]=0;
  p_output1[187]=0;
  p_output1[188]=0;
  p_output1[189]=0;
  p_output1[190]=0;
  p_output1[191]=0;
  p_output1[192]=0;
  p_output1[193]=-0.25*t5597*t5650*t5715*var2[16] + 0.5*t5723*t5814*var2[16] - 0.25*t5597*t5650*t5910*var2[17] + 0.5*t5723*t6177*var2[17] - 0.25*t5597*Power(t5650,2)*var2[21] + 0.5*t5723*(2.*Power(t5629,2) + 2.*Power(t5648,2) + 2.*t5530*(t5504*t5619 - 0.02159*t5625 + t5487*t6397 - 1.11344*t6401) + 2.*t5592*(t5569*t5619 - 0.02159*t5644 + t5561*t6397 - 1.11344*t6425))*var2[21];
  p_output1[194]=(t5629*t5949*t5964 + t5970 + t6004 + t5964*t5987*t6021 - 1.*t5530*t5949*t6005*t6448 - 1.*t5960*t6005*t6021*t6448)*var2[16] + (t5629*t5964*t6088 + t5964*t5987*t6103 + t6284 + t6303 - 1.*t5530*t6005*t6088*t6448 - 1.*t5960*t6005*t6103*t6448)*var2[17] + (t5629*t5964*t5987 + t5941*t5964*t5987 + t5960*t5964*(-1.*t5504*t5619 + 0.02159*t5625 - 1.*t5487*t6397 + 1.11344*t6401) + t5530*t5964*(-1.*t5569*t5619 + 0.02159*t5644 - 1.*t5561*t6397 + 1.11344*t6425) - 1.*t5941*t5960*t6005*t6448 - 1.*t5530*t5987*t6005*t6448)*var2[21];
  p_output1[195]=0;
  p_output1[196]=0;
  p_output1[197]=0;
  p_output1[198]=0;
  p_output1[199]=0;
  p_output1[200]=0;
  p_output1[201]=0;
  p_output1[202]=0;
  p_output1[203]=0;
  p_output1[204]=0;
  p_output1[205]=0;
  p_output1[206]=0;
  p_output1[207]=0;
  p_output1[208]=0;
  p_output1[209]=0;
  p_output1[210]=0;
  p_output1[211]=0;
  p_output1[212]=0;
  p_output1[213]=0;
  p_output1[214]=0;
  p_output1[215]=0;
  p_output1[216]=0;
  p_output1[217]=0;
  p_output1[218]=0;
  p_output1[219]=0;
  p_output1[220]=0;
  p_output1[221]=0;
  p_output1[222]=0;
  p_output1[223]=0;
  p_output1[224]=0;
  p_output1[225]=1.;
  p_output1[226]=0;
  p_output1[227]=0;
  p_output1[228]=0;
  p_output1[229]=0;
  p_output1[230]=0;
  p_output1[231]=0;
  p_output1[232]=0;
  p_output1[233]=0;
  p_output1[234]=0;
  p_output1[235]=1.;
  p_output1[236]=0;
  p_output1[237]=0;
  p_output1[238]=0;
  p_output1[239]=0;
  p_output1[240]=0;
  p_output1[241]=0;
  p_output1[242]=0;
  p_output1[243]=0;
  p_output1[244]=0;
  p_output1[245]=0;
  p_output1[246]=0;
  p_output1[247]=0;
  p_output1[248]=0;
  p_output1[249]=0;
  p_output1[250]=0;
  p_output1[251]=0;
  p_output1[252]=0;
  p_output1[253]=0;
  p_output1[254]=0;
  p_output1[255]=0;
  p_output1[256]=0;
  p_output1[257]=0;
  p_output1[258]=0;
  p_output1[259]=0;
  p_output1[260]=0;
  p_output1[261]=0;
  p_output1[262]=0;
  p_output1[263]=1.;
  p_output1[264]=0;
  p_output1[265]=0;
  p_output1[266]=0;
  p_output1[267]=0;
  p_output1[268]=0;
  p_output1[269]=0;
  p_output1[270]=0;
  p_output1[271]=0;
  p_output1[272]=0;
  p_output1[273]=0.5*t3970*t4009;
  p_output1[274]=0;
  p_output1[275]=0;
  p_output1[276]=0;
  p_output1[277]=0;
  p_output1[278]=0;
  p_output1[279]=0;
  p_output1[280]=0;
  p_output1[281]=0;
  p_output1[282]=0.5*t4009*t4936;
  p_output1[283]=0;
  p_output1[284]=0;
  p_output1[285]=0;
  p_output1[286]=0;
  p_output1[287]=0;
  p_output1[288]=0;
  p_output1[289]=0;
  p_output1[290]=0;
  p_output1[291]=0;
  p_output1[292]=0;
  p_output1[293]=0;
  p_output1[294]=0;
  p_output1[295]=0;
  p_output1[296]=0;
  p_output1[297]=0;
  p_output1[298]=0;
  p_output1[299]=0;
  p_output1[300]=0;
  p_output1[301]=0;
  p_output1[302]=0;
  p_output1[303]=0;
  p_output1[304]=0;
  p_output1[305]=0;
  p_output1[306]=0;
  p_output1[307]=0;
  p_output1[308]=0;
  p_output1[309]=0;
  p_output1[310]=0;
  p_output1[311]=0;
  p_output1[312]=0;
  p_output1[313]=0;
  p_output1[314]=0;
  p_output1[315]=0;
  p_output1[316]=0;
  p_output1[317]=0;
  p_output1[318]=0.5*t3619*t4009;
  p_output1[319]=0;
  p_output1[320]=0;
  p_output1[321]=0;
  p_output1[322]=0;
  p_output1[323]=0;
  p_output1[324]=0;
  p_output1[325]=0;
  p_output1[326]=0;
  p_output1[327]=0;
  p_output1[328]=0;
  p_output1[329]=0;
  p_output1[330]=1.;
  p_output1[331]=0;
  p_output1[332]=0;
  p_output1[333]=0;
  p_output1[334]=0;
  p_output1[335]=0;
  p_output1[336]=0;
  p_output1[337]=0;
  p_output1[338]=0;
  p_output1[339]=0;
  p_output1[340]=1.;
  p_output1[341]=0;
  p_output1[342]=0;
  p_output1[343]=0;
  p_output1[344]=0;
  p_output1[345]=0;
  p_output1[346]=0.5*t5715*t5723;
  p_output1[347]=t5530*t5949*t5964 + t5960*t5964*t6021;
  p_output1[348]=0;
  p_output1[349]=0;
  p_output1[350]=0;
  p_output1[351]=0;
  p_output1[352]=0;
  p_output1[353]=0;
  p_output1[354]=0;
  p_output1[355]=0.5*t5723*t5910;
  p_output1[356]=t5530*t5964*t6088 + t5960*t5964*t6103;
  p_output1[357]=0;
  p_output1[358]=0;
  p_output1[359]=0;
  p_output1[360]=0;
  p_output1[361]=0;
  p_output1[362]=0;
  p_output1[363]=0;
  p_output1[364]=0;
  p_output1[365]=0;
  p_output1[366]=0;
  p_output1[367]=0;
  p_output1[368]=0;
  p_output1[369]=0;
  p_output1[370]=0;
  p_output1[371]=0;
  p_output1[372]=0;
  p_output1[373]=0;
  p_output1[374]=0;
  p_output1[375]=0;
  p_output1[376]=0;
  p_output1[377]=0;
  p_output1[378]=0;
  p_output1[379]=0;
  p_output1[380]=0;
  p_output1[381]=0;
  p_output1[382]=0;
  p_output1[383]=0;
  p_output1[384]=0;
  p_output1[385]=0;
  p_output1[386]=0;
  p_output1[387]=0;
  p_output1[388]=0;
  p_output1[389]=0;
  p_output1[390]=0;
  p_output1[391]=0.5*t5650*t5723;
  p_output1[392]=t5941*t5960*t5964 + t5530*t5964*t5987;
  p_output1[393]=0;
  p_output1[394]=0;
  p_output1[395]=-1.;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 44, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void DLfya_LeftStanceActual_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




