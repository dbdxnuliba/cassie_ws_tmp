/*
 * Automatically Generated from Mathematica.
 * Sun 7 Nov 2021 14:27:52 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "dyaRightStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t43;
  double t64;
  double t93;
  double t100;
  double t101;
  double t162;
  double t330;
  double t335;
  double t364;
  double t448;
  double t468;
  double t497;
  double t537;
  double t565;
  double t571;
  double t672;
  double t728;
  double t741;
  double t753;
  double t765;
  double t770;
  double t782;
  double t794;
  double t797;
  double t809;
  double t744;
  double t748;
  double t749;
  double t109;
  double t164;
  double t214;
  double t284;
  double t286;
  double t313;
  double t577;
  double t614;
  double t633;
  double t495;
  double t502;
  double t536;
  double t1094;
  double t1095;
  double t1123;
  double t775;
  double t784;
  double t790;
  double t813;
  double t817;
  double t822;
  double t1147;
  double t1152;
  double t1153;
  double t1179;
  double t1198;
  double t841;
  double t844;
  double t849;
  double t51;
  double t86;
  double t278;
  double t322;
  double t575;
  double t743;
  double t792;
  double t839;
  double t854;
  double t859;
  double t863;
  double t864;
  double t868;
  double t876;
  double t973;
  double t1016;
  double t1054;
  double t1084;
  double t1129;
  double t1133;
  double t1174;
  double t1207;
  double t1210;
  double t1218;
  double t1231;
  double t1241;
  double t1243;
  double t1250;
  double t1260;
  double t1344;
  double t1359;
  double t1379;
  double t1395;
  double t1406;
  double t1412;
  double t1413;
  double t906;
  double t1360;
  double t1372;
  double t1378;
  double t1841;
  double t1842;
  double t1845;
  double t1863;
  double t1869;
  double t1976;
  double t2032;
  double t2042;
  double t2275;
  double t2299;
  double t2327;
  double t2142;
  double t2146;
  double t2168;
  double t2177;
  double t2188;
  double t1821;
  double t2233;
  double t2236;
  double t2258;
  double t2221;
  double t2225;
  double t1852;
  double t2476;
  double t2503;
  double t2634;
  double t2638;
  double t2646;
  double t2647;
  double t2676;
  double t2724;
  double t2764;
  double t2776;
  double t2788;
  double t2797;
  double t2799;
  double t2801;
  double t2804;
  double t2807;
  double t2808;
  double t2974;
  double t2987;
  double t3087;
  double t3103;
  double t3154;
  double t3162;
  double t3199;
  double t3248;
  double t3249;
  double t3254;
  double t3300;
  double t3303;
  double t3309;
  double t2732;
  double t2738;
  double t2741;
  double t2653;
  double t2681;
  double t2684;
  double t2815;
  double t2816;
  double t2827;
  double t2800;
  double t2802;
  double t2803;
  double t3266;
  double t3270;
  double t3287;
  double t3413;
  double t3414;
  double t3417;
  double t3192;
  double t3204;
  double t3210;
  double t3477;
  double t3487;
  double t3506;
  double t3513;
  double t3518;
  double t3325;
  double t3326;
  double t3353;
  double t2636;
  double t2695;
  double t2726;
  double t2745;
  double t2809;
  double t3100;
  double t3257;
  double t3310;
  double t3368;
  double t3372;
  double t3377;
  double t3381;
  double t3383;
  double t3386;
  double t3388;
  double t3407;
  double t3410;
  double t3412;
  double t3418;
  double t3428;
  double t3492;
  double t3520;
  double t3527;
  double t3532;
  double t3542;
  double t3543;
  double t3547;
  double t3550;
  double t3551;
  double t3565;
  double t3577;
  double t3625;
  double t3644;
  double t3597;
  double t3598;
  double t3599;
  double t3387;
  double t3579;
  double t3589;
  double t3592;
  double t3753;
  double t3754;
  double t3758;
  double t3774;
  double t3776;
  double t3794;
  double t3839;
  double t3840;
  double t3963;
  double t3975;
  double t3982;
  double t3921;
  double t3924;
  double t3925;
  double t3912;
  double t3913;
  double t3747;
  double t3938;
  double t3939;
  double t3940;
  double t3930;
  double t3931;
  double t3770;
  double t4047;
  double t4069;
  double t3688;
  double t3691;
  double t3697;
  double t3737;
  double t3739;
  double t3742;
  double t3743;
  double t3656;
  double t3665;
  double t3666;
  double t4343;
  double t4344;
  double t4346;
  double t4351;
  double t4367;
  double t4372;
  double t4374;
  double t4238;
  double t4251;
  double t4254;
  double t4259;
  double t4272;
  double t4278;
  double t4279;
  double t4280;
  double t4282;
  double t4302;
  double t4304;
  double t4307;
  double t4377;
  double t4383;
  double t4393;
  double t3849;
  double t3850;
  double t3851;
  double t3862;
  double t3865;
  double t3874;
  double t3993;
  double t3997;
  double t4000;
  double t4010;
  double t4011;
  double t4014;
  double t4439;
  double t4449;
  double t4104;
  double t4114;
  double t4120;
  double t4127;
  double t4134;
  double t4143;
  double t4650;
  double t4690;
  double t4624;
  double t4637;
  double t4641;
  double t4657;
  double t4675;
  double t4680;
  double t4685;
  double t4688;
  double t4702;
  double t4705;
  double t4713;
  double t4727;
  double t4741;
  double t4711;
  double t4745;
  double t4752;
  double t4770;
  double t4778;
  double t4779;
  double t4757;
  double t4782;
  double t4800;
  double t4802;
  double t4808;
  double t4812;
  double t4830;
  double t4835;
  double t4855;
  double t4866;
  double t4886;
  double t4887;
  double t4856;
  double t4891;
  double t4894;
  double t4898;
  double t4905;
  double t4909;
  double t4993;
  double t4999;
  double t5000;
  double t5008;
  double t5011;
  double t5012;
  double t5007;
  double t5013;
  double t5016;
  double t5018;
  double t5020;
  double t5022;
  double t5017;
  double t5023;
  double t5027;
  double t5031;
  double t5033;
  double t5045;
  double t5105;
  double t5107;
  double t5113;
  double t5120;
  double t5134;
  double t5146;
  double t5154;
  double t5166;
  double t5171;
  double t5150;
  double t5181;
  double t5184;
  double t5194;
  double t5195;
  double t5197;
  double t5223;
  double t5227;
  double t5232;
  double t5233;
  double t5242;
  double t5252;
  double t5284;
  double t5291;
  double t5299;
  double t5276;
  double t5300;
  double t5302;
  double t5314;
  double t5317;
  double t5321;
  double t5313;
  double t5326;
  double t5329;
  double t5338;
  double t5340;
  double t5344;
  double t5029;
  double t5048;
  double t5049;
  double t5054;
  double t5056;
  double t5063;
  double t5071;
  double t5076;
  double t5088;
  double t5337;
  double t5345;
  double t5348;
  double t5354;
  double t5355;
  double t5364;
  double t5369;
  double t5371;
  double t5376;
  double t5382;
  double t4801;
  double t4813;
  double t4816;
  double t4819;
  double t4820;
  double t4823;
  double t5395;
  double t5442;
  double t5445;
  double t5449;
  double t5450;
  double t5451;
  double t5453;
  double t5456;
  double t5457;
  double t5458;
  double t5454;
  double t5463;
  double t5468;
  double t5473;
  double t5475;
  double t5477;
  double t5398;
  double t5410;
  double t5417;
  double t5423;
  double t5427;
  double t5428;
  double t5430;
  double t4818;
  double t4827;
  double t4829;
  double t5500;
  double t5505;
  double t5514;
  double t5524;
  double t5532;
  double t5536;
  double t5518;
  double t5538;
  double t5541;
  double t5554;
  double t5555;
  double t5556;
  double t5547;
  double t5561;
  double t5566;
  double t5571;
  double t5572;
  double t5576;
  double t5599;
  double t5600;
  double t5604;
  double t5609;
  double t5612;
  double t5613;
  double t5606;
  double t5619;
  double t5620;
  double t5625;
  double t5629;
  double t5630;
  double t5623;
  double t5631;
  double t5635;
  double t5639;
  double t5641;
  double t5642;
  double t5407;
  double t5673;
  double t5674;
  double t5678;
  double t5688;
  double t5690;
  double t5692;
  double t5679;
  double t5694;
  double t5699;
  double t5704;
  double t5705;
  double t5707;
  double t5702;
  double t5708;
  double t5713;
  double t5716;
  double t5718;
  double t5719;
  double t5492;
  double t5742;
  double t5743;
  double t5746;
  double t5748;
  double t5750;
  double t5752;
  double t5755;
  double t5759;
  double t5751;
  double t5764;
  double t5766;
  double t5772;
  double t5774;
  double t5775;
  double t5802;
  double t5803;
  double t5808;
  double t5809;
  double t5812;
  double t5814;
  double t5815;
  double t5817;
  double t5813;
  double t5818;
  double t5820;
  double t5822;
  double t5823;
  double t5824;
  double t5846;
  double t5848;
  double t5852;
  double t5855;
  double t5856;
  double t5859;
  double t5860;
  double t5861;
  double t5858;
  double t5865;
  double t5866;
  double t5869;
  double t5871;
  double t5876;
  double t5965;
  double t5968;
  double t5969;
  double t5970;
  double t5972;
  double t5976;
  double t5982;
  double t5985;
  double t5974;
  double t5987;
  double t5989;
  double t5993;
  double t5995;
  double t5998;
  double t5992;
  double t6000;
  double t6002;
  double t6007;
  double t6008;
  double t6010;
  double t6035;
  double t6038;
  double t6041;
  double t6042;
  double t6045;
  double t6046;
  double t6054;
  double t6071;
  double t6082;
  double t6085;
  double t6087;
  double t6090;
  double t6092;
  double t6094;
  double t6111;
  double t6115;
  double t6116;
  double t6117;
  double t6123;
  double t6126;
  double t6127;
  t43 = Cos(var1[16]);
  t64 = Sin(var1[16]);
  t93 = Cos(var1[17]);
  t100 = -1.*t93;
  t101 = 1. + t100;
  t162 = Sin(var1[17]);
  t330 = -1.*var1[17];
  t335 = 0.226893 + t330;
  t364 = Cos(t335);
  t448 = -1.*t364;
  t468 = 1. + t448;
  t497 = Sin(t335);
  t537 = -1.*t93*t64;
  t565 = -1.*t43*t162;
  t571 = t537 + t565;
  t672 = t43*t93;
  t728 = -1.*t64*t162;
  t741 = t672 + t728;
  t753 = Cos(var1[21]);
  t765 = -1.*t753;
  t770 = 1. + t765;
  t782 = Sin(var1[21]);
  t794 = t364*t571;
  t797 = -1.*t497*t741;
  t809 = t794 + t797;
  t744 = t497*t571;
  t748 = t364*t741;
  t749 = t744 + t748;
  t109 = -0.049*t101;
  t164 = -0.21*t162;
  t214 = t109 + t164;
  t284 = -0.21*t101;
  t286 = 0.049*t162;
  t313 = t284 + t286;
  t577 = 0.01841*t468;
  t614 = -0.70544*t497;
  t633 = t577 + t614;
  t495 = -0.70544*t468;
  t502 = -0.01841*t497;
  t536 = t495 + t502;
  t1094 = t93*t64;
  t1095 = t43*t162;
  t1123 = t1094 + t1095;
  t775 = -0.02159*t770;
  t784 = -1.11344*t782;
  t790 = t775 + t784;
  t813 = -1.11344*t770;
  t817 = 0.02159*t782;
  t822 = t813 + t817;
  t1147 = t364*t1123;
  t1152 = t497*t741;
  t1153 = t1147 + t1152;
  t1179 = -1.*t497*t1123;
  t1198 = t1179 + t748;
  t841 = t753*t809;
  t844 = -1.*t749*t782;
  t849 = t841 + t844;
  t51 = 0.049*t43;
  t86 = -0.09*t64;
  t278 = t43*t214;
  t322 = -1.*t64*t313;
  t575 = t536*t571;
  t743 = t633*t741;
  t792 = t749*t790;
  t839 = t809*t822;
  t854 = -1.11344*t849;
  t859 = t753*t749;
  t863 = t809*t782;
  t864 = t859 + t863;
  t868 = -0.02159*t864;
  t876 = t51 + t86 + t278 + t322 + t575 + t743 + t792 + t839 + t854 + t868;
  t973 = 0.09*t43;
  t1016 = 0.049*t64;
  t1054 = t64*t214;
  t1084 = t43*t313;
  t1129 = t633*t1123;
  t1133 = t536*t741;
  t1174 = t1153*t790;
  t1207 = t1198*t822;
  t1210 = t753*t1153;
  t1218 = t1198*t782;
  t1231 = t1210 + t1218;
  t1241 = -0.02159*t1231;
  t1243 = t753*t1198;
  t1250 = -1.*t1153*t782;
  t1260 = t1243 + t1250;
  t1344 = -1.11344*t1260;
  t1359 = t973 + t1016 + t1054 + t1084 + t1129 + t1133 + t1174 + t1207 + t1241 + t1344;
  t1379 = 0.02159*t753;
  t1395 = t1379 + t784;
  t1406 = -1.11344*t753;
  t1412 = -0.02159*t782;
  t1413 = t1406 + t1412;
  t906 = Power(t876,2);
  t1360 = Power(t1359,2);
  t1372 = 0.00002025 + t906 + t1360;
  t1378 = 1/Sqrt(t1372);
  t1841 = -1.*t43*t93;
  t1842 = t64*t162;
  t1845 = t1841 + t1842;
  t1863 = t497*t1845;
  t1869 = t794 + t1863;
  t1976 = -1.*t497*t571;
  t2032 = t364*t1845;
  t2042 = t1976 + t2032;
  t2275 = t497*t1123;
  t2299 = t744 + t2275;
  t2327 = t794 + t1147;
  t2142 = 0.049*t93;
  t2146 = t2142 + t164;
  t2168 = -0.21*t93;
  t2177 = -0.049*t162;
  t2188 = t2168 + t2177;
  t1821 = t633*t571;
  t2233 = 0.01841*t364;
  t2236 = 0.70544*t497;
  t2258 = t2233 + t2236;
  t2221 = 0.70544*t364;
  t2225 = t2221 + t502;
  t1852 = t536*t1845;
  t2476 = t1152 + t1863;
  t2503 = t748 + t2032;
  t2634 = Cos(var1[8]);
  t2638 = Cos(var1[9]);
  t2646 = -1.*t2638;
  t2647 = 1. + t2646;
  t2676 = Sin(var1[9]);
  t2724 = Sin(var1[8]);
  t2764 = -1.*var1[9];
  t2776 = 0.226893 + t2764;
  t2788 = Cos(t2776);
  t2797 = -1.*t2788;
  t2799 = 1. + t2797;
  t2801 = Sin(t2776);
  t2804 = -1.*t2634*t2676;
  t2807 = -1.*t2638*t2724;
  t2808 = t2804 + t2807;
  t2974 = t2638*t2634;
  t2987 = -1.*t2676*t2724;
  t3087 = t2974 + t2987;
  t3103 = Cos(var1[13]);
  t3154 = -1.*t3103;
  t3162 = 1. + t3154;
  t3199 = Sin(var1[13]);
  t3248 = t2801*t2808;
  t3249 = t2788*t3087;
  t3254 = t3248 + t3249;
  t3300 = t2788*t2808;
  t3303 = -1.*t2801*t3087;
  t3309 = t3300 + t3303;
  t2732 = -0.21*t2647;
  t2738 = 0.049*t2676;
  t2741 = t2732 + t2738;
  t2653 = -0.049*t2647;
  t2681 = -0.21*t2676;
  t2684 = t2653 + t2681;
  t2815 = 0.01841*t2799;
  t2816 = -0.70544*t2801;
  t2827 = t2815 + t2816;
  t2800 = -0.70544*t2799;
  t2802 = -0.01841*t2801;
  t2803 = t2800 + t2802;
  t3266 = -1.11344*t3162;
  t3270 = 0.02159*t3199;
  t3287 = t3266 + t3270;
  t3413 = t2634*t2676;
  t3414 = t2638*t2724;
  t3417 = t3413 + t3414;
  t3192 = -0.02159*t3162;
  t3204 = -1.11344*t3199;
  t3210 = t3192 + t3204;
  t3477 = -1.*t2801*t3417;
  t3487 = t3477 + t3249;
  t3506 = t2788*t3417;
  t3513 = t2801*t3087;
  t3518 = t3506 + t3513;
  t3325 = -1.*t3199*t3254;
  t3326 = t3103*t3309;
  t3353 = t3325 + t3326;
  t2636 = 0.049*t2634;
  t2695 = t2634*t2684;
  t2726 = -0.09*t2724;
  t2745 = -1.*t2741*t2724;
  t2809 = t2803*t2808;
  t3100 = t2827*t3087;
  t3257 = t3210*t3254;
  t3310 = t3287*t3309;
  t3368 = -1.11344*t3353;
  t3372 = t3103*t3254;
  t3377 = t3199*t3309;
  t3381 = t3372 + t3377;
  t3383 = -0.02159*t3381;
  t3386 = t2636 + t2695 + t2726 + t2745 + t2809 + t3100 + t3257 + t3310 + t3368 + t3383;
  t3388 = 0.09*t2634;
  t3407 = t2634*t2741;
  t3410 = 0.049*t2724;
  t3412 = t2684*t2724;
  t3418 = t2827*t3417;
  t3428 = t2803*t3087;
  t3492 = t3287*t3487;
  t3520 = t3210*t3518;
  t3527 = t3199*t3487;
  t3532 = t3103*t3518;
  t3542 = t3527 + t3532;
  t3543 = -0.02159*t3542;
  t3547 = t3103*t3487;
  t3550 = -1.*t3199*t3518;
  t3551 = t3547 + t3550;
  t3565 = -1.11344*t3551;
  t3577 = t3388 + t3407 + t3410 + t3412 + t3418 + t3428 + t3492 + t3520 + t3543 + t3565;
  t3625 = 0.02159*t3103;
  t3644 = t3625 + t3204;
  t3597 = -1.11344*t3103;
  t3598 = -0.02159*t3199;
  t3599 = t3597 + t3598;
  t3387 = Power(t3386,2);
  t3579 = Power(t3577,2);
  t3589 = 0.00002025 + t3387 + t3579;
  t3592 = 1/Sqrt(t3589);
  t3753 = -1.*t2638*t2634;
  t3754 = t2676*t2724;
  t3758 = t3753 + t3754;
  t3774 = -1.*t2801*t2808;
  t3776 = t2788*t3758;
  t3794 = t3774 + t3776;
  t3839 = t2801*t3758;
  t3840 = t3300 + t3839;
  t3963 = t3300 + t3506;
  t3975 = t2801*t3417;
  t3982 = t3248 + t3975;
  t3921 = -0.21*t2638;
  t3924 = -0.049*t2676;
  t3925 = t3921 + t3924;
  t3912 = 0.049*t2638;
  t3913 = t3912 + t2681;
  t3747 = t2827*t2808;
  t3938 = 0.01841*t2788;
  t3939 = 0.70544*t2801;
  t3940 = t3938 + t3939;
  t3930 = 0.70544*t2788;
  t3931 = t3930 + t2802;
  t3770 = t2803*t3758;
  t4047 = t3249 + t3776;
  t4069 = t3513 + t3839;
  t3688 = -1.*t3199*t3487;
  t3691 = -1.*t3103*t3518;
  t3697 = t3688 + t3691;
  t3737 = -0.09*t2634;
  t3739 = -1.*t2634*t2741;
  t3742 = -0.049*t2724;
  t3743 = -1.*t2684*t2724;
  t3656 = -1.*t3103*t3254;
  t3665 = -1.*t3199*t3309;
  t3666 = t3656 + t3665;
  t4343 = -1.*t2827*t3417;
  t4344 = -1.*t2803*t3087;
  t4346 = -1.*t3287*t3487;
  t4351 = -1.*t3210*t3518;
  t4367 = 0.02159*t3542;
  t4372 = 1.11344*t3551;
  t4374 = t3737 + t3739 + t3742 + t3743 + t4343 + t4344 + t4346 + t4351 + t4367 + t4372;
  t4238 = -0.049*t2634;
  t4251 = -1.*t2634*t2684;
  t4254 = 0.09*t2724;
  t4259 = t2741*t2724;
  t4272 = -1.*t2803*t2808;
  t4278 = -1.*t2827*t3087;
  t4279 = -1.*t3210*t3254;
  t4280 = -1.*t3287*t3309;
  t4282 = 1.11344*t3353;
  t4302 = 0.02159*t3381;
  t4304 = t4238 + t4251 + t4254 + t4259 + t4272 + t4278 + t4279 + t4280 + t4282 + t4302;
  t4307 = Power(t4304,2);
  t4377 = Power(t4374,2);
  t4383 = t4307 + t4377;
  t4393 = 1/t4383;
  t3849 = t3199*t3794;
  t3850 = t3103*t3840;
  t3851 = t3849 + t3850;
  t3862 = t3103*t3794;
  t3865 = -1.*t3199*t3840;
  t3874 = t3862 + t3865;
  t3993 = t3199*t3963;
  t3997 = t3103*t3982;
  t4000 = t3993 + t3997;
  t4010 = t3103*t3963;
  t4011 = -1.*t3199*t3982;
  t4014 = t4010 + t4011;
  t4439 = -1.*t2827*t2808;
  t4449 = -1.*t2803*t3758;
  t4104 = t3199*t4047;
  t4114 = t3103*t4069;
  t4120 = t4104 + t4114;
  t4127 = t3103*t4047;
  t4134 = -1.*t3199*t4069;
  t4143 = t4127 + t4134;
  t4650 = Cos(var1[4]);
  t4690 = Cos(var1[6]);
  t4624 = Cos(var1[7]);
  t4637 = Sin(var1[4]);
  t4641 = -1.*t4624*t4637;
  t4657 = Sin(var1[6]);
  t4675 = Sin(var1[7]);
  t4680 = t4650*t4657*t4675;
  t4685 = t4641 + t4680;
  t4688 = t2634*t4685;
  t4702 = t4650*t4690*t2724;
  t4705 = t4688 + t4702;
  t4713 = t4650*t4690*t2634;
  t4727 = -1.*t4685*t2724;
  t4741 = t4713 + t4727;
  t4711 = -1.*t2676*t4705;
  t4745 = t2638*t4741;
  t4752 = t4711 + t4745;
  t4770 = t2638*t4705;
  t4778 = t2676*t4741;
  t4779 = t4770 + t4778;
  t4757 = t2801*t4752;
  t4782 = t2788*t4779;
  t4800 = t4757 + t4782;
  t4802 = t2788*t4752;
  t4808 = -1.*t2801*t4779;
  t4812 = t4802 + t4808;
  t4830 = -1.*t4690*t4624*t2634*t2676;
  t4835 = -1.*t2638*t4690*t4624*t2724;
  t4855 = t4830 + t4835;
  t4866 = t2638*t4690*t4624*t2634;
  t4886 = -1.*t4690*t4624*t2676*t2724;
  t4887 = t4866 + t4886;
  t4856 = t2801*t4855;
  t4891 = t2788*t4887;
  t4894 = t4856 + t4891;
  t4898 = t2788*t4855;
  t4905 = -1.*t2801*t4887;
  t4909 = t4898 + t4905;
  t4993 = t4690*t2634*t4675;
  t4999 = -1.*t4657*t2724;
  t5000 = t4993 + t4999;
  t5008 = -1.*t2634*t4657;
  t5011 = -1.*t4690*t4675*t2724;
  t5012 = t5008 + t5011;
  t5007 = -1.*t2676*t5000;
  t5013 = t2638*t5012;
  t5016 = t5007 + t5013;
  t5018 = t2638*t5000;
  t5020 = t2676*t5012;
  t5022 = t5018 + t5020;
  t5017 = t2801*t5016;
  t5023 = t2788*t5022;
  t5027 = t5017 + t5023;
  t5031 = t2788*t5016;
  t5033 = -1.*t2801*t5022;
  t5045 = t5031 + t5033;
  t5105 = t4624*t4637*t4657;
  t5107 = -1.*t4650*t4675;
  t5113 = t5105 + t5107;
  t5120 = -1.*t2634*t2676*t5113;
  t5134 = -1.*t2638*t5113*t2724;
  t5146 = t5120 + t5134;
  t5154 = t2638*t2634*t5113;
  t5166 = -1.*t2676*t5113*t2724;
  t5171 = t5154 + t5166;
  t5150 = t2801*t5146;
  t5181 = t2788*t5171;
  t5184 = t5150 + t5181;
  t5194 = t2788*t5146;
  t5195 = -1.*t2801*t5171;
  t5197 = t5194 + t5195;
  t5223 = t4650*t4624;
  t5227 = t4637*t4657*t4675;
  t5232 = t5223 + t5227;
  t5233 = t2634*t5232;
  t5242 = t4690*t4637*t2724;
  t5252 = t5233 + t5242;
  t5284 = t4690*t2634*t4637;
  t5291 = -1.*t5232*t2724;
  t5299 = t5284 + t5291;
  t5276 = -1.*t2676*t5252;
  t5300 = t2638*t5299;
  t5302 = t5276 + t5300;
  t5314 = t2638*t5252;
  t5317 = t2676*t5299;
  t5321 = t5314 + t5317;
  t5313 = t2801*t5302;
  t5326 = t2788*t5321;
  t5329 = t5313 + t5326;
  t5338 = t2788*t5302;
  t5340 = -1.*t2801*t5321;
  t5344 = t5338 + t5340;
  t5029 = -1.*t3199*t5027;
  t5048 = t3103*t5045;
  t5049 = t5029 + t5048;
  t5054 = 0.766044*t5049;
  t5056 = t3103*t5027;
  t5063 = t3199*t5045;
  t5071 = t5056 + t5063;
  t5076 = 0.642788*t5071;
  t5088 = t5054 + t5076;
  t5337 = -1.*t3199*t5329;
  t5345 = t3103*t5344;
  t5348 = t5337 + t5345;
  t5354 = 0.766044*t5348;
  t5355 = t3103*t5329;
  t5364 = t3199*t5344;
  t5369 = t5355 + t5364;
  t5371 = 0.642788*t5369;
  t5376 = t5354 + t5371;
  t5382 = Power(t5088,2);
  t4801 = -1.*t3199*t4800;
  t4813 = t3103*t4812;
  t4816 = t4801 + t4813;
  t4819 = t3103*t4800;
  t4820 = t3199*t4812;
  t4823 = t4819 + t4820;
  t5395 = Power(t5376,2);
  t5442 = t4650*t4624*t4657;
  t5445 = t4637*t4675;
  t5449 = t5442 + t5445;
  t5450 = -1.*t2634*t2676*t5449;
  t5451 = -1.*t2638*t5449*t2724;
  t5453 = t5450 + t5451;
  t5456 = t2638*t2634*t5449;
  t5457 = -1.*t2676*t5449*t2724;
  t5458 = t5456 + t5457;
  t5454 = t2801*t5453;
  t5463 = t2788*t5458;
  t5468 = t5454 + t5463;
  t5473 = t2788*t5453;
  t5475 = -1.*t2801*t5458;
  t5477 = t5473 + t5475;
  t5398 = t5382 + t5395;
  t5410 = -0.766044*t4816;
  t5417 = -0.642788*t4823;
  t5423 = t5410 + t5417;
  t5427 = Power(t5423,2);
  t5428 = t5382 + t5427 + t5395;
  t5430 = 1/t5428;
  t4818 = 0.766044*t4816;
  t4827 = 0.642788*t4823;
  t4829 = t4818 + t4827;
  t5500 = -1.*t2634*t4657*t4675;
  t5505 = -1.*t4690*t2724;
  t5514 = t5500 + t5505;
  t5524 = -1.*t4690*t2634;
  t5532 = t4657*t4675*t2724;
  t5536 = t5524 + t5532;
  t5518 = -1.*t2676*t5514;
  t5538 = t2638*t5536;
  t5541 = t5518 + t5538;
  t5554 = t2638*t5514;
  t5555 = t2676*t5536;
  t5556 = t5554 + t5555;
  t5547 = t2801*t5541;
  t5561 = t2788*t5556;
  t5566 = t5547 + t5561;
  t5571 = t2788*t5541;
  t5572 = -1.*t2801*t5556;
  t5576 = t5571 + t5572;
  t5599 = t4690*t2634*t4637*t4675;
  t5600 = -1.*t4637*t4657*t2724;
  t5604 = t5599 + t5600;
  t5609 = -1.*t2634*t4637*t4657;
  t5612 = -1.*t4690*t4637*t4675*t2724;
  t5613 = t5609 + t5612;
  t5606 = -1.*t2676*t5604;
  t5619 = t2638*t5613;
  t5620 = t5606 + t5619;
  t5625 = t2638*t5604;
  t5629 = t2676*t5613;
  t5630 = t5625 + t5629;
  t5623 = t2801*t5620;
  t5631 = t2788*t5630;
  t5635 = t5623 + t5631;
  t5639 = t2788*t5620;
  t5641 = -1.*t2801*t5630;
  t5642 = t5639 + t5641;
  t5407 = 1/Sqrt(t5398);
  t5673 = t4650*t4690*t2634*t4675;
  t5674 = -1.*t4650*t4657*t2724;
  t5678 = t5673 + t5674;
  t5688 = -1.*t4650*t2634*t4657;
  t5690 = -1.*t4650*t4690*t4675*t2724;
  t5692 = t5688 + t5690;
  t5679 = -1.*t2676*t5678;
  t5694 = t2638*t5692;
  t5699 = t5679 + t5694;
  t5704 = t2638*t5678;
  t5705 = t2676*t5692;
  t5707 = t5704 + t5705;
  t5702 = t2801*t5699;
  t5708 = t2788*t5707;
  t5713 = t5702 + t5708;
  t5716 = t2788*t5699;
  t5718 = -1.*t2801*t5707;
  t5719 = t5716 + t5718;
  t5492 = Sqrt(t5398);
  t5742 = -1.*t4690*t2634*t4675;
  t5743 = t4657*t2724;
  t5746 = t5742 + t5743;
  t5748 = t2676*t5746;
  t5750 = t5748 + t5013;
  t5752 = t2638*t5746;
  t5755 = -1.*t2676*t5012;
  t5759 = t5752 + t5755;
  t5751 = -1.*t2801*t5750;
  t5764 = t2788*t5759;
  t5766 = t5751 + t5764;
  t5772 = t2788*t5750;
  t5774 = t2801*t5759;
  t5775 = t5772 + t5774;
  t5802 = -1.*t2634*t5232;
  t5803 = -1.*t4690*t4637*t2724;
  t5808 = t5802 + t5803;
  t5809 = t2676*t5808;
  t5812 = t5809 + t5300;
  t5814 = t2638*t5808;
  t5815 = -1.*t2676*t5299;
  t5817 = t5814 + t5815;
  t5813 = -1.*t2801*t5812;
  t5818 = t2788*t5817;
  t5820 = t5813 + t5818;
  t5822 = t2788*t5812;
  t5823 = t2801*t5817;
  t5824 = t5822 + t5823;
  t5846 = -1.*t2634*t4685;
  t5848 = -1.*t4650*t4690*t2724;
  t5852 = t5846 + t5848;
  t5855 = t2676*t5852;
  t5856 = t5855 + t4745;
  t5859 = t2638*t5852;
  t5860 = -1.*t2676*t4741;
  t5861 = t5859 + t5860;
  t5858 = -1.*t2801*t5856;
  t5865 = t2788*t5861;
  t5866 = t5858 + t5865;
  t5869 = t2788*t5856;
  t5871 = t2801*t5861;
  t5876 = t5869 + t5871;
  t5965 = -1.*t4650*t4624;
  t5968 = -1.*t4637*t4657*t4675;
  t5969 = t5965 + t5968;
  t5970 = t2634*t5969;
  t5972 = t5970 + t5803;
  t5976 = -1.*t4690*t2634*t4637;
  t5982 = -1.*t5969*t2724;
  t5985 = t5976 + t5982;
  t5974 = -1.*t2676*t5972;
  t5987 = t2638*t5985;
  t5989 = t5974 + t5987;
  t5993 = t2638*t5972;
  t5995 = t2676*t5985;
  t5998 = t5993 + t5995;
  t5992 = t2801*t5989;
  t6000 = t2788*t5998;
  t6002 = t5992 + t6000;
  t6007 = t2788*t5989;
  t6008 = -1.*t2801*t5998;
  t6010 = t6007 + t6008;
  t6035 = -1.*t2638*t4705;
  t6038 = t6035 + t5860;
  t6041 = t2788*t6038;
  t6042 = t6041 + t4782;
  t6045 = t2801*t6038;
  t6046 = t2801*t4779;
  t6054 = t6045 + t6046;
  t6071 = -1.*t2638*t5000;
  t6082 = t6071 + t5755;
  t6085 = t2788*t6082;
  t6087 = t6085 + t5023;
  t6090 = t2801*t6082;
  t6092 = t2801*t5022;
  t6094 = t6090 + t6092;
  t6111 = -1.*t2638*t5252;
  t6115 = t6111 + t5815;
  t6116 = t2788*t6115;
  t6117 = t6116 + t5326;
  t6123 = t2801*t6115;
  t6126 = t2801*t5321;
  t6127 = t6123 + t6126;
  p_output1[0]=var2[3];
  p_output1[1]=var2[4];
  p_output1[2]=var2[15];
  p_output1[3]=0.5*t1378*(2.*t1359*t876 + 2.*(t1821 + t1852 - 0.09*t43 - 1.*t313*t43 - 0.049*t64 - 1.*t214*t64 - 1.11344*(t2042*t753 - 1.*t1869*t782) - 0.02159*(t1869*t753 + t2042*t782) + t1869*t790 + t2042*t822)*t876)*var2[16] + 0.5*t1378*(2.*t1359*(t1123*t2225 + t2146*t43 + t575 + t2188*t64 + t2258*t741 + t743 - 1.11344*(t2327*t753 - 1.*t2299*t782) - 0.02159*(t2299*t753 + t2327*t782) + t2299*t790 + t2327*t822) + 2.*(t1821 + t1852 + t2188*t43 + t2258*t571 - 1.*t2146*t64 + t2225*t741 - 1.11344*(t2503*t753 - 1.*t2476*t782) - 0.02159*(t2476*t753 + t2503*t782) + t2476*t790 + t2503*t822)*t876)*var2[17] + 0.5*t1378*(2.*t1359*(-0.02159*t1260 + t1198*t1395 + t1153*t1413 - 1.11344*(-1.*t1153*t753 - 1.*t1198*t782)) + 2.*(t1413*t749 + t1395*t809 - 1.11344*(-1.*t749*t753 - 1.*t782*t809) - 0.02159*t849)*t876)*var2[21];
  p_output1[4]=0.5*t3592*(2.*t3386*t3577 + 2.*t3386*(t3737 + t3739 + t3742 + t3743 + t3747 + t3770 + t3287*t3794 + t3210*t3840 - 0.02159*t3851 - 1.11344*t3874))*var2[8] + 0.5*t3592*(2.*t3577*(t2809 + t3100 + t2634*t3913 + t2724*t3925 + t3417*t3931 + t3087*t3940 + t3287*t3963 + t3210*t3982 - 0.02159*t4000 - 1.11344*t4014) + 2.*t3386*(t3747 + t3770 - 1.*t2724*t3913 + t2634*t3925 + t3087*t3931 + t2808*t3940 + t3287*t4047 + t3210*t4069 - 0.02159*t4120 - 1.11344*t4143))*var2[9] + 0.5*t3592*(2.*t3386*(-0.02159*t3353 + t3254*t3599 + t3309*t3644 - 1.11344*t3666) + 2.*t3577*(-0.02159*t3551 + t3518*t3599 + t3487*t3644 - 1.11344*t3697))*var2[13];
  p_output1[5]=(t3386*t4304*t4393 + t4374*t4393*(t3388 + t3407 + t3410 + t3412 - 1.*t3287*t3794 - 1.*t3210*t3840 + 0.02159*t3851 + 1.11344*t3874 + t4439 + t4449))*var2[8] + (t3386*(-1.*t2634*t3913 - 1.*t2724*t3925 - 1.*t3417*t3931 - 1.*t3087*t3940 - 1.*t3287*t3963 - 1.*t3210*t3982 + 0.02159*t4000 + 1.11344*t4014 + t4272 + t4278)*t4393 + t4374*t4393*(t2724*t3913 - 1.*t2634*t3925 - 1.*t3087*t3931 - 1.*t2808*t3940 - 1.*t3287*t4047 - 1.*t3210*t4069 + 0.02159*t4120 + 1.11344*t4143 + t4439 + t4449))*var2[9] + (t3386*(0.02159*t3551 - 1.*t3518*t3599 - 1.*t3487*t3644 + 1.11344*t3697)*t4393 + (0.02159*t3353 - 1.*t3254*t3599 - 1.*t3309*t3644 + 1.11344*t3666)*t4374*t4393)*var2[13];
  p_output1[6]=var2[6];
  p_output1[7]=var2[7];
  p_output1[8]=(Power(t4829,2)*t5376*t5407*t5430 + t5430*t5492*(-0.766044*(-1.*t3199*t6002 + t3103*t6010) - 0.642788*(t3103*t6002 + t3199*t6010)))*var2[4] + (0.5*t4829*t5407*t5430*(2.*t5088*(0.766044*(-1.*t3199*t5566 + t3103*t5576) + 0.642788*(t3103*t5566 + t3199*t5576)) + 2.*t5376*(0.766044*(-1.*t3199*t5635 + t3103*t5642) + 0.642788*(t3103*t5635 + t3199*t5642))) + t5430*t5492*(-0.766044*(-1.*t3199*t5713 + t3103*t5719) - 0.642788*(t3103*t5713 + t3199*t5719)))*var2[6] + (0.5*t4829*(2.*(0.766044*(-1.*t3199*t4894 + t3103*t4909) + 0.642788*(t3103*t4894 + t3199*t4909))*t5088 + 2.*(0.766044*(-1.*t3199*t5184 + t3103*t5197) + 0.642788*(t3103*t5184 + t3199*t5197))*t5376)*t5407*t5430 + t5430*(-0.766044*(-1.*t3199*t5468 + t3103*t5477) - 0.642788*(t3103*t5468 + t3199*t5477))*t5492)*var2[7] + (0.5*t4829*t5407*t5430*(2.*t5088*(0.642788*(t3199*t5766 + t3103*t5775) + 0.766044*(t3103*t5766 - 1.*t3199*t5775)) + 2.*t5376*(0.642788*(t3199*t5820 + t3103*t5824) + 0.766044*(t3103*t5820 - 1.*t3199*t5824))) + t5430*t5492*(-0.642788*(t3199*t5866 + t3103*t5876) - 0.766044*(t3103*t5866 - 1.*t3199*t5876)))*var2[8] + (t5430*t5492*(-0.642788*(t3199*t6042 + t3103*t6054) - 0.766044*(t3103*t6042 - 1.*t3199*t6054)) + 0.5*t4829*t5407*t5430*(2.*t5088*(0.642788*(t3199*t6087 + t3103*t6094) + 0.766044*(t3103*t6087 - 1.*t3199*t6094)) + 2.*t5376*(0.642788*(t3199*t6117 + t3103*t6127) + 0.766044*(t3103*t6117 - 1.*t3199*t6127))))*var2[9] + (0.5*t4829*(2.*(0.766044*(-1.*t3103*t5027 - 1.*t3199*t5045) + 0.642788*t5049)*t5088 + 2.*(0.766044*(-1.*t3103*t5329 - 1.*t3199*t5344) + 0.642788*t5348)*t5376)*t5407*t5430 + (-0.766044*(-1.*t3103*t4800 - 1.*t3199*t4812) - 0.642788*t4816)*t5430*t5492)*var2[13];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void dyaRightStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




