/*
 * Automatically Generated from Mathematica.
 * Sun 7 Nov 2021 14:27:54 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "Jdot_yaLeftStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t95;
  double t259;
  double t354;
  double t367;
  double t499;
  double t656;
  double t994;
  double t1051;
  double t1148;
  double t1199;
  double t1253;
  double t1275;
  double t1367;
  double t1515;
  double t1559;
  double t1721;
  double t1735;
  double t1762;
  double t1789;
  double t1799;
  double t1801;
  double t1827;
  double t1845;
  double t1863;
  double t1875;
  double t2016;
  double t2032;
  double t2095;
  double t713;
  double t756;
  double t816;
  double t441;
  double t511;
  double t543;
  double t1618;
  double t1654;
  double t1701;
  double t1255;
  double t1285;
  double t1288;
  double t1886;
  double t1908;
  double t1913;
  double t2229;
  double t2306;
  double t2354;
  double t1806;
  double t1840;
  double t1842;
  double t2376;
  double t2377;
  double t2386;
  double t2401;
  double t2408;
  double t237;
  double t553;
  double t682;
  double t914;
  double t1594;
  double t1768;
  double t1883;
  double t2110;
  double t2115;
  double t2117;
  double t2120;
  double t2127;
  double t2128;
  double t2135;
  double t2144;
  double t2147;
  double t2172;
  double t2193;
  double t2198;
  double t2202;
  double t2220;
  double t2356;
  double t2364;
  double t2380;
  double t2420;
  double t2449;
  double t2455;
  double t2470;
  double t2478;
  double t2507;
  double t2530;
  double t2560;
  double t2596;
  double t2624;
  double t2723;
  double t2739;
  double t2746;
  double t2765;
  double t2769;
  double t2774;
  double t2779;
  double t2793;
  double t2185;
  double t2627;
  double t2635;
  double t2643;
  double t2965;
  double t2978;
  double t2993;
  double t2919;
  double t2921;
  double t2925;
  double t2901;
  double t2907;
  double t2712;
  double t2944;
  double t2948;
  double t2952;
  double t2928;
  double t2930;
  double t2750;
  double t3093;
  double t3107;
  double t3273;
  double t3275;
  double t3159;
  double t3206;
  double t3229;
  double t3459;
  double t3458;
  double t3480;
  double t3463;
  double t3483;
  double t3489;
  double t3493;
  double t3495;
  double t3498;
  double t3499;
  double t3502;
  double t3431;
  double t3432;
  double t3512;
  double t3470;
  double t3503;
  double t3505;
  double t3452;
  double t3513;
  double t3520;
  double t3522;
  double t3528;
  double t3506;
  double t3524;
  double t3525;
  double t3438;
  double t3532;
  double t3548;
  double t3564;
  double t3607;
  double t3527;
  double t3570;
  double t3600;
  double t3430;
  double t3614;
  double t3615;
  double t3617;
  double t3651;
  double t3653;
  double t3657;
  double t3638;
  double t3640;
  double t3643;
  double t3648;
  double t3660;
  double t3662;
  double t3667;
  double t3668;
  double t3669;
  double t3680;
  double t3681;
  double t3685;
  double t3664;
  double t3672;
  double t3673;
  double t3722;
  double t3723;
  double t3724;
  double t3715;
  double t3717;
  double t3719;
  double t3721;
  double t3727;
  double t3730;
  double t3736;
  double t3740;
  double t3741;
  double t3754;
  double t3755;
  double t3756;
  double t3735;
  double t3744;
  double t3745;
  double t3773;
  double t3776;
  double t3777;
  double t3782;
  double t3785;
  double t3786;
  double t3781;
  double t3787;
  double t3790;
  double t3792;
  double t3799;
  double t3802;
  double t3791;
  double t3806;
  double t3808;
  double t3818;
  double t3819;
  double t3821;
  double t3870;
  double t3872;
  double t3877;
  double t3862;
  double t3881;
  double t3882;
  double t3884;
  double t3885;
  double t3886;
  double t3883;
  double t3887;
  double t3888;
  double t3899;
  double t3900;
  double t3909;
  double t3896;
  double t3914;
  double t3928;
  double t3934;
  double t3941;
  double t3942;
  double t3677;
  double t3695;
  double t3701;
  double t3703;
  double t3705;
  double t3707;
  double t3708;
  double t3713;
  double t3714;
  double t3932;
  double t3943;
  double t3948;
  double t3949;
  double t3950;
  double t3951;
  double t3953;
  double t3954;
  double t3955;
  double t3959;
  double t3601;
  double t3619;
  double t3624;
  double t3629;
  double t3630;
  double t3632;
  double t3961;
  double t3987;
  double t3989;
  double t3990;
  double t3979;
  double t3981;
  double t3984;
  double t3985;
  double t3991;
  double t3992;
  double t3995;
  double t3996;
  double t3997;
  double t4004;
  double t4005;
  double t4007;
  double t3993;
  double t3999;
  double t4002;
  double t3962;
  double t3967;
  double t3968;
  double t3971;
  double t3973;
  double t3974;
  double t3975;
  double t3626;
  double t3633;
  double t3634;
  double t4034;
  double t4036;
  double t4037;
  double t4041;
  double t4042;
  double t4043;
  double t4048;
  double t4050;
  double t4052;
  double t4039;
  double t4044;
  double t4045;
  double t4068;
  double t4070;
  double t4074;
  double t4075;
  double t4076;
  double t4079;
  double t4081;
  double t4083;
  double t4085;
  double t4080;
  double t4087;
  double t4090;
  double t4094;
  double t4096;
  double t4104;
  double t3964;
  double t4122;
  double t4125;
  double t4126;
  double t4127;
  double t4129;
  double t4130;
  double t4135;
  double t4136;
  double t4139;
  double t4131;
  double t4141;
  double t4144;
  double t4148;
  double t4149;
  double t4150;
  double t4025;
  double t4176;
  double t4177;
  double t4207;
  double t4208;
  double t4212;
  double t4218;
  double t4219;
  double t4229;
  double t4234;
  double t4240;
  double t4255;
  double t4258;
  double t4270;
  double t4275;
  double t4276;
  double t4242;
  double t4243;
  double t4252;
  double t4178;
  double t4183;
  double t4185;
  double t4191;
  double t4203;
  double t4204;
  double t4223;
  double t4224;
  double t4227;
  double t4209;
  double t4210;
  double t4211;
  double t4333;
  double t4334;
  double t4337;
  double t4259;
  double t4263;
  double t4267;
  double t4277;
  double t4285;
  double t4286;
  double t4347;
  double t4349;
  double t4350;
  double t4359;
  double t4360;
  double t4170;
  double t4174;
  double t4190;
  double t4206;
  double t4221;
  double t4241;
  double t4268;
  double t4290;
  double t4296;
  double t4300;
  double t4306;
  double t4307;
  double t4311;
  double t4314;
  double t4318;
  double t4319;
  double t4321;
  double t4325;
  double t4326;
  double t4327;
  double t4330;
  double t4338;
  double t4339;
  double t4358;
  double t4361;
  double t4363;
  double t4365;
  double t4366;
  double t4370;
  double t4371;
  double t4373;
  double t4376;
  double t4377;
  double t4379;
  double t4394;
  double t4395;
  double t4396;
  double t4398;
  double t4399;
  double t4402;
  double t4403;
  double t4404;
  double t4427;
  double t4429;
  double t4430;
  double t4431;
  double t4433;
  double t4434;
  double t4435;
  double t4438;
  double t4440;
  double t4441;
  double t4442;
  double t4386;
  double t4387;
  double t4389;
  double t4390;
  double t4446;
  double t4447;
  double t4448;
  double t4450;
  double t4452;
  double t4453;
  double t4455;
  double t4407;
  double t4408;
  double t4410;
  double t4414;
  double t4417;
  double t4418;
  double t4444;
  double t4456;
  double t4457;
  double t4459;
  double t4476;
  double t4477;
  double t4478;
  double t4479;
  double t4480;
  double t4482;
  double t4486;
  double t4493;
  double t4509;
  double t4511;
  double t4514;
  double t4481;
  double t4499;
  double t4504;
  double t4536;
  double t4538;
  double t4539;
  double t4542;
  double t4544;
  double t4546;
  double t4547;
  double t4551;
  double t4545;
  double t4564;
  double t4569;
  double t4572;
  double t4573;
  double t4574;
  double t4593;
  double t4595;
  double t4596;
  double t4597;
  double t4598;
  double t4600;
  double t4601;
  double t4602;
  double t4599;
  double t4603;
  double t4607;
  double t4609;
  double t4612;
  double t4613;
  double t4323;
  double t4380;
  double t4382;
  double t4383;
  double t4656;
  double t4658;
  double t4662;
  double t4629;
  double t4630;
  double t4632;
  double t4641;
  double t4642;
  double t4391;
  double t4648;
  double t4651;
  double t4653;
  double t4644;
  double t4646;
  double t4397;
  double t4689;
  double t4702;
  double t4665;
  double t4667;
  double t4669;
  double t4672;
  double t4673;
  double t4676;
  double t4462;
  double t4465;
  double t4709;
  double t4710;
  double t4712;
  double t4714;
  double t4715;
  double t4716;
  double t4770;
  double t4771;
  double t4778;
  double t4782;
  double t4791;
  double t4792;
  double t4794;
  double t4833;
  double t4839;
  double t4846;
  double t4849;
  double t4840;
  double t4842;
  double t4843;
  double t4861;
  double t4862;
  double t4864;
  double t4866;
  double t4869;
  double t4870;
  double t4872;
  double t4891;
  double t4895;
  double t4897;
  double t4898;
  double t4901;
  double t4917;
  double t4918;
  double t4919;
  double t4906;
  double t4907;
  double t4908;
  t95 = Cos(var1[8]);
  t259 = Cos(var1[9]);
  t354 = -1.*t259;
  t367 = 1. + t354;
  t499 = Sin(var1[9]);
  t656 = Sin(var1[8]);
  t994 = -1.*var1[9];
  t1051 = 0.226893 + t994;
  t1148 = Cos(t1051);
  t1199 = -1.*t1148;
  t1253 = 1. + t1199;
  t1275 = Sin(t1051);
  t1367 = -1.*t95*t499;
  t1515 = -1.*t259*t656;
  t1559 = t1367 + t1515;
  t1721 = t259*t95;
  t1735 = -1.*t499*t656;
  t1762 = t1721 + t1735;
  t1789 = Cos(var1[13]);
  t1799 = -1.*t1789;
  t1801 = 1. + t1799;
  t1827 = Sin(var1[13]);
  t1845 = t1275*t1559;
  t1863 = t1148*t1762;
  t1875 = t1845 + t1863;
  t2016 = t1148*t1559;
  t2032 = -1.*t1275*t1762;
  t2095 = t2016 + t2032;
  t713 = -0.21*t367;
  t756 = 0.049*t499;
  t816 = t713 + t756;
  t441 = -0.049*t367;
  t511 = -0.21*t499;
  t543 = t441 + t511;
  t1618 = 0.01841*t1253;
  t1654 = -0.70544*t1275;
  t1701 = t1618 + t1654;
  t1255 = -0.70544*t1253;
  t1285 = -0.01841*t1275;
  t1288 = t1255 + t1285;
  t1886 = -1.11344*t1801;
  t1908 = 0.02159*t1827;
  t1913 = t1886 + t1908;
  t2229 = t95*t499;
  t2306 = t259*t656;
  t2354 = t2229 + t2306;
  t1806 = -0.02159*t1801;
  t1840 = -1.11344*t1827;
  t1842 = t1806 + t1840;
  t2376 = -1.*t1275*t2354;
  t2377 = t2376 + t1863;
  t2386 = t1148*t2354;
  t2401 = t1275*t1762;
  t2408 = t2386 + t2401;
  t237 = 0.049*t95;
  t553 = t95*t543;
  t682 = -0.09*t656;
  t914 = -1.*t816*t656;
  t1594 = t1288*t1559;
  t1768 = t1701*t1762;
  t1883 = t1842*t1875;
  t2110 = t1913*t2095;
  t2115 = -1.*t1827*t1875;
  t2117 = t1789*t2095;
  t2120 = t2115 + t2117;
  t2127 = -1.11344*t2120;
  t2128 = t1789*t1875;
  t2135 = t1827*t2095;
  t2144 = t2128 + t2135;
  t2147 = -0.02159*t2144;
  t2172 = t237 + t553 + t682 + t914 + t1594 + t1768 + t1883 + t2110 + t2127 + t2147;
  t2193 = 0.09*t95;
  t2198 = t95*t816;
  t2202 = 0.049*t656;
  t2220 = t543*t656;
  t2356 = t1701*t2354;
  t2364 = t1288*t1762;
  t2380 = t1913*t2377;
  t2420 = t1842*t2408;
  t2449 = t1827*t2377;
  t2455 = t1789*t2408;
  t2470 = t2449 + t2455;
  t2478 = -0.02159*t2470;
  t2507 = t1789*t2377;
  t2530 = -1.*t1827*t2408;
  t2560 = t2507 + t2530;
  t2596 = -1.11344*t2560;
  t2624 = t2193 + t2198 + t2202 + t2220 + t2356 + t2364 + t2380 + t2420 + t2478 + t2596;
  t2723 = -1.*t259*t95;
  t2739 = t499*t656;
  t2746 = t2723 + t2739;
  t2765 = -1.*t1275*t1559;
  t2769 = t1148*t2746;
  t2774 = t2765 + t2769;
  t2779 = t1275*t2746;
  t2793 = t2016 + t2779;
  t2185 = Power(t2172,2);
  t2627 = Power(t2624,2);
  t2635 = 0.00002025 + t2185 + t2627;
  t2643 = 1/Sqrt(t2635);
  t2965 = t2016 + t2386;
  t2978 = t1275*t2354;
  t2993 = t1845 + t2978;
  t2919 = -0.21*t259;
  t2921 = -0.049*t499;
  t2925 = t2919 + t2921;
  t2901 = 0.049*t259;
  t2907 = t2901 + t511;
  t2712 = t1701*t1559;
  t2944 = 0.01841*t1148;
  t2948 = 0.70544*t1275;
  t2952 = t2944 + t2948;
  t2928 = 0.70544*t1148;
  t2930 = t2928 + t1285;
  t2750 = t1288*t2746;
  t3093 = t1863 + t2769;
  t3107 = t2401 + t2779;
  t3273 = 0.02159*t1789;
  t3275 = t3273 + t1840;
  t3159 = -1.11344*t1789;
  t3206 = -0.02159*t1827;
  t3229 = t3159 + t3206;
  t3459 = Cos(var1[4]);
  t3458 = Cos(var1[14]);
  t3480 = Cos(var1[16]);
  t3463 = Sin(var1[16]);
  t3483 = Sin(var1[14]);
  t3489 = Sin(var1[15]);
  t3493 = t3459*t3483*t3489;
  t3495 = Cos(var1[15]);
  t3498 = Sin(var1[4]);
  t3499 = -1.*t3495*t3498;
  t3502 = t3493 + t3499;
  t3431 = -1.*var1[17];
  t3432 = 0.226893 + t3431;
  t3512 = Cos(var1[17]);
  t3470 = t3458*t3459*t3463;
  t3503 = t3480*t3502;
  t3505 = t3470 + t3503;
  t3452 = Sin(var1[17]);
  t3513 = t3458*t3480*t3459;
  t3520 = -1.*t3463*t3502;
  t3522 = t3513 + t3520;
  t3528 = Cos(t3432);
  t3506 = -1.*t3452*t3505;
  t3524 = t3512*t3522;
  t3525 = t3506 + t3524;
  t3438 = Sin(t3432);
  t3532 = t3512*t3505;
  t3548 = t3452*t3522;
  t3564 = t3532 + t3548;
  t3607 = Cos(var1[21]);
  t3527 = t3438*t3525;
  t3570 = t3528*t3564;
  t3600 = t3527 + t3570;
  t3430 = Sin(var1[21]);
  t3614 = t3528*t3525;
  t3615 = -1.*t3438*t3564;
  t3617 = t3614 + t3615;
  t3651 = t3458*t3480*t3489;
  t3653 = -1.*t3483*t3463;
  t3657 = t3651 + t3653;
  t3638 = -1.*t3480*t3483;
  t3640 = -1.*t3458*t3489*t3463;
  t3643 = t3638 + t3640;
  t3648 = t3512*t3643;
  t3660 = -1.*t3657*t3452;
  t3662 = t3648 + t3660;
  t3667 = t3512*t3657;
  t3668 = t3643*t3452;
  t3669 = t3667 + t3668;
  t3680 = t3438*t3662;
  t3681 = t3528*t3669;
  t3685 = t3680 + t3681;
  t3664 = t3528*t3662;
  t3672 = -1.*t3438*t3669;
  t3673 = t3664 + t3672;
  t3722 = -1.*t3480*t3483*t3489;
  t3723 = -1.*t3458*t3463;
  t3724 = t3722 + t3723;
  t3715 = -1.*t3458*t3480;
  t3717 = t3483*t3489*t3463;
  t3719 = t3715 + t3717;
  t3721 = t3512*t3719;
  t3727 = -1.*t3724*t3452;
  t3730 = t3721 + t3727;
  t3736 = t3512*t3724;
  t3740 = t3719*t3452;
  t3741 = t3736 + t3740;
  t3754 = t3438*t3730;
  t3755 = t3528*t3741;
  t3756 = t3754 + t3755;
  t3735 = t3528*t3730;
  t3744 = -1.*t3438*t3741;
  t3745 = t3735 + t3744;
  t3773 = t3458*t3480*t3489*t3498;
  t3776 = -1.*t3483*t3463*t3498;
  t3777 = t3773 + t3776;
  t3782 = -1.*t3480*t3483*t3498;
  t3785 = -1.*t3458*t3489*t3463*t3498;
  t3786 = t3782 + t3785;
  t3781 = -1.*t3452*t3777;
  t3787 = t3512*t3786;
  t3790 = t3781 + t3787;
  t3792 = t3512*t3777;
  t3799 = t3452*t3786;
  t3802 = t3792 + t3799;
  t3791 = t3438*t3790;
  t3806 = t3528*t3802;
  t3808 = t3791 + t3806;
  t3818 = t3528*t3790;
  t3819 = -1.*t3438*t3802;
  t3821 = t3818 + t3819;
  t3870 = t3495*t3459;
  t3872 = t3483*t3489*t3498;
  t3877 = t3870 + t3872;
  t3862 = t3458*t3463*t3498;
  t3881 = t3480*t3877;
  t3882 = t3862 + t3881;
  t3884 = t3458*t3480*t3498;
  t3885 = -1.*t3463*t3877;
  t3886 = t3884 + t3885;
  t3883 = -1.*t3452*t3882;
  t3887 = t3512*t3886;
  t3888 = t3883 + t3887;
  t3899 = t3512*t3882;
  t3900 = t3452*t3886;
  t3909 = t3899 + t3900;
  t3896 = t3438*t3888;
  t3914 = t3528*t3909;
  t3928 = t3896 + t3914;
  t3934 = t3528*t3888;
  t3941 = -1.*t3438*t3909;
  t3942 = t3934 + t3941;
  t3677 = t3607*t3673;
  t3695 = -1.*t3685*t3430;
  t3701 = t3677 + t3695;
  t3703 = 0.766044*t3701;
  t3705 = t3607*t3685;
  t3707 = t3673*t3430;
  t3708 = t3705 + t3707;
  t3713 = 0.642788*t3708;
  t3714 = t3703 + t3713;
  t3932 = -1.*t3430*t3928;
  t3943 = t3607*t3942;
  t3948 = t3932 + t3943;
  t3949 = 0.766044*t3948;
  t3950 = t3607*t3928;
  t3951 = t3430*t3942;
  t3953 = t3950 + t3951;
  t3954 = 0.642788*t3953;
  t3955 = t3949 + t3954;
  t3959 = Power(t3714,2);
  t3601 = -1.*t3430*t3600;
  t3619 = t3607*t3617;
  t3624 = t3601 + t3619;
  t3629 = t3607*t3600;
  t3630 = t3430*t3617;
  t3632 = t3629 + t3630;
  t3961 = Power(t3955,2);
  t3987 = t3458*t3480*t3459*t3489;
  t3989 = -1.*t3459*t3483*t3463;
  t3990 = t3987 + t3989;
  t3979 = -1.*t3480*t3459*t3483;
  t3981 = -1.*t3458*t3459*t3489*t3463;
  t3984 = t3979 + t3981;
  t3985 = t3512*t3984;
  t3991 = -1.*t3990*t3452;
  t3992 = t3985 + t3991;
  t3995 = t3512*t3990;
  t3996 = t3984*t3452;
  t3997 = t3995 + t3996;
  t4004 = t3438*t3992;
  t4005 = t3528*t3997;
  t4007 = t4004 + t4005;
  t3993 = t3528*t3992;
  t3999 = -1.*t3438*t3997;
  t4002 = t3993 + t3999;
  t3962 = t3959 + t3961;
  t3967 = -0.766044*t3624;
  t3968 = -0.642788*t3632;
  t3971 = t3967 + t3968;
  t3973 = Power(t3971,2);
  t3974 = t3959 + t3973 + t3961;
  t3975 = 1/t3974;
  t3626 = 0.766044*t3624;
  t3633 = 0.642788*t3632;
  t3634 = t3626 + t3633;
  t4034 = -1.*t3458*t3495*t3512*t3463;
  t4036 = -1.*t3458*t3495*t3480*t3452;
  t4037 = t4034 + t4036;
  t4041 = t3458*t3495*t3480*t3512;
  t4042 = -1.*t3458*t3495*t3463*t3452;
  t4043 = t4041 + t4042;
  t4048 = t3438*t4037;
  t4050 = t3528*t4043;
  t4052 = t4048 + t4050;
  t4039 = t3528*t4037;
  t4044 = -1.*t3438*t4043;
  t4045 = t4039 + t4044;
  t4068 = -1.*t3459*t3489;
  t4070 = t3495*t3483*t3498;
  t4074 = t4068 + t4070;
  t4075 = -1.*t3512*t3463*t4074;
  t4076 = -1.*t3480*t3452*t4074;
  t4079 = t4075 + t4076;
  t4081 = t3480*t3512*t4074;
  t4083 = -1.*t3463*t3452*t4074;
  t4085 = t4081 + t4083;
  t4080 = t3438*t4079;
  t4087 = t3528*t4085;
  t4090 = t4080 + t4087;
  t4094 = t3528*t4079;
  t4096 = -1.*t3438*t4085;
  t4104 = t4094 + t4096;
  t3964 = 1/Sqrt(t3962);
  t4122 = t3495*t3459*t3483;
  t4125 = t3489*t3498;
  t4126 = t4122 + t4125;
  t4127 = -1.*t3512*t3463*t4126;
  t4129 = -1.*t3480*t3452*t4126;
  t4130 = t4127 + t4129;
  t4135 = t3480*t3512*t4126;
  t4136 = -1.*t3463*t3452*t4126;
  t4139 = t4135 + t4136;
  t4131 = t3438*t4130;
  t4141 = t3528*t4139;
  t4144 = t4131 + t4141;
  t4148 = t3528*t4130;
  t4149 = -1.*t3438*t4139;
  t4150 = t4148 + t4149;
  t4025 = Sqrt(t3962);
  t4176 = -1.*t3512;
  t4177 = 1. + t4176;
  t4207 = -1.*t3528;
  t4208 = 1. + t4207;
  t4212 = -1.*t3512*t3463;
  t4218 = -1.*t3480*t3452;
  t4219 = t4212 + t4218;
  t4229 = t3480*t3512;
  t4234 = -1.*t3463*t3452;
  t4240 = t4229 + t4234;
  t4255 = -1.*t3607;
  t4258 = 1. + t4255;
  t4270 = t3528*t4219;
  t4275 = -1.*t3438*t4240;
  t4276 = t4270 + t4275;
  t4242 = t3438*t4219;
  t4243 = t3528*t4240;
  t4252 = t4242 + t4243;
  t4178 = -0.049*t4177;
  t4183 = -0.21*t3452;
  t4185 = t4178 + t4183;
  t4191 = -0.21*t4177;
  t4203 = 0.049*t3452;
  t4204 = t4191 + t4203;
  t4223 = 0.01841*t4208;
  t4224 = -0.70544*t3438;
  t4227 = t4223 + t4224;
  t4209 = -0.70544*t4208;
  t4210 = -0.01841*t3438;
  t4211 = t4209 + t4210;
  t4333 = t3512*t3463;
  t4334 = t3480*t3452;
  t4337 = t4333 + t4334;
  t4259 = -0.02159*t4258;
  t4263 = -1.11344*t3430;
  t4267 = t4259 + t4263;
  t4277 = -1.11344*t4258;
  t4285 = 0.02159*t3430;
  t4286 = t4277 + t4285;
  t4347 = t3528*t4337;
  t4349 = t3438*t4240;
  t4350 = t4347 + t4349;
  t4359 = -1.*t3438*t4337;
  t4360 = t4359 + t4243;
  t4170 = 0.049*t3480;
  t4174 = -0.09*t3463;
  t4190 = t3480*t4185;
  t4206 = -1.*t3463*t4204;
  t4221 = t4211*t4219;
  t4241 = t4227*t4240;
  t4268 = t4252*t4267;
  t4290 = t4276*t4286;
  t4296 = t3607*t4276;
  t4300 = -1.*t4252*t3430;
  t4306 = t4296 + t4300;
  t4307 = -1.11344*t4306;
  t4311 = t3607*t4252;
  t4314 = t4276*t3430;
  t4318 = t4311 + t4314;
  t4319 = -0.02159*t4318;
  t4321 = t4170 + t4174 + t4190 + t4206 + t4221 + t4241 + t4268 + t4290 + t4307 + t4319;
  t4325 = 0.09*t3480;
  t4326 = 0.049*t3463;
  t4327 = t3463*t4185;
  t4330 = t3480*t4204;
  t4338 = t4227*t4337;
  t4339 = t4211*t4240;
  t4358 = t4350*t4267;
  t4361 = t4360*t4286;
  t4363 = t3607*t4350;
  t4365 = t4360*t3430;
  t4366 = t4363 + t4365;
  t4370 = -0.02159*t4366;
  t4371 = t3607*t4360;
  t4373 = -1.*t4350*t3430;
  t4376 = t4371 + t4373;
  t4377 = -1.11344*t4376;
  t4379 = t4325 + t4326 + t4327 + t4330 + t4338 + t4339 + t4358 + t4361 + t4370 + t4377;
  t4394 = -1.*t3480*t3512;
  t4395 = t3463*t3452;
  t4396 = t4394 + t4395;
  t4398 = t3438*t4396;
  t4399 = t4270 + t4398;
  t4402 = -1.*t3438*t4219;
  t4403 = t3528*t4396;
  t4404 = t4402 + t4403;
  t4427 = -0.049*t3480;
  t4429 = 0.09*t3463;
  t4430 = -1.*t3480*t4185;
  t4431 = t3463*t4204;
  t4433 = -1.*t4211*t4219;
  t4434 = -1.*t4227*t4240;
  t4435 = -1.*t4252*t4267;
  t4438 = -1.*t4276*t4286;
  t4440 = 1.11344*t4306;
  t4441 = 0.02159*t4318;
  t4442 = t4427 + t4429 + t4430 + t4431 + t4433 + t4434 + t4435 + t4438 + t4440 + t4441;
  t4386 = -0.09*t3480;
  t4387 = -0.049*t3463;
  t4389 = -1.*t3463*t4185;
  t4390 = -1.*t3480*t4204;
  t4446 = -1.*t4227*t4337;
  t4447 = -1.*t4211*t4240;
  t4448 = -1.*t4350*t4267;
  t4450 = -1.*t4360*t4286;
  t4452 = 0.02159*t4366;
  t4453 = 1.11344*t4376;
  t4455 = t4386 + t4387 + t4389 + t4390 + t4446 + t4447 + t4448 + t4450 + t4452 + t4453;
  t4407 = t3607*t4399;
  t4408 = t4404*t3430;
  t4410 = t4407 + t4408;
  t4414 = t3607*t4404;
  t4417 = -1.*t4399*t3430;
  t4418 = t4414 + t4417;
  t4444 = Power(t4442,2);
  t4456 = Power(t4455,2);
  t4457 = t4444 + t4456;
  t4459 = 1/t4457;
  t4476 = -1.*t3458*t3480*t3489;
  t4477 = t3483*t3463;
  t4478 = t4476 + t4477;
  t4479 = t4478*t3452;
  t4480 = t3648 + t4479;
  t4482 = t3512*t4478;
  t4486 = -1.*t3643*t3452;
  t4493 = t4482 + t4486;
  t4509 = -1.*t3438*t4480;
  t4511 = t3528*t4493;
  t4514 = t4509 + t4511;
  t4481 = t3528*t4480;
  t4499 = t3438*t4493;
  t4504 = t4481 + t4499;
  t4536 = -1.*t3458*t3463*t3498;
  t4538 = -1.*t3480*t3877;
  t4539 = t4536 + t4538;
  t4542 = t3452*t4539;
  t4544 = t4542 + t3887;
  t4546 = t3512*t4539;
  t4547 = -1.*t3452*t3886;
  t4551 = t4546 + t4547;
  t4545 = -1.*t3438*t4544;
  t4564 = t3528*t4551;
  t4569 = t4545 + t4564;
  t4572 = t3528*t4544;
  t4573 = t3438*t4551;
  t4574 = t4572 + t4573;
  t4593 = -1.*t3458*t3459*t3463;
  t4595 = -1.*t3480*t3502;
  t4596 = t4593 + t4595;
  t4597 = t3452*t4596;
  t4598 = t4597 + t3524;
  t4600 = t3512*t4596;
  t4601 = -1.*t3452*t3522;
  t4602 = t4600 + t4601;
  t4599 = -1.*t3438*t4598;
  t4603 = t3528*t4602;
  t4607 = t4599 + t4603;
  t4609 = t3528*t4598;
  t4612 = t3438*t4602;
  t4613 = t4609 + t4612;
  t4323 = Power(t4321,2);
  t4380 = Power(t4379,2);
  t4382 = 0.00002025 + t4323 + t4380;
  t4383 = 1/Sqrt(t4382);
  t4656 = t3438*t4337;
  t4658 = t4242 + t4656;
  t4662 = t4270 + t4347;
  t4629 = 0.049*t3512;
  t4630 = t4629 + t4183;
  t4632 = -0.21*t3512;
  t4641 = -0.049*t3452;
  t4642 = t4632 + t4641;
  t4391 = t4227*t4219;
  t4648 = 0.01841*t3528;
  t4651 = 0.70544*t3438;
  t4653 = t4648 + t4651;
  t4644 = 0.70544*t3528;
  t4646 = t4644 + t4210;
  t4397 = t4211*t4396;
  t4689 = t4349 + t4398;
  t4702 = t4243 + t4403;
  t4665 = t3607*t4658;
  t4667 = t4662*t3430;
  t4669 = t4665 + t4667;
  t4672 = t3607*t4662;
  t4673 = -1.*t4658*t3430;
  t4676 = t4672 + t4673;
  t4462 = -1.*t4227*t4219;
  t4465 = -1.*t4211*t4396;
  t4709 = t3607*t4689;
  t4710 = t4702*t3430;
  t4712 = t4709 + t4710;
  t4714 = t3607*t4702;
  t4715 = -1.*t4689*t3430;
  t4716 = t4714 + t4715;
  t4770 = -1.*t3512*t3505;
  t4771 = t4770 + t4601;
  t4778 = t3528*t4771;
  t4782 = t4778 + t3570;
  t4791 = t3438*t4771;
  t4792 = t3438*t3564;
  t4794 = t4791 + t4792;
  t4833 = -1.*t3512*t3657;
  t4839 = t4833 + t4486;
  t4846 = t3528*t4839;
  t4849 = t4846 + t3681;
  t4840 = t3438*t4839;
  t4842 = t3438*t3669;
  t4843 = t4840 + t4842;
  t4861 = -1.*t3512*t3882;
  t4862 = t4861 + t4547;
  t4864 = t3528*t4862;
  t4866 = t4864 + t3914;
  t4869 = t3438*t4862;
  t4870 = t3438*t3909;
  t4872 = t4869 + t4870;
  t4891 = 0.02159*t3607;
  t4895 = t4891 + t4263;
  t4897 = -1.11344*t3607;
  t4898 = -0.02159*t3430;
  t4901 = t4897 + t4898;
  t4917 = -1.*t3607*t4350;
  t4918 = -1.*t4360*t3430;
  t4919 = t4917 + t4918;
  t4906 = -1.*t3607*t4252;
  t4907 = -1.*t4276*t3430;
  t4908 = t4906 + t4907;
  p_output1[0]=0;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=0;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=1.;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0.5*t2643*(2.*t2172*t2624 + 2.*t2172*(t2712 + t2750 + t1913*t2774 + t1842*t2793 - 0.02159*(t1827*t2774 + t1789*t2793) - 1.11344*(t1789*t2774 - 1.*t1827*t2793) - 0.049*t656 - 1.*t543*t656 - 0.09*t95 - 1.*t816*t95));
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
  p_output1[30]=0.5*t2643*(2.*t2624*(t1594 + t1768 + t2354*t2930 + t1762*t2952 + t1913*t2965 + t1842*t2993 - 0.02159*(t1827*t2965 + t1789*t2993) - 1.11344*(t1789*t2965 - 1.*t1827*t2993) + t2925*t656 + t2907*t95) + 2.*t2172*(t2712 + t2750 + t1762*t2930 + t1559*t2952 + t1913*t3093 + t1842*t3107 - 0.02159*(t1827*t3093 + t1789*t3107) - 1.11344*(t1789*t3093 - 1.*t1827*t3107) - 1.*t2907*t656 + t2925*t95));
  p_output1[31]=0;
  p_output1[32]=0;
  p_output1[33]=0;
  p_output1[34]=0;
  p_output1[35]=0;
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0.5*t2643*(2.*t2172*(-1.11344*(-1.*t1789*t1875 - 1.*t1827*t2095) - 0.02159*t2120 + t1875*t3229 + t2095*t3275) + 2.*t2624*(-1.11344*(-1.*t1827*t2377 - 1.*t1789*t2408) - 0.02159*t2560 + t2408*t3229 + t2377*t3275));
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=1.;
  p_output1[52]=0;
  p_output1[53]=0.5*t3634*(2.*t3714*(0.766044*(t3607*t3745 - 1.*t3430*t3756) + 0.642788*(t3430*t3745 + t3607*t3756)) + 2.*(0.642788*(t3607*t3808 + t3430*t3821) + 0.766044*(-1.*t3430*t3808 + t3607*t3821))*t3955)*t3964*t3975 + t3975*(-0.766044*(t3607*t4002 - 1.*t3430*t4007) - 0.642788*(t3430*t4002 + t3607*t4007))*t4025;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=1.;
  p_output1[62]=0.5*t3634*t3964*t3975*(2.*t3714*(0.766044*(t3607*t4045 - 1.*t3430*t4052) + 0.642788*(t3430*t4045 + t3607*t4052)) + 2.*t3955*(0.642788*(t3607*t4090 + t3430*t4104) + 0.766044*(-1.*t3430*t4090 + t3607*t4104))) + t3975*t4025*(-0.642788*(t3607*t4144 + t3430*t4150) - 0.766044*(-1.*t3430*t4144 + t3607*t4150));
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0.5*t4383*(2.*t4321*t4379 + 2.*t4321*(t4386 + t4387 + t4389 + t4390 + t4391 + t4397 + t4267*t4399 + t4286*t4404 - 0.02159*t4410 - 1.11344*t4418));
  p_output1[68]=t4321*t4442*t4459 + t4455*t4459*(t4325 + t4326 + t4327 + t4330 - 1.*t4267*t4399 - 1.*t4286*t4404 + 0.02159*t4410 + 1.11344*t4418 + t4462 + t4465);
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0.5*t3634*t3964*t3975*(2.*t3714*(0.642788*(t3607*t4504 + t3430*t4514) + 0.766044*(-1.*t3430*t4504 + t3607*t4514)) + 2.*t3955*(0.766044*(t3607*t4569 - 1.*t3430*t4574) + 0.642788*(t3430*t4569 + t3607*t4574))) + t3975*t4025*(-0.766044*(t3607*t4607 - 1.*t3430*t4613) - 0.642788*(t3430*t4607 + t3607*t4613));
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0.5*t4383*(2.*t4379*(t4221 + t4241 + t3480*t4630 + t3463*t4642 + t4337*t4646 + t4240*t4653 + t4267*t4658 + t4286*t4662 - 0.02159*t4669 - 1.11344*t4676) + 2.*t4321*(t4391 + t4397 - 1.*t3463*t4630 + t3480*t4642 + t4240*t4646 + t4219*t4653 + t4267*t4689 + t4286*t4702 - 0.02159*t4712 - 1.11344*t4716));
  p_output1[77]=t4321*t4459*(t4433 + t4434 - 1.*t3480*t4630 - 1.*t3463*t4642 - 1.*t4337*t4646 - 1.*t4240*t4653 - 1.*t4267*t4658 - 1.*t4286*t4662 + 0.02159*t4669 + 1.11344*t4676) + t4455*t4459*(t4462 + t4465 + t3463*t4630 - 1.*t3480*t4642 - 1.*t4240*t4646 - 1.*t4219*t4653 - 1.*t4267*t4689 - 1.*t4286*t4702 + 0.02159*t4712 + 1.11344*t4716);
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=t3975*t4025*(-0.766044*(t3607*t4782 - 1.*t3430*t4794) - 0.642788*(t3430*t4782 + t3607*t4794)) + 0.5*t3634*t3964*t3975*(2.*t3714*(0.642788*(t3607*t4843 + t3430*t4849) + 0.766044*(-1.*t3430*t4843 + t3607*t4849)) + 2.*t3955*(0.766044*(t3607*t4866 - 1.*t3430*t4872) + 0.642788*(t3430*t4866 + t3607*t4872)));
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0.5*t4383*(2.*t4321*(-0.02159*t4306 + t4276*t4895 + t4252*t4901 - 1.11344*t4908) + 2.*t4379*(-0.02159*t4376 + t4360*t4895 + t4350*t4901 - 1.11344*t4919));
  p_output1[86]=t4455*t4459*(0.02159*t4306 - 1.*t4276*t4895 - 1.*t4252*t4901 + 1.11344*t4908) + t4321*t4459*(0.02159*t4376 - 1.*t4360*t4895 - 1.*t4350*t4901 + 1.11344*t4919);
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0.5*t3634*(2.*(0.766044*(-1.*t3430*t3673 - 1.*t3607*t3685) + 0.642788*t3701)*t3714 + 2.*(0.766044*(-1.*t3607*t3928 - 1.*t3430*t3942) + 0.642788*t3948)*t3955)*t3964*t3975 + (-0.766044*(-1.*t3600*t3607 - 1.*t3430*t3617) - 0.642788*t3624)*t3975*t4025;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 10, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void Jdot_yaLeftStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




