/*
 * Automatically Generated from Mathematica.
 * Sun 7 Nov 2021 14:27:51 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "dyaLeftStance.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t55;
  double t185;
  double t197;
  double t213;
  double t257;
  double t328;
  double t438;
  double t448;
  double t456;
  double t520;
  double t540;
  double t544;
  double t583;
  double t589;
  double t593;
  double t672;
  double t687;
  double t688;
  double t924;
  double t950;
  double t966;
  double t1135;
  double t1198;
  double t1218;
  double t1341;
  double t1395;
  double t1400;
  double t1401;
  double t363;
  double t370;
  double t377;
  double t235;
  double t270;
  double t304;
  double t615;
  double t629;
  double t633;
  double t542;
  double t569;
  double t577;
  double t1377;
  double t1383;
  double t1392;
  double t1515;
  double t1589;
  double t1617;
  double t1040;
  double t1163;
  double t1188;
  double t1692;
  double t1703;
  double t1713;
  double t1721;
  double t1723;
  double t1404;
  double t1406;
  double t1409;
  double t151;
  double t322;
  double t356;
  double t421;
  double t598;
  double t881;
  double t1359;
  double t1402;
  double t1411;
  double t1412;
  double t1413;
  double t1417;
  double t1418;
  double t1428;
  double t1449;
  double t1494;
  double t1497;
  double t1509;
  double t1674;
  double t1675;
  double t1704;
  double t1729;
  double t1746;
  double t1754;
  double t1756;
  double t1761;
  double t1765;
  double t1773;
  double t1779;
  double t1823;
  double t1830;
  double t1981;
  double t2000;
  double t1952;
  double t1959;
  double t1975;
  double t1429;
  double t1844;
  double t1862;
  double t1940;
  double t2254;
  double t2258;
  double t2275;
  double t2292;
  double t2301;
  double t2311;
  double t2337;
  double t2344;
  double t2578;
  double t2594;
  double t2610;
  double t2483;
  double t2510;
  double t2521;
  double t2456;
  double t2464;
  double t2234;
  double t2563;
  double t2566;
  double t2567;
  double t2552;
  double t2557;
  double t2289;
  double t2725;
  double t2729;
  double t2826;
  double t2851;
  double t2884;
  double t2897;
  double t2900;
  double t2963;
  double t2984;
  double t2987;
  double t3009;
  double t3012;
  double t3014;
  double t3017;
  double t3029;
  double t3051;
  double t3052;
  double t3087;
  double t3090;
  double t3097;
  double t3116;
  double t3119;
  double t3123;
  double t3133;
  double t3162;
  double t3169;
  double t3174;
  double t3100;
  double t3103;
  double t3108;
  double t2904;
  double t2972;
  double t2973;
  double t2975;
  double t2976;
  double t2977;
  double t3062;
  double t3076;
  double t3086;
  double t3016;
  double t3018;
  double t3025;
  double t3248;
  double t3249;
  double t3253;
  double t3129;
  double t3135;
  double t3138;
  double t3177;
  double t3182;
  double t3190;
  double t3266;
  double t3270;
  double t3276;
  double t3289;
  double t3294;
  double t3199;
  double t3200;
  double t3201;
  double t2828;
  double t2854;
  double t2974;
  double t2980;
  double t3061;
  double t3099;
  double t3154;
  double t3192;
  double t3203;
  double t3204;
  double t3210;
  double t3215;
  double t3224;
  double t3227;
  double t3233;
  double t3234;
  double t3236;
  double t3244;
  double t3254;
  double t3257;
  double t3287;
  double t3300;
  double t3303;
  double t3309;
  double t3316;
  double t3324;
  double t3325;
  double t3332;
  double t3336;
  double t3337;
  double t3340;
  double t3346;
  double t3349;
  double t3358;
  double t3359;
  double t3363;
  double t3228;
  double t3341;
  double t3342;
  double t3345;
  double t3471;
  double t3477;
  double t3479;
  double t3487;
  double t3488;
  double t3504;
  double t3506;
  double t3507;
  double t3625;
  double t3639;
  double t3645;
  double t3569;
  double t3573;
  double t3578;
  double t3580;
  double t3581;
  double t3469;
  double t3605;
  double t3613;
  double t3616;
  double t3590;
  double t3595;
  double t3486;
  double t3694;
  double t3698;
  double t3396;
  double t3397;
  double t3406;
  double t3433;
  double t3439;
  double t3454;
  double t3456;
  double t3373;
  double t3374;
  double t3376;
  double t3827;
  double t3829;
  double t3831;
  double t3833;
  double t3834;
  double t3836;
  double t3837;
  double t3778;
  double t3779;
  double t3789;
  double t3794;
  double t3796;
  double t3800;
  double t3803;
  double t3809;
  double t3811;
  double t3815;
  double t3824;
  double t3826;
  double t3839;
  double t3840;
  double t3843;
  double t3518;
  double t3520;
  double t3523;
  double t3532;
  double t3533;
  double t3538;
  double t3652;
  double t3656;
  double t3658;
  double t3666;
  double t3674;
  double t3675;
  double t3892;
  double t3893;
  double t3707;
  double t3714;
  double t3716;
  double t3724;
  double t3725;
  double t3734;
  double t4030;
  double t4028;
  double t4033;
  double t4035;
  double t4044;
  double t4051;
  double t4059;
  double t4066;
  double t4078;
  double t4031;
  double t4096;
  double t4098;
  double t4104;
  double t4105;
  double t4111;
  double t4100;
  double t4114;
  double t4120;
  double t4127;
  double t4134;
  double t4137;
  double t4121;
  double t4143;
  double t4162;
  double t4176;
  double t4179;
  double t4180;
  double t4212;
  double t4214;
  double t4215;
  double t4198;
  double t4199;
  double t4202;
  double t4206;
  double t4217;
  double t4218;
  double t4229;
  double t4238;
  double t4245;
  double t4254;
  double t4259;
  double t4260;
  double t4227;
  double t4248;
  double t4249;
  double t4310;
  double t4317;
  double t4324;
  double t4301;
  double t4302;
  double t4304;
  double t4307;
  double t4340;
  double t4343;
  double t4346;
  double t4351;
  double t4353;
  double t4374;
  double t4383;
  double t4388;
  double t4344;
  double t4356;
  double t4357;
  double t4449;
  double t4454;
  double t4458;
  double t4463;
  double t4466;
  double t4477;
  double t4460;
  double t4480;
  double t4481;
  double t4486;
  double t4493;
  double t4495;
  double t4482;
  double t4499;
  double t4501;
  double t4505;
  double t4507;
  double t4508;
  double t4546;
  double t4547;
  double t4549;
  double t4545;
  double t4551;
  double t4556;
  double t4564;
  double t4566;
  double t4567;
  double t4561;
  double t4571;
  double t4573;
  double t4579;
  double t4584;
  double t4586;
  double t4574;
  double t4596;
  double t4604;
  double t4624;
  double t4634;
  double t4636;
  double t4251;
  double t4265;
  double t4269;
  double t4271;
  double t4272;
  double t4282;
  double t4283;
  double t4291;
  double t4297;
  double t4606;
  double t4637;
  double t4639;
  double t4640;
  double t4641;
  double t4650;
  double t4655;
  double t4660;
  double t4671;
  double t4685;
  double t4172;
  double t4183;
  double t4186;
  double t4190;
  double t4191;
  double t4193;
  double t4688;
  double t4757;
  double t4762;
  double t4768;
  double t4728;
  double t4732;
  double t4741;
  double t4745;
  double t4769;
  double t4770;
  double t4779;
  double t4782;
  double t4783;
  double t4801;
  double t4802;
  double t4807;
  double t4778;
  double t4784;
  double t4785;
  double t4690;
  double t4699;
  double t4700;
  double t4705;
  double t4711;
  double t4713;
  double t4717;
  double t4188;
  double t4196;
  double t4197;
  double t4838;
  double t4848;
  double t4855;
  double t4866;
  double t4868;
  double t4875;
  double t4887;
  double t4891;
  double t4893;
  double t4856;
  double t4879;
  double t4883;
  double t4950;
  double t4957;
  double t4961;
  double t4964;
  double t4965;
  double t4967;
  double t4979;
  double t4985;
  double t4991;
  double t4975;
  double t4993;
  double t4997;
  double t5000;
  double t5004;
  double t5006;
  double t4696;
  double t5031;
  double t5033;
  double t5036;
  double t5038;
  double t5039;
  double t5045;
  double t5049;
  double t5051;
  double t5052;
  double t5048;
  double t5056;
  double t5060;
  double t5076;
  double t5080;
  double t5084;
  double t4828;
  double t5178;
  double t5181;
  double t5184;
  double t5189;
  double t5191;
  double t5195;
  double t5196;
  double t5197;
  double t5205;
  double t5207;
  double t5208;
  double t5194;
  double t5199;
  double t5200;
  double t5235;
  double t5237;
  double t5242;
  double t5252;
  double t5265;
  double t5276;
  double t5280;
  double t5284;
  double t5273;
  double t5291;
  double t5296;
  double t5300;
  double t5302;
  double t5308;
  double t5351;
  double t5353;
  double t5354;
  double t5355;
  double t5357;
  double t5364;
  double t5368;
  double t5369;
  double t5359;
  double t5371;
  double t5375;
  double t5377;
  double t5379;
  double t5380;
  double t5510;
  double t5511;
  double t5517;
  double t5518;
  double t5519;
  double t5523;
  double t5531;
  double t5532;
  double t5521;
  double t5536;
  double t5538;
  double t5554;
  double t5556;
  double t5560;
  double t5541;
  double t5561;
  double t5565;
  double t5571;
  double t5573;
  double t5574;
  double t5603;
  double t5604;
  double t5606;
  double t5607;
  double t5612;
  double t5613;
  double t5617;
  double t5638;
  double t5639;
  double t5646;
  double t5647;
  double t5641;
  double t5642;
  double t5643;
  double t5677;
  double t5678;
  double t5679;
  double t5684;
  double t5690;
  double t5692;
  double t5693;
  t55 = Cos(var1[8]);
  t185 = Cos(var1[9]);
  t197 = -1.*t185;
  t213 = 1. + t197;
  t257 = Sin(var1[9]);
  t328 = Sin(var1[8]);
  t438 = -1.*var1[9];
  t448 = 0.226893 + t438;
  t456 = Cos(t448);
  t520 = -1.*t456;
  t540 = 1. + t520;
  t544 = Sin(t448);
  t583 = -1.*t55*t257;
  t589 = -1.*t185*t328;
  t593 = t583 + t589;
  t672 = t185*t55;
  t687 = -1.*t257*t328;
  t688 = t672 + t687;
  t924 = Cos(var1[13]);
  t950 = -1.*t924;
  t966 = 1. + t950;
  t1135 = Sin(var1[13]);
  t1198 = t544*t593;
  t1218 = t456*t688;
  t1341 = t1198 + t1218;
  t1395 = t456*t593;
  t1400 = -1.*t544*t688;
  t1401 = t1395 + t1400;
  t363 = -0.21*t213;
  t370 = 0.049*t257;
  t377 = t363 + t370;
  t235 = -0.049*t213;
  t270 = -0.21*t257;
  t304 = t235 + t270;
  t615 = 0.01841*t540;
  t629 = -0.70544*t544;
  t633 = t615 + t629;
  t542 = -0.70544*t540;
  t569 = -0.01841*t544;
  t577 = t542 + t569;
  t1377 = -1.11344*t966;
  t1383 = 0.02159*t1135;
  t1392 = t1377 + t1383;
  t1515 = t55*t257;
  t1589 = t185*t328;
  t1617 = t1515 + t1589;
  t1040 = -0.02159*t966;
  t1163 = -1.11344*t1135;
  t1188 = t1040 + t1163;
  t1692 = -1.*t544*t1617;
  t1703 = t1692 + t1218;
  t1713 = t456*t1617;
  t1721 = t544*t688;
  t1723 = t1713 + t1721;
  t1404 = -1.*t1135*t1341;
  t1406 = t924*t1401;
  t1409 = t1404 + t1406;
  t151 = 0.049*t55;
  t322 = t55*t304;
  t356 = -0.09*t328;
  t421 = -1.*t377*t328;
  t598 = t577*t593;
  t881 = t633*t688;
  t1359 = t1188*t1341;
  t1402 = t1392*t1401;
  t1411 = -1.11344*t1409;
  t1412 = t924*t1341;
  t1413 = t1135*t1401;
  t1417 = t1412 + t1413;
  t1418 = -0.02159*t1417;
  t1428 = t151 + t322 + t356 + t421 + t598 + t881 + t1359 + t1402 + t1411 + t1418;
  t1449 = 0.09*t55;
  t1494 = t55*t377;
  t1497 = 0.049*t328;
  t1509 = t304*t328;
  t1674 = t633*t1617;
  t1675 = t577*t688;
  t1704 = t1392*t1703;
  t1729 = t1188*t1723;
  t1746 = t1135*t1703;
  t1754 = t924*t1723;
  t1756 = t1746 + t1754;
  t1761 = -0.02159*t1756;
  t1765 = t924*t1703;
  t1773 = -1.*t1135*t1723;
  t1779 = t1765 + t1773;
  t1823 = -1.11344*t1779;
  t1830 = t1449 + t1494 + t1497 + t1509 + t1674 + t1675 + t1704 + t1729 + t1761 + t1823;
  t1981 = 0.02159*t924;
  t2000 = t1981 + t1163;
  t1952 = -1.11344*t924;
  t1959 = -0.02159*t1135;
  t1975 = t1952 + t1959;
  t1429 = Power(t1428,2);
  t1844 = Power(t1830,2);
  t1862 = 0.00002025 + t1429 + t1844;
  t1940 = 1/Sqrt(t1862);
  t2254 = -1.*t185*t55;
  t2258 = t257*t328;
  t2275 = t2254 + t2258;
  t2292 = -1.*t544*t593;
  t2301 = t456*t2275;
  t2311 = t2292 + t2301;
  t2337 = t544*t2275;
  t2344 = t1395 + t2337;
  t2578 = t1395 + t1713;
  t2594 = t544*t1617;
  t2610 = t1198 + t2594;
  t2483 = -0.21*t185;
  t2510 = -0.049*t257;
  t2521 = t2483 + t2510;
  t2456 = 0.049*t185;
  t2464 = t2456 + t270;
  t2234 = t633*t593;
  t2563 = 0.01841*t456;
  t2566 = 0.70544*t544;
  t2567 = t2563 + t2566;
  t2552 = 0.70544*t456;
  t2557 = t2552 + t569;
  t2289 = t577*t2275;
  t2725 = t1218 + t2301;
  t2729 = t1721 + t2337;
  t2826 = Cos(var1[16]);
  t2851 = Sin(var1[16]);
  t2884 = Cos(var1[17]);
  t2897 = -1.*t2884;
  t2900 = 1. + t2897;
  t2963 = Sin(var1[17]);
  t2984 = -1.*var1[17];
  t2987 = 0.226893 + t2984;
  t3009 = Cos(t2987);
  t3012 = -1.*t3009;
  t3014 = 1. + t3012;
  t3017 = Sin(t2987);
  t3029 = -1.*t2884*t2851;
  t3051 = -1.*t2826*t2963;
  t3052 = t3029 + t3051;
  t3087 = t2826*t2884;
  t3090 = -1.*t2851*t2963;
  t3097 = t3087 + t3090;
  t3116 = Cos(var1[21]);
  t3119 = -1.*t3116;
  t3123 = 1. + t3119;
  t3133 = Sin(var1[21]);
  t3162 = t3009*t3052;
  t3169 = -1.*t3017*t3097;
  t3174 = t3162 + t3169;
  t3100 = t3017*t3052;
  t3103 = t3009*t3097;
  t3108 = t3100 + t3103;
  t2904 = -0.049*t2900;
  t2972 = -0.21*t2963;
  t2973 = t2904 + t2972;
  t2975 = -0.21*t2900;
  t2976 = 0.049*t2963;
  t2977 = t2975 + t2976;
  t3062 = 0.01841*t3014;
  t3076 = -0.70544*t3017;
  t3086 = t3062 + t3076;
  t3016 = -0.70544*t3014;
  t3018 = -0.01841*t3017;
  t3025 = t3016 + t3018;
  t3248 = t2884*t2851;
  t3249 = t2826*t2963;
  t3253 = t3248 + t3249;
  t3129 = -0.02159*t3123;
  t3135 = -1.11344*t3133;
  t3138 = t3129 + t3135;
  t3177 = -1.11344*t3123;
  t3182 = 0.02159*t3133;
  t3190 = t3177 + t3182;
  t3266 = t3009*t3253;
  t3270 = t3017*t3097;
  t3276 = t3266 + t3270;
  t3289 = -1.*t3017*t3253;
  t3294 = t3289 + t3103;
  t3199 = t3116*t3174;
  t3200 = -1.*t3108*t3133;
  t3201 = t3199 + t3200;
  t2828 = 0.049*t2826;
  t2854 = -0.09*t2851;
  t2974 = t2826*t2973;
  t2980 = -1.*t2851*t2977;
  t3061 = t3025*t3052;
  t3099 = t3086*t3097;
  t3154 = t3108*t3138;
  t3192 = t3174*t3190;
  t3203 = -1.11344*t3201;
  t3204 = t3116*t3108;
  t3210 = t3174*t3133;
  t3215 = t3204 + t3210;
  t3224 = -0.02159*t3215;
  t3227 = t2828 + t2854 + t2974 + t2980 + t3061 + t3099 + t3154 + t3192 + t3203 + t3224;
  t3233 = 0.09*t2826;
  t3234 = 0.049*t2851;
  t3236 = t2851*t2973;
  t3244 = t2826*t2977;
  t3254 = t3086*t3253;
  t3257 = t3025*t3097;
  t3287 = t3276*t3138;
  t3300 = t3294*t3190;
  t3303 = t3116*t3276;
  t3309 = t3294*t3133;
  t3316 = t3303 + t3309;
  t3324 = -0.02159*t3316;
  t3325 = t3116*t3294;
  t3332 = -1.*t3276*t3133;
  t3336 = t3325 + t3332;
  t3337 = -1.11344*t3336;
  t3340 = t3233 + t3234 + t3236 + t3244 + t3254 + t3257 + t3287 + t3300 + t3324 + t3337;
  t3346 = 0.02159*t3116;
  t3349 = t3346 + t3135;
  t3358 = -1.11344*t3116;
  t3359 = -0.02159*t3133;
  t3363 = t3358 + t3359;
  t3228 = Power(t3227,2);
  t3341 = Power(t3340,2);
  t3342 = 0.00002025 + t3228 + t3341;
  t3345 = 1/Sqrt(t3342);
  t3471 = -1.*t2826*t2884;
  t3477 = t2851*t2963;
  t3479 = t3471 + t3477;
  t3487 = t3017*t3479;
  t3488 = t3162 + t3487;
  t3504 = -1.*t3017*t3052;
  t3506 = t3009*t3479;
  t3507 = t3504 + t3506;
  t3625 = t3017*t3253;
  t3639 = t3100 + t3625;
  t3645 = t3162 + t3266;
  t3569 = 0.049*t2884;
  t3573 = t3569 + t2972;
  t3578 = -0.21*t2884;
  t3580 = -0.049*t2963;
  t3581 = t3578 + t3580;
  t3469 = t3086*t3052;
  t3605 = 0.01841*t3009;
  t3613 = 0.70544*t3017;
  t3616 = t3605 + t3613;
  t3590 = 0.70544*t3009;
  t3595 = t3590 + t3018;
  t3486 = t3025*t3479;
  t3694 = t3270 + t3487;
  t3698 = t3103 + t3506;
  t3396 = -1.*t3116*t3276;
  t3397 = -1.*t3294*t3133;
  t3406 = t3396 + t3397;
  t3433 = -0.09*t2826;
  t3439 = -0.049*t2851;
  t3454 = -1.*t2851*t2973;
  t3456 = -1.*t2826*t2977;
  t3373 = -1.*t3116*t3108;
  t3374 = -1.*t3174*t3133;
  t3376 = t3373 + t3374;
  t3827 = -1.*t3086*t3253;
  t3829 = -1.*t3025*t3097;
  t3831 = -1.*t3276*t3138;
  t3833 = -1.*t3294*t3190;
  t3834 = 0.02159*t3316;
  t3836 = 1.11344*t3336;
  t3837 = t3433 + t3439 + t3454 + t3456 + t3827 + t3829 + t3831 + t3833 + t3834 + t3836;
  t3778 = -0.049*t2826;
  t3779 = 0.09*t2851;
  t3789 = -1.*t2826*t2973;
  t3794 = t2851*t2977;
  t3796 = -1.*t3025*t3052;
  t3800 = -1.*t3086*t3097;
  t3803 = -1.*t3108*t3138;
  t3809 = -1.*t3174*t3190;
  t3811 = 1.11344*t3201;
  t3815 = 0.02159*t3215;
  t3824 = t3778 + t3779 + t3789 + t3794 + t3796 + t3800 + t3803 + t3809 + t3811 + t3815;
  t3826 = Power(t3824,2);
  t3839 = Power(t3837,2);
  t3840 = t3826 + t3839;
  t3843 = 1/t3840;
  t3518 = t3116*t3488;
  t3520 = t3507*t3133;
  t3523 = t3518 + t3520;
  t3532 = t3116*t3507;
  t3533 = -1.*t3488*t3133;
  t3538 = t3532 + t3533;
  t3652 = t3116*t3639;
  t3656 = t3645*t3133;
  t3658 = t3652 + t3656;
  t3666 = t3116*t3645;
  t3674 = -1.*t3639*t3133;
  t3675 = t3666 + t3674;
  t3892 = -1.*t3086*t3052;
  t3893 = -1.*t3025*t3479;
  t3707 = t3116*t3694;
  t3714 = t3698*t3133;
  t3716 = t3707 + t3714;
  t3724 = t3116*t3698;
  t3725 = -1.*t3694*t3133;
  t3734 = t3724 + t3725;
  t4030 = Cos(var1[4]);
  t4028 = Cos(var1[14]);
  t4033 = Sin(var1[14]);
  t4035 = Sin(var1[15]);
  t4044 = t4030*t4033*t4035;
  t4051 = Cos(var1[15]);
  t4059 = Sin(var1[4]);
  t4066 = -1.*t4051*t4059;
  t4078 = t4044 + t4066;
  t4031 = t4028*t4030*t2851;
  t4096 = t2826*t4078;
  t4098 = t4031 + t4096;
  t4104 = t4028*t2826*t4030;
  t4105 = -1.*t2851*t4078;
  t4111 = t4104 + t4105;
  t4100 = -1.*t2963*t4098;
  t4114 = t2884*t4111;
  t4120 = t4100 + t4114;
  t4127 = t2884*t4098;
  t4134 = t2963*t4111;
  t4137 = t4127 + t4134;
  t4121 = t3017*t4120;
  t4143 = t3009*t4137;
  t4162 = t4121 + t4143;
  t4176 = t3009*t4120;
  t4179 = -1.*t3017*t4137;
  t4180 = t4176 + t4179;
  t4212 = t4028*t2826*t4035;
  t4214 = -1.*t4033*t2851;
  t4215 = t4212 + t4214;
  t4198 = -1.*t2826*t4033;
  t4199 = -1.*t4028*t4035*t2851;
  t4202 = t4198 + t4199;
  t4206 = t2884*t4202;
  t4217 = -1.*t4215*t2963;
  t4218 = t4206 + t4217;
  t4229 = t2884*t4215;
  t4238 = t4202*t2963;
  t4245 = t4229 + t4238;
  t4254 = t3017*t4218;
  t4259 = t3009*t4245;
  t4260 = t4254 + t4259;
  t4227 = t3009*t4218;
  t4248 = -1.*t3017*t4245;
  t4249 = t4227 + t4248;
  t4310 = -1.*t2826*t4033*t4035;
  t4317 = -1.*t4028*t2851;
  t4324 = t4310 + t4317;
  t4301 = -1.*t4028*t2826;
  t4302 = t4033*t4035*t2851;
  t4304 = t4301 + t4302;
  t4307 = t2884*t4304;
  t4340 = -1.*t4324*t2963;
  t4343 = t4307 + t4340;
  t4346 = t2884*t4324;
  t4351 = t4304*t2963;
  t4353 = t4346 + t4351;
  t4374 = t3017*t4343;
  t4383 = t3009*t4353;
  t4388 = t4374 + t4383;
  t4344 = t3009*t4343;
  t4356 = -1.*t3017*t4353;
  t4357 = t4344 + t4356;
  t4449 = t4028*t2826*t4035*t4059;
  t4454 = -1.*t4033*t2851*t4059;
  t4458 = t4449 + t4454;
  t4463 = -1.*t2826*t4033*t4059;
  t4466 = -1.*t4028*t4035*t2851*t4059;
  t4477 = t4463 + t4466;
  t4460 = -1.*t2963*t4458;
  t4480 = t2884*t4477;
  t4481 = t4460 + t4480;
  t4486 = t2884*t4458;
  t4493 = t2963*t4477;
  t4495 = t4486 + t4493;
  t4482 = t3017*t4481;
  t4499 = t3009*t4495;
  t4501 = t4482 + t4499;
  t4505 = t3009*t4481;
  t4507 = -1.*t3017*t4495;
  t4508 = t4505 + t4507;
  t4546 = t4051*t4030;
  t4547 = t4033*t4035*t4059;
  t4549 = t4546 + t4547;
  t4545 = t4028*t2851*t4059;
  t4551 = t2826*t4549;
  t4556 = t4545 + t4551;
  t4564 = t4028*t2826*t4059;
  t4566 = -1.*t2851*t4549;
  t4567 = t4564 + t4566;
  t4561 = -1.*t2963*t4556;
  t4571 = t2884*t4567;
  t4573 = t4561 + t4571;
  t4579 = t2884*t4556;
  t4584 = t2963*t4567;
  t4586 = t4579 + t4584;
  t4574 = t3017*t4573;
  t4596 = t3009*t4586;
  t4604 = t4574 + t4596;
  t4624 = t3009*t4573;
  t4634 = -1.*t3017*t4586;
  t4636 = t4624 + t4634;
  t4251 = t3116*t4249;
  t4265 = -1.*t4260*t3133;
  t4269 = t4251 + t4265;
  t4271 = 0.766044*t4269;
  t4272 = t3116*t4260;
  t4282 = t4249*t3133;
  t4283 = t4272 + t4282;
  t4291 = 0.642788*t4283;
  t4297 = t4271 + t4291;
  t4606 = -1.*t3133*t4604;
  t4637 = t3116*t4636;
  t4639 = t4606 + t4637;
  t4640 = 0.766044*t4639;
  t4641 = t3116*t4604;
  t4650 = t3133*t4636;
  t4655 = t4641 + t4650;
  t4660 = 0.642788*t4655;
  t4671 = t4640 + t4660;
  t4685 = Power(t4297,2);
  t4172 = -1.*t3133*t4162;
  t4183 = t3116*t4180;
  t4186 = t4172 + t4183;
  t4190 = t3116*t4162;
  t4191 = t3133*t4180;
  t4193 = t4190 + t4191;
  t4688 = Power(t4671,2);
  t4757 = t4028*t2826*t4030*t4035;
  t4762 = -1.*t4030*t4033*t2851;
  t4768 = t4757 + t4762;
  t4728 = -1.*t2826*t4030*t4033;
  t4732 = -1.*t4028*t4030*t4035*t2851;
  t4741 = t4728 + t4732;
  t4745 = t2884*t4741;
  t4769 = -1.*t4768*t2963;
  t4770 = t4745 + t4769;
  t4779 = t2884*t4768;
  t4782 = t4741*t2963;
  t4783 = t4779 + t4782;
  t4801 = t3017*t4770;
  t4802 = t3009*t4783;
  t4807 = t4801 + t4802;
  t4778 = t3009*t4770;
  t4784 = -1.*t3017*t4783;
  t4785 = t4778 + t4784;
  t4690 = t4685 + t4688;
  t4699 = -0.766044*t4186;
  t4700 = -0.642788*t4193;
  t4705 = t4699 + t4700;
  t4711 = Power(t4705,2);
  t4713 = t4685 + t4711 + t4688;
  t4717 = 1/t4713;
  t4188 = 0.766044*t4186;
  t4196 = 0.642788*t4193;
  t4197 = t4188 + t4196;
  t4838 = -1.*t4028*t4051*t2884*t2851;
  t4848 = -1.*t4028*t4051*t2826*t2963;
  t4855 = t4838 + t4848;
  t4866 = t4028*t4051*t2826*t2884;
  t4868 = -1.*t4028*t4051*t2851*t2963;
  t4875 = t4866 + t4868;
  t4887 = t3017*t4855;
  t4891 = t3009*t4875;
  t4893 = t4887 + t4891;
  t4856 = t3009*t4855;
  t4879 = -1.*t3017*t4875;
  t4883 = t4856 + t4879;
  t4950 = -1.*t4030*t4035;
  t4957 = t4051*t4033*t4059;
  t4961 = t4950 + t4957;
  t4964 = -1.*t2884*t2851*t4961;
  t4965 = -1.*t2826*t2963*t4961;
  t4967 = t4964 + t4965;
  t4979 = t2826*t2884*t4961;
  t4985 = -1.*t2851*t2963*t4961;
  t4991 = t4979 + t4985;
  t4975 = t3017*t4967;
  t4993 = t3009*t4991;
  t4997 = t4975 + t4993;
  t5000 = t3009*t4967;
  t5004 = -1.*t3017*t4991;
  t5006 = t5000 + t5004;
  t4696 = 1/Sqrt(t4690);
  t5031 = t4051*t4030*t4033;
  t5033 = t4035*t4059;
  t5036 = t5031 + t5033;
  t5038 = -1.*t2884*t2851*t5036;
  t5039 = -1.*t2826*t2963*t5036;
  t5045 = t5038 + t5039;
  t5049 = t2826*t2884*t5036;
  t5051 = -1.*t2851*t2963*t5036;
  t5052 = t5049 + t5051;
  t5048 = t3017*t5045;
  t5056 = t3009*t5052;
  t5060 = t5048 + t5056;
  t5076 = t3009*t5045;
  t5080 = -1.*t3017*t5052;
  t5084 = t5076 + t5080;
  t4828 = Sqrt(t4690);
  t5178 = -1.*t4028*t2826*t4035;
  t5181 = t4033*t2851;
  t5184 = t5178 + t5181;
  t5189 = t5184*t2963;
  t5191 = t4206 + t5189;
  t5195 = t2884*t5184;
  t5196 = -1.*t4202*t2963;
  t5197 = t5195 + t5196;
  t5205 = -1.*t3017*t5191;
  t5207 = t3009*t5197;
  t5208 = t5205 + t5207;
  t5194 = t3009*t5191;
  t5199 = t3017*t5197;
  t5200 = t5194 + t5199;
  t5235 = -1.*t4028*t2851*t4059;
  t5237 = -1.*t2826*t4549;
  t5242 = t5235 + t5237;
  t5252 = t2963*t5242;
  t5265 = t5252 + t4571;
  t5276 = t2884*t5242;
  t5280 = -1.*t2963*t4567;
  t5284 = t5276 + t5280;
  t5273 = -1.*t3017*t5265;
  t5291 = t3009*t5284;
  t5296 = t5273 + t5291;
  t5300 = t3009*t5265;
  t5302 = t3017*t5284;
  t5308 = t5300 + t5302;
  t5351 = -1.*t4028*t4030*t2851;
  t5353 = -1.*t2826*t4078;
  t5354 = t5351 + t5353;
  t5355 = t2963*t5354;
  t5357 = t5355 + t4114;
  t5364 = t2884*t5354;
  t5368 = -1.*t2963*t4111;
  t5369 = t5364 + t5368;
  t5359 = -1.*t3017*t5357;
  t5371 = t3009*t5369;
  t5375 = t5359 + t5371;
  t5377 = t3009*t5357;
  t5379 = t3017*t5369;
  t5380 = t5377 + t5379;
  t5510 = -1.*t4051*t4030;
  t5511 = -1.*t4033*t4035*t4059;
  t5517 = t5510 + t5511;
  t5518 = t2826*t5517;
  t5519 = t5235 + t5518;
  t5523 = -1.*t4028*t2826*t4059;
  t5531 = -1.*t2851*t5517;
  t5532 = t5523 + t5531;
  t5521 = -1.*t2963*t5519;
  t5536 = t2884*t5532;
  t5538 = t5521 + t5536;
  t5554 = t2884*t5519;
  t5556 = t2963*t5532;
  t5560 = t5554 + t5556;
  t5541 = t3017*t5538;
  t5561 = t3009*t5560;
  t5565 = t5541 + t5561;
  t5571 = t3009*t5538;
  t5573 = -1.*t3017*t5560;
  t5574 = t5571 + t5573;
  t5603 = -1.*t2884*t4098;
  t5604 = t5603 + t5368;
  t5606 = t3009*t5604;
  t5607 = t5606 + t4143;
  t5612 = t3017*t5604;
  t5613 = t3017*t4137;
  t5617 = t5612 + t5613;
  t5638 = -1.*t2884*t4215;
  t5639 = t5638 + t5196;
  t5646 = t3009*t5639;
  t5647 = t5646 + t4259;
  t5641 = t3017*t5639;
  t5642 = t3017*t4245;
  t5643 = t5641 + t5642;
  t5677 = -1.*t2884*t4556;
  t5678 = t5677 + t5280;
  t5679 = t3009*t5678;
  t5684 = t5679 + t4596;
  t5690 = t3017*t5678;
  t5692 = t3017*t4586;
  t5693 = t5690 + t5692;
  p_output1[0]=var2[3];
  p_output1[1]=var2[4];
  p_output1[2]=var2[7];
  p_output1[3]=0.5*t1940*(2.*t1428*t1830 + 2.*t1428*(t2234 + t2289 + t1392*t2311 + t1188*t2344 - 0.049*t328 - 1.*t304*t328 - 0.09*t55 - 1.*t377*t55 - 1.11344*(-1.*t1135*t2344 + t2311*t924) - 0.02159*(t1135*t2311 + t2344*t924)))*var2[8] + 0.5*t1940*(2.*t1830*(t1617*t2557 + t1392*t2578 + t1188*t2610 + t2521*t328 + t2464*t55 + t598 + t2567*t688 + t881 - 1.11344*(-1.*t1135*t2610 + t2578*t924) - 0.02159*(t1135*t2578 + t2610*t924)) + 2.*t1428*(t2234 + t2289 + t1392*t2725 + t1188*t2729 - 1.*t2464*t328 + t2521*t55 + t2567*t593 + t2557*t688 - 1.11344*(-1.*t1135*t2729 + t2725*t924) - 0.02159*(t1135*t2725 + t2729*t924)))*var2[9] + 0.5*t1940*(2.*t1428*(-0.02159*t1409 + t1341*t1975 + t1401*t2000 - 1.11344*(-1.*t1135*t1401 - 1.*t1341*t924)) + 2.*t1830*(-0.02159*t1779 + t1723*t1975 + t1703*t2000 - 1.11344*(-1.*t1135*t1703 - 1.*t1723*t924)))*var2[13];
  p_output1[4]=0.5*t3345*(2.*t3227*t3340 + 2.*t3227*(t3433 + t3439 + t3454 + t3456 + t3469 + t3486 + t3138*t3488 + t3190*t3507 - 0.02159*t3523 - 1.11344*t3538))*var2[16] + 0.5*t3345*(2.*t3340*(t3061 + t3099 + t2826*t3573 + t2851*t3581 + t3253*t3595 + t3097*t3616 + t3138*t3639 + t3190*t3645 - 0.02159*t3658 - 1.11344*t3675) + 2.*t3227*(t3469 + t3486 - 1.*t2851*t3573 + t2826*t3581 + t3097*t3595 + t3052*t3616 + t3138*t3694 + t3190*t3698 - 0.02159*t3716 - 1.11344*t3734))*var2[17] + 0.5*t3345*(2.*t3227*(-0.02159*t3201 + t3174*t3349 + t3108*t3363 - 1.11344*t3376) + 2.*t3340*(-0.02159*t3336 + t3294*t3349 + t3276*t3363 - 1.11344*t3406))*var2[21];
  p_output1[5]=(t3227*t3824*t3843 + t3837*t3843*(t3233 + t3234 + t3236 + t3244 - 1.*t3138*t3488 - 1.*t3190*t3507 + 0.02159*t3523 + 1.11344*t3538 + t3892 + t3893))*var2[16] + (t3227*(-1.*t2826*t3573 - 1.*t2851*t3581 - 1.*t3253*t3595 - 1.*t3097*t3616 - 1.*t3138*t3639 - 1.*t3190*t3645 + 0.02159*t3658 + 1.11344*t3675 + t3796 + t3800)*t3843 + t3837*t3843*(t2851*t3573 - 1.*t2826*t3581 - 1.*t3097*t3595 - 1.*t3052*t3616 - 1.*t3138*t3694 - 1.*t3190*t3698 + 0.02159*t3716 + 1.11344*t3734 + t3892 + t3893))*var2[17] + (t3227*(0.02159*t3336 - 1.*t3294*t3349 - 1.*t3276*t3363 + 1.11344*t3406)*t3843 + (0.02159*t3201 - 1.*t3174*t3349 - 1.*t3108*t3363 + 1.11344*t3376)*t3837*t3843)*var2[21];
  p_output1[6]=var2[14];
  p_output1[7]=var2[15];
  p_output1[8]=(Power(t4197,2)*t4671*t4696*t4717 + t4717*t4828*(-0.766044*(-1.*t3133*t5565 + t3116*t5574) - 0.642788*(t3116*t5565 + t3133*t5574)))*var2[4] + (0.5*t4197*(2.*t4297*(0.642788*(t3133*t4357 + t3116*t4388) + 0.766044*(t3116*t4357 - 1.*t3133*t4388)) + 2.*(0.766044*(-1.*t3133*t4501 + t3116*t4508) + 0.642788*(t3116*t4501 + t3133*t4508))*t4671)*t4696*t4717 + t4717*(-0.642788*(t3133*t4785 + t3116*t4807) - 0.766044*(t3116*t4785 - 1.*t3133*t4807))*t4828)*var2[14] + (0.5*t4197*t4696*t4717*(2.*t4297*(0.642788*(t3133*t4883 + t3116*t4893) + 0.766044*(t3116*t4883 - 1.*t3133*t4893)) + 2.*t4671*(0.766044*(-1.*t3133*t4997 + t3116*t5006) + 0.642788*(t3116*t4997 + t3133*t5006))) + t4717*t4828*(-0.766044*(-1.*t3133*t5060 + t3116*t5084) - 0.642788*(t3116*t5060 + t3133*t5084)))*var2[15] + (0.5*t4197*t4696*t4717*(2.*t4297*(0.766044*(-1.*t3133*t5200 + t3116*t5208) + 0.642788*(t3116*t5200 + t3133*t5208)) + 2.*t4671*(0.642788*(t3133*t5296 + t3116*t5308) + 0.766044*(t3116*t5296 - 1.*t3133*t5308))) + t4717*t4828*(-0.642788*(t3133*t5375 + t3116*t5380) - 0.766044*(t3116*t5375 - 1.*t3133*t5380)))*var2[16] + (t4717*t4828*(-0.642788*(t3133*t5607 + t3116*t5617) - 0.766044*(t3116*t5607 - 1.*t3133*t5617)) + 0.5*t4197*t4696*t4717*(2.*t4297*(0.766044*(-1.*t3133*t5643 + t3116*t5647) + 0.642788*(t3116*t5643 + t3133*t5647)) + 2.*t4671*(0.642788*(t3133*t5684 + t3116*t5693) + 0.766044*(t3116*t5684 - 1.*t3133*t5693))))*var2[17] + (0.5*t4197*(2.*(0.766044*(-1.*t3133*t4249 - 1.*t3116*t4260) + 0.642788*t4269)*t4297 + 2.*(0.766044*(-1.*t3116*t4604 - 1.*t3133*t4636) + 0.642788*t4639)*t4671)*t4696*t4717 + (-0.766044*(-1.*t3116*t4162 - 1.*t3133*t4180) - 0.642788*t4186)*t4717*t4828)*var2[21];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 9, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void dyaLeftStance_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}




