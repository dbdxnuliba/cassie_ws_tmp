/*
 * Automatically Generated from Mathematica.
 * Sun 7 Nov 2021 14:26:12 GMT-08:00
 */

#ifdef MATLAB_MEX_FILE
// No need to include header
#else
#include "p_com_absolute.hh"
#endif

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
#include<math.h>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;

inline double Sec(double x) { return 1/cos(x); }
inline double Csc(double x) { return 1/sin(x); }

#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t30;
  double t37;
  double t40;
  double t65;
  double t85;
  double t104;
  double t102;
  double t113;
  double t115;
  double t119;
  double t154;
  double t167;
  double t172;
  double t179;
  double t121;
  double t124;
  double t127;
  double t131;
  double t132;
  double t133;
  double t175;
  double t183;
  double t184;
  double t185;
  double t187;
  double t188;
  double t193;
  double t197;
  double t205;
  double t206;
  double t213;
  double t230;
  double t232;
  double t233;
  double t247;
  double t217;
  double t218;
  double t222;
  double t238;
  double t251;
  double t253;
  double t257;
  double t261;
  double t268;
  double t269;
  double t270;
  double t272;
  double t274;
  double t278;
  double t307;
  double t309;
  double t312;
  double t317;
  double t283;
  double t287;
  double t291;
  double t315;
  double t319;
  double t320;
  double t322;
  double t325;
  double t326;
  double t327;
  double t328;
  double t330;
  double t332;
  double t335;
  double t351;
  double t352;
  double t353;
  double t361;
  double t339;
  double t340;
  double t341;
  double t359;
  double t365;
  double t366;
  double t370;
  double t373;
  double t374;
  double t376;
  double t377;
  double t378;
  double t380;
  double t381;
  double t407;
  double t408;
  double t409;
  double t414;
  double t385;
  double t391;
  double t392;
  double t466;
  double t469;
  double t474;
  double t490;
  double t413;
  double t418;
  double t419;
  double t421;
  double t426;
  double t431;
  double t437;
  double t438;
  double t510;
  double t441;
  double t445;
  double t448;
  double t481;
  double t527;
  double t452;
  double t455;
  double t456;
  double t556;
  double t559;
  double t533;
  double t581;
  double t530;
  double t597;
  double t512;
  double t572;
  double t498;
  double t645;
  double t646;
  double t649;
  double t654;
  double t82;
  double t701;
  double t706;
  double t703;
  double t704;
  double t705;
  double t707;
  double t721;
  double t722;
  double t723;
  double t708;
  double t710;
  double t712;
  double t732;
  double t733;
  double t734;
  double t737;
  double t735;
  double t738;
  double t741;
  double t743;
  double t744;
  double t746;
  double t747;
  double t749;
  double t750;
  double t752;
  double t753;
  double t761;
  double t762;
  double t763;
  double t773;
  double t776;
  double t777;
  double t780;
  double t778;
  double t781;
  double t783;
  double t784;
  double t786;
  double t787;
  double t788;
  double t792;
  double t796;
  double t798;
  double t799;
  double t828;
  double t830;
  double t833;
  double t837;
  double t815;
  double t818;
  double t819;
  double t836;
  double t838;
  double t843;
  double t844;
  double t846;
  double t851;
  double t852;
  double t854;
  double t855;
  double t857;
  double t859;
  double t871;
  double t872;
  double t874;
  double t876;
  double t862;
  double t863;
  double t864;
  double t875;
  double t879;
  double t880;
  double t887;
  double t889;
  double t890;
  double t893;
  double t894;
  double t896;
  double t898;
  double t899;
  double t916;
  double t919;
  double t920;
  double t923;
  double t902;
  double t906;
  double t908;
  double t955;
  double t956;
  double t962;
  double t967;
  double t921;
  double t924;
  double t925;
  double t928;
  double t931;
  double t932;
  double t934;
  double t939;
  double t965;
  double t940;
  double t941;
  double t942;
  double t974;
  double t987;
  double t945;
  double t947;
  double t950;
  double t1003;
  double t1006;
  double t992;
  double t1023;
  double t989;
  double t1036;
  double t969;
  double t1019;
  double t975;
  double t1068;
  double t1069;
  double t1070;
  double t1073;
  double t1106;
  double t1113;
  double t1112;
  double t1115;
  double t1116;
  double t1119;
  double t1120;
  double t1122;
  double t1130;
  double t1134;
  double t1135;
  double t1136;
  double t1139;
  double t1142;
  double t1143;
  double t1144;
  double t1155;
  double t1156;
  double t1160;
  double t1162;
  double t1164;
  double t1166;
  double t1168;
  double t1170;
  double t1175;
  double t1178;
  double t1180;
  double t1181;
  double t1182;
  double t1184;
  double t1185;
  double t1186;
  double t1193;
  double t1196;
  double t1197;
  double t1199;
  double t1200;
  double t1203;
  double t1204;
  double t1205;
  double t1217;
  double t1219;
  double t1220;
  double t1221;
  double t1223;
  double t1229;
  double t1231;
  double t1233;
  double t465;
  double t475;
  double t499;
  double t500;
  double t517;
  double t518;
  double t520;
  double t1245;
  double t1249;
  double t524;
  double t526;
  double t531;
  double t532;
  double t536;
  double t539;
  double t540;
  double t1251;
  double t1254;
  double t1256;
  double t553;
  double t554;
  double t557;
  double t558;
  double t565;
  double t567;
  double t569;
  double t1261;
  double t1263;
  double t1264;
  double t577;
  double t583;
  double t590;
  double t593;
  double t598;
  double t609;
  double t611;
  double t615;
  double t621;
  double t622;
  double t629;
  double t633;
  double t651;
  double t655;
  double t657;
  double t665;
  double t666;
  double t667;
  double t1132;
  double t1317;
  double t1320;
  double t1327;
  double t1329;
  double t1330;
  double t1321;
  double t1323;
  double t1325;
  double t1339;
  double t1343;
  double t1344;
  double t1345;
  double t1351;
  double t1360;
  double t1361;
  double t1363;
  double t1370;
  double t1371;
  double t1372;
  double t1373;
  double t1375;
  double t1379;
  double t1380;
  double t1381;
  double t1391;
  double t1393;
  double t1395;
  double t1396;
  double t1397;
  double t1403;
  double t1405;
  double t1408;
  double t1419;
  double t1421;
  double t1423;
  double t1424;
  double t1427;
  double t1431;
  double t1432;
  double t1433;
  double t954;
  double t963;
  double t971;
  double t972;
  double t976;
  double t977;
  double t978;
  double t1440;
  double t1441;
  double t980;
  double t986;
  double t990;
  double t991;
  double t994;
  double t995;
  double t996;
  double t1443;
  double t1444;
  double t1445;
  double t1000;
  double t1001;
  double t1004;
  double t1005;
  double t1007;
  double t1012;
  double t1014;
  double t1449;
  double t1451;
  double t1455;
  double t1021;
  double t1024;
  double t1028;
  double t1029;
  double t1038;
  double t1042;
  double t1043;
  double t1046;
  double t1054;
  double t1055;
  double t1057;
  double t1059;
  double t1072;
  double t1074;
  double t1075;
  double t1078;
  double t1079;
  double t1080;
  double t1528;
  double t1531;
  double t1533;
  double t1537;
  double t1540;
  double t1541;
  double t1548;
  double t1552;
  double t1553;
  double t1555;
  double t1562;
  double t1564;
  double t1565;
  double t1567;
  double t1579;
  double t1582;
  double t1586;
  double t1588;
  double t1589;
  double t1592;
  double t1593;
  double t1594;
  double t1602;
  double t1608;
  double t1609;
  double t1611;
  double t1612;
  double t1615;
  double t1618;
  double t1621;
  double t1629;
  double t1631;
  double t1632;
  double t1633;
  double t1636;
  double t1640;
  double t1641;
  double t1645;
  double t1655;
  double t1656;
  double t1657;
  double t1658;
  double t1660;
  double t1666;
  double t1667;
  double t1668;
  double t1674;
  double t1675;
  double t1676;
  double t1678;
  double t1679;
  double t1681;
  double t1682;
  double t1683;
  double t1551;
  double t1753;
  double t1754;
  double t1761;
  double t1763;
  double t1764;
  double t1757;
  double t1758;
  double t1759;
  double t1776;
  double t1779;
  double t1780;
  double t1781;
  double t1782;
  double t1787;
  double t1788;
  double t1790;
  double t1798;
  double t1803;
  double t1806;
  double t1808;
  double t1809;
  double t1816;
  double t1817;
  double t1819;
  double t1828;
  double t1830;
  double t1833;
  double t1835;
  double t1836;
  double t1838;
  double t1843;
  double t1844;
  double t1853;
  double t1854;
  double t1855;
  double t1856;
  double t1857;
  double t1860;
  double t1862;
  double t1865;
  double t1874;
  double t1877;
  double t1878;
  double t1879;
  double t1880;
  double t1882;
  double t1884;
  double t1885;
  t30 = Cos(var1[4]);
  t37 = Cos(var1[5]);
  t40 = Sin(var1[4]);
  t65 = Sin(var1[5]);
  t85 = Sin(var1[14]);
  t104 = Cos(var1[14]);
  t102 = 0.135*t85*t40;
  t113 = -1.*t104;
  t115 = 1. + t113;
  t119 = 0.135*t115*t30*t65;
  t154 = Cos(var1[15]);
  t167 = -1.*t154;
  t172 = 1. + t167;
  t179 = Sin(var1[15]);
  t121 = t85*t40;
  t124 = -1.*t104*t30*t65;
  t127 = t121 + t124;
  t131 = t104*t40;
  t132 = t30*t85*t65;
  t133 = t131 + t132;
  t175 = -0.049*t172;
  t183 = -0.135*t179;
  t184 = t175 + t183;
  t185 = t30*t37*t184;
  t187 = -0.135*t172;
  t188 = 0.049*t179;
  t193 = t187 + t188;
  t197 = t193*t127;
  t205 = -1.*t30*t37*t179;
  t206 = t154*t127;
  t213 = t205 + t206;
  t230 = Cos(var1[16]);
  t232 = -1.*t230;
  t233 = 1. + t232;
  t247 = Sin(var1[16]);
  t217 = t154*t30*t37;
  t218 = t179*t127;
  t222 = t217 + t218;
  t238 = -0.09*t233;
  t251 = 0.049*t247;
  t253 = t238 + t251;
  t257 = t253*t133;
  t261 = -0.049*t233;
  t268 = -0.09*t247;
  t269 = t261 + t268;
  t270 = t269*t222;
  t272 = t247*t133;
  t274 = t230*t222;
  t278 = t272 + t274;
  t307 = Cos(var1[17]);
  t309 = -1.*t307;
  t312 = 1. + t309;
  t317 = Sin(var1[17]);
  t283 = t230*t133;
  t287 = -1.*t247*t222;
  t291 = t283 + t287;
  t315 = -0.049*t312;
  t319 = -0.21*t317;
  t320 = t315 + t319;
  t322 = t320*t278;
  t325 = -0.21*t312;
  t326 = 0.049*t317;
  t327 = t325 + t326;
  t328 = t327*t291;
  t330 = -1.*t317*t278;
  t332 = t307*t291;
  t335 = t330 + t332;
  t351 = Cos(var1[18]);
  t352 = -1.*t351;
  t353 = 1. + t352;
  t361 = Sin(var1[18]);
  t339 = t307*t278;
  t340 = t317*t291;
  t341 = t339 + t340;
  t359 = -0.27068*t353;
  t365 = 0.00159*t361;
  t366 = t359 + t365;
  t370 = t366*t335;
  t373 = -0.00159*t353;
  t374 = -0.27068*t361;
  t376 = t373 + t374;
  t377 = t376*t341;
  t378 = t361*t335;
  t380 = t351*t341;
  t381 = t378 + t380;
  t407 = Cos(var1[19]);
  t408 = -1.*t407;
  t409 = 1. + t408;
  t414 = Sin(var1[19]);
  t385 = t351*t335;
  t391 = -1.*t361*t341;
  t392 = t385 + t391;
  t466 = Cos(var1[20]);
  t469 = -1.*t466;
  t474 = 1. + t469;
  t490 = Sin(var1[20]);
  t413 = 0.01841*t409;
  t418 = -0.70544*t414;
  t419 = t413 + t418;
  t421 = t419*t381;
  t426 = -0.70544*t409;
  t431 = -0.01841*t414;
  t437 = t426 + t431;
  t438 = t437*t392;
  t510 = 0.005481192614*t474;
  t441 = -1.*t414*t381;
  t445 = t407*t392;
  t448 = t441 + t445;
  t481 = 0.07769774964800001*t474;
  t527 = -0.0004284921280000001*t474;
  t452 = t407*t381;
  t455 = t414*t392;
  t456 = t452 + t455;
  t556 = 0.005498*t490;
  t559 = 0.996943*t490;
  t533 = -0.077936*t490;
  t581 = 0.0004284921280000001*t474;
  t530 = -0.996943*t490;
  t597 = -0.005481192614*t474;
  t512 = 0.077936*t490;
  t572 = -0.07769774964800001*t474;
  t498 = -0.005498*t490;
  t645 = Cos(var1[21]);
  t646 = -1.*t645;
  t649 = 1. + t646;
  t654 = Sin(var1[21]);
  t82 = -0.0233*t30*t37;
  t701 = Cos(var1[6]);
  t706 = Sin(var1[6]);
  t703 = -1.*t701;
  t704 = 1. + t703;
  t705 = -0.135*t30*t704*t65;
  t707 = -0.135*t40*t706;
  t721 = t701*t40;
  t722 = t30*t65*t706;
  t723 = t721 + t722;
  t708 = -1.*t30*t701*t65;
  t710 = t40*t706;
  t712 = t708 + t710;
  t732 = Cos(var1[7]);
  t733 = -1.*t732;
  t734 = 1. + t733;
  t737 = Sin(var1[7]);
  t735 = 0.135*t734;
  t738 = 0.049*t737;
  t741 = t735 + t738;
  t743 = t712*t741;
  t744 = -0.049*t734;
  t746 = 0.135*t737;
  t747 = t744 + t746;
  t749 = t30*t37*t747;
  t750 = t732*t712;
  t752 = -1.*t30*t37*t737;
  t753 = t750 + t752;
  t761 = t30*t37*t732;
  t762 = t712*t737;
  t763 = t761 + t762;
  t773 = Cos(var1[8]);
  t776 = -1.*t773;
  t777 = 1. + t776;
  t780 = Sin(var1[8]);
  t778 = -0.049*t777;
  t781 = -0.09*t780;
  t783 = t778 + t781;
  t784 = t763*t783;
  t786 = -0.09*t777;
  t787 = 0.049*t780;
  t788 = t786 + t787;
  t792 = t723*t788;
  t796 = t773*t763;
  t798 = t723*t780;
  t799 = t796 + t798;
  t828 = Cos(var1[9]);
  t830 = -1.*t828;
  t833 = 1. + t830;
  t837 = Sin(var1[9]);
  t815 = t773*t723;
  t818 = -1.*t763*t780;
  t819 = t815 + t818;
  t836 = -0.049*t833;
  t838 = -0.21*t837;
  t843 = t836 + t838;
  t844 = t843*t799;
  t846 = -0.21*t833;
  t851 = 0.049*t837;
  t852 = t846 + t851;
  t854 = t852*t819;
  t855 = -1.*t837*t799;
  t857 = t828*t819;
  t859 = t855 + t857;
  t871 = Cos(var1[10]);
  t872 = -1.*t871;
  t874 = 1. + t872;
  t876 = Sin(var1[10]);
  t862 = t828*t799;
  t863 = t837*t819;
  t864 = t862 + t863;
  t875 = -0.27068*t874;
  t879 = 0.00159*t876;
  t880 = t875 + t879;
  t887 = t880*t859;
  t889 = -0.00159*t874;
  t890 = -0.27068*t876;
  t893 = t889 + t890;
  t894 = t893*t864;
  t896 = t876*t859;
  t898 = t871*t864;
  t899 = t896 + t898;
  t916 = Cos(var1[11]);
  t919 = -1.*t916;
  t920 = 1. + t919;
  t923 = Sin(var1[11]);
  t902 = t871*t859;
  t906 = -1.*t876*t864;
  t908 = t902 + t906;
  t955 = Cos(var1[12]);
  t956 = -1.*t955;
  t962 = 1. + t956;
  t967 = Sin(var1[12]);
  t921 = 0.01841*t920;
  t924 = -0.70544*t923;
  t925 = t921 + t924;
  t928 = t925*t899;
  t931 = -0.70544*t920;
  t932 = -0.01841*t923;
  t934 = t931 + t932;
  t939 = t934*t908;
  t965 = -0.005481192614*t962;
  t940 = -1.*t923*t899;
  t941 = t916*t908;
  t942 = t940 + t941;
  t974 = -0.07769774964800001*t962;
  t987 = -0.0004284921280000001*t962;
  t945 = t916*t899;
  t947 = t923*t908;
  t950 = t945 + t947;
  t1003 = -0.005498*t967;
  t1006 = 0.996943*t967;
  t992 = 0.077936*t967;
  t1023 = 0.0004284921280000001*t962;
  t989 = -0.996943*t967;
  t1036 = 0.005481192614*t962;
  t969 = -0.077936*t967;
  t1019 = 0.07769774964800001*t962;
  t975 = 0.005498*t967;
  t1068 = Cos(var1[13]);
  t1069 = -1.*t1068;
  t1070 = 1. + t1069;
  t1073 = Sin(var1[13]);
  t1106 = Sin(var1[3]);
  t1113 = Cos(var1[3]);
  t1112 = t37*t1106*t40;
  t1115 = t1113*t65;
  t1116 = t1112 + t1115;
  t1119 = t1113*t37;
  t1120 = -1.*t1106*t40*t65;
  t1122 = t1119 + t1120;
  t1130 = -0.135*t30*t85*t1106;
  t1134 = -0.135*t115*t1122;
  t1135 = -1.*t30*t85*t1106;
  t1136 = t104*t1122;
  t1139 = t1135 + t1136;
  t1142 = -1.*t104*t30*t1106;
  t1143 = -1.*t85*t1122;
  t1144 = t1142 + t1143;
  t1155 = t184*t1116;
  t1156 = t193*t1139;
  t1160 = -1.*t179*t1116;
  t1162 = t154*t1139;
  t1164 = t1160 + t1162;
  t1166 = t154*t1116;
  t1168 = t179*t1139;
  t1170 = t1166 + t1168;
  t1175 = t253*t1144;
  t1178 = t269*t1170;
  t1180 = t247*t1144;
  t1181 = t230*t1170;
  t1182 = t1180 + t1181;
  t1184 = t230*t1144;
  t1185 = -1.*t247*t1170;
  t1186 = t1184 + t1185;
  t1193 = t320*t1182;
  t1196 = t327*t1186;
  t1197 = -1.*t317*t1182;
  t1199 = t307*t1186;
  t1200 = t1197 + t1199;
  t1203 = t307*t1182;
  t1204 = t317*t1186;
  t1205 = t1203 + t1204;
  t1217 = t366*t1200;
  t1219 = t376*t1205;
  t1220 = t361*t1200;
  t1221 = t351*t1205;
  t1223 = t1220 + t1221;
  t1229 = t351*t1200;
  t1231 = -1.*t361*t1205;
  t1233 = t1229 + t1231;
  t465 = 2.1934241414728571e-7*var1[20];
  t475 = -0.000033783761634830594*t474;
  t499 = t481 + t498;
  t500 = -0.021877537552*t499;
  t517 = t510 + t512;
  t518 = -0.6934341012630001*t517;
  t520 = t465 + t475 + t500 + t518;
  t1245 = t419*t1223;
  t1249 = t437*t1233;
  t524 = -1.2096424700126054e-9*var1[20];
  t526 = -0.6934128581485427*t474;
  t531 = t527 + t530;
  t532 = -0.021877537552*t531;
  t536 = t510 + t533;
  t539 = -0.005534467322*t536;
  t540 = t524 + t526 + t532 + t539;
  t1251 = -1.*t414*t1223;
  t1254 = t407*t1233;
  t1256 = t1251 + t1254;
  t553 = -1.7147089040178687e-8*var1[20];
  t554 = -0.021744644052735636*t474;
  t557 = t481 + t556;
  t558 = -0.005534467322*t557;
  t565 = t527 + t559;
  t567 = -0.6934341012630001*t565;
  t569 = t553 + t554 + t558 + t567;
  t1261 = t407*t1223;
  t1263 = t414*t1233;
  t1264 = t1261 + t1263;
  t577 = t572 + t556;
  t583 = t581 + t559;
  t590 = -0.993925573253*t474;
  t593 = 1. + t590;
  t598 = t597 + t533;
  t609 = -0.999969365345*t474;
  t611 = 1. + t609;
  t615 = t581 + t530;
  t621 = -0.006104248100000001*t474;
  t622 = 1. + t621;
  t629 = t597 + t512;
  t633 = t572 + t498;
  t651 = -1.11344*t649;
  t655 = 0.02159*t654;
  t657 = t651 + t655;
  t665 = -0.02159*t649;
  t666 = -1.11344*t654;
  t667 = t665 + t666;
  t1132 = -0.0233*t1116;
  t1317 = 0.135*t704*t1122;
  t1320 = 0.135*t30*t1106*t706;
  t1327 = -1.*t30*t701*t1106;
  t1329 = -1.*t1122*t706;
  t1330 = t1327 + t1329;
  t1321 = t701*t1122;
  t1323 = -1.*t30*t1106*t706;
  t1325 = t1321 + t1323;
  t1339 = t1325*t741;
  t1343 = t1116*t747;
  t1344 = t732*t1325;
  t1345 = -1.*t1116*t737;
  t1351 = t1344 + t1345;
  t1360 = t732*t1116;
  t1361 = t1325*t737;
  t1363 = t1360 + t1361;
  t1370 = t1363*t783;
  t1371 = t1330*t788;
  t1372 = t773*t1363;
  t1373 = t1330*t780;
  t1375 = t1372 + t1373;
  t1379 = t773*t1330;
  t1380 = -1.*t1363*t780;
  t1381 = t1379 + t1380;
  t1391 = t843*t1375;
  t1393 = t852*t1381;
  t1395 = -1.*t837*t1375;
  t1396 = t828*t1381;
  t1397 = t1395 + t1396;
  t1403 = t828*t1375;
  t1405 = t837*t1381;
  t1408 = t1403 + t1405;
  t1419 = t880*t1397;
  t1421 = t893*t1408;
  t1423 = t876*t1397;
  t1424 = t871*t1408;
  t1427 = t1423 + t1424;
  t1431 = t871*t1397;
  t1432 = -1.*t876*t1408;
  t1433 = t1431 + t1432;
  t954 = -2.1934241414728571e-7*var1[12];
  t963 = 0.000033783761634830594*t962;
  t971 = t965 + t969;
  t972 = -0.6934341012630001*t971;
  t976 = t974 + t975;
  t977 = -0.021877537552*t976;
  t978 = t954 + t963 + t972 + t977;
  t1440 = t925*t1427;
  t1441 = t934*t1433;
  t980 = -1.2096424700126054e-9*var1[12];
  t986 = -0.6934128581485427*t962;
  t990 = t987 + t989;
  t991 = -0.021877537552*t990;
  t994 = t965 + t992;
  t995 = 0.005534467322*t994;
  t996 = t980 + t986 + t991 + t995;
  t1443 = -1.*t923*t1427;
  t1444 = t916*t1433;
  t1445 = t1443 + t1444;
  t1000 = -1.7147089040178687e-8*var1[12];
  t1001 = -0.021744644052735636*t962;
  t1004 = t974 + t1003;
  t1005 = 0.005534467322*t1004;
  t1007 = t987 + t1006;
  t1012 = -0.6934341012630001*t1007;
  t1014 = t1000 + t1001 + t1005 + t1012;
  t1449 = t916*t1427;
  t1451 = t923*t1433;
  t1455 = t1449 + t1451;
  t1021 = t1019 + t1003;
  t1024 = t1023 + t1006;
  t1028 = -0.993925573253*t962;
  t1029 = 1. + t1028;
  t1038 = t1036 + t992;
  t1042 = -0.999969365345*t962;
  t1043 = 1. + t1042;
  t1046 = t1023 + t989;
  t1054 = -0.006104248100000001*t962;
  t1055 = 1. + t1054;
  t1057 = t1036 + t969;
  t1059 = t1019 + t975;
  t1072 = -1.11344*t1070;
  t1074 = 0.02159*t1073;
  t1075 = t1072 + t1074;
  t1078 = -0.02159*t1070;
  t1079 = -1.11344*t1073;
  t1080 = t1078 + t1079;
  t1528 = -1.*t1113*t37*t40;
  t1531 = t1106*t65;
  t1533 = t1528 + t1531;
  t1537 = t37*t1106;
  t1540 = t1113*t40*t65;
  t1541 = t1537 + t1540;
  t1548 = 0.135*t1113*t30*t85;
  t1552 = -0.135*t115*t1541;
  t1553 = t1113*t30*t85;
  t1555 = t104*t1541;
  t1562 = t1553 + t1555;
  t1564 = t104*t1113*t30;
  t1565 = -1.*t85*t1541;
  t1567 = t1564 + t1565;
  t1579 = t184*t1533;
  t1582 = t193*t1562;
  t1586 = -1.*t179*t1533;
  t1588 = t154*t1562;
  t1589 = t1586 + t1588;
  t1592 = t154*t1533;
  t1593 = t179*t1562;
  t1594 = t1592 + t1593;
  t1602 = t253*t1567;
  t1608 = t269*t1594;
  t1609 = t247*t1567;
  t1611 = t230*t1594;
  t1612 = t1609 + t1611;
  t1615 = t230*t1567;
  t1618 = -1.*t247*t1594;
  t1621 = t1615 + t1618;
  t1629 = t320*t1612;
  t1631 = t327*t1621;
  t1632 = -1.*t317*t1612;
  t1633 = t307*t1621;
  t1636 = t1632 + t1633;
  t1640 = t307*t1612;
  t1641 = t317*t1621;
  t1645 = t1640 + t1641;
  t1655 = t366*t1636;
  t1656 = t376*t1645;
  t1657 = t361*t1636;
  t1658 = t351*t1645;
  t1660 = t1657 + t1658;
  t1666 = t351*t1636;
  t1667 = -1.*t361*t1645;
  t1668 = t1666 + t1667;
  t1674 = t419*t1660;
  t1675 = t437*t1668;
  t1676 = -1.*t414*t1660;
  t1678 = t407*t1668;
  t1679 = t1676 + t1678;
  t1681 = t407*t1660;
  t1682 = t414*t1668;
  t1683 = t1681 + t1682;
  t1551 = -0.0233*t1533;
  t1753 = 0.135*t704*t1541;
  t1754 = -0.135*t1113*t30*t706;
  t1761 = t1113*t30*t701;
  t1763 = -1.*t1541*t706;
  t1764 = t1761 + t1763;
  t1757 = t701*t1541;
  t1758 = t1113*t30*t706;
  t1759 = t1757 + t1758;
  t1776 = t1759*t741;
  t1779 = t1533*t747;
  t1780 = t732*t1759;
  t1781 = -1.*t1533*t737;
  t1782 = t1780 + t1781;
  t1787 = t732*t1533;
  t1788 = t1759*t737;
  t1790 = t1787 + t1788;
  t1798 = t1790*t783;
  t1803 = t1764*t788;
  t1806 = t773*t1790;
  t1808 = t1764*t780;
  t1809 = t1806 + t1808;
  t1816 = t773*t1764;
  t1817 = -1.*t1790*t780;
  t1819 = t1816 + t1817;
  t1828 = t843*t1809;
  t1830 = t852*t1819;
  t1833 = -1.*t837*t1809;
  t1835 = t828*t1819;
  t1836 = t1833 + t1835;
  t1838 = t828*t1809;
  t1843 = t837*t1819;
  t1844 = t1838 + t1843;
  t1853 = t880*t1836;
  t1854 = t893*t1844;
  t1855 = t876*t1836;
  t1856 = t871*t1844;
  t1857 = t1855 + t1856;
  t1860 = t871*t1836;
  t1862 = -1.*t876*t1844;
  t1865 = t1860 + t1862;
  t1874 = t925*t1857;
  t1877 = t934*t1865;
  t1878 = -1.*t923*t1857;
  t1879 = t916*t1865;
  t1880 = t1878 + t1879;
  t1882 = t916*t1857;
  t1884 = t923*t1865;
  t1885 = t1882 + t1884;
  p_output1[0]=0.0288377642750394*(1.316608*(t102 + t119 - 0.0343*t133 + t185 + t197 - 0.135*t213 - 0.049*t222 + var1[0]) + 5.79228*(t102 + t119 + t185 + t197 - 0.17081*t213 + t257 + t270 - 0.04895*t278 - 0.14946*t291 + var1[0]) + 1.03008*(t102 + t119 + t185 + t197 - 0.132168*t213 + t257 + t270 + t322 + t328 - 0.255862*t335 - 0.007761*t341 + var1[0]) + 0.763*(t102 + t119 + t185 + t197 - 0.130288*t213 + t257 + t270 + t322 + t328 + t370 + t377 - 0.000421*t381 - 0.45406*t392 + var1[0]) + 1.03*(t102 + t119 + t185 + t197 - 0.127241*t213 + t257 + t270 + t322 + t328 + t370 + t377 + t421 + t438 - 0.826587*t448 - 0.004179*t456 + var1[0]) + 0.126*(t102 + t119 + t185 + t197 + t257 + t270 + t322 + t328 + t370 + t377 + t421 + t438 + t213*t520 + t448*t540 + t456*t569 + 0.01889*(t213*t577 + t448*t583 + t456*t593) - 0.617968*(t213*t598 + t448*t611 + t456*t615) - 0.126739*(t213*t622 + t448*t629 + t456*t633) + var1[0]) + 10.33*(0.05066*t30*t37 + 0.02841*t40 - 0.000346*t30*t65 + var1[0]) + 0.1498*(t102 + t119 + t185 + t197 - 0.13064*t213 + t257 + t270 + t322 + t328 + t370 + t377 + t421 + t438 + 0.00589*(t456*t645 + t448*t654) - 1.11818*(t448*t645 - 1.*t456*t654) + t448*t657 + t456*t667 + var1[0]) + 1.316608*(t705 + t707 - 0.0343*t723 + t743 + t749 + 0.135*t753 - 0.049*t763 + var1[0]) + 5.79228*(t705 + t707 + t743 + t749 + 0.17081*t753 + t784 + t792 - 0.04895*t799 - 0.14946*t819 + var1[0]) + 1.965608*(t102 + t119 - 0.1351*t127 + 0.01793*t133 + t82 + var1[0]) + 1.965608*(t705 + t707 + 0.1351*t712 + 0.01793*t723 + t82 + var1[0]) + 1.03008*(t705 + t707 + t743 + t749 + 0.132168*t753 + t784 + t792 + t844 + t854 - 0.255862*t859 - 0.007761*t864 + var1[0]) + 0.763*(t705 + t707 + t743 + t749 + 0.130288*t753 + t784 + t792 + t844 + t854 + t887 + t894 - 0.000421*t899 - 0.45406*t908 + var1[0]) + 1.03*(t705 + t707 + t743 + t749 + 0.127241*t753 + t784 + t792 + t844 + t854 + t887 + t894 + t928 + t939 - 0.826587*t942 - 0.004179*t950 + var1[0]) + 0.1498*(t705 + t707 + t743 + t749 + 0.13064*t753 + t784 + t792 + t844 + t854 + t887 + t894 + t928 + t939 + t1075*t942 + t1080*t950 + 0.00589*(t1073*t942 + t1068*t950) - 1.11818*(t1068*t942 - 1.*t1073*t950) + var1[0]) + 0.126*(t705 + t707 + t743 + t749 + t784 + t792 + t844 + t854 + t887 + t894 + t928 + t939 + t1014*t950 + 0.01889*(t1021*t753 + t1024*t942 + t1029*t950) - 0.617968*(t1038*t753 + t1043*t942 + t1046*t950) + 0.126739*(t1055*t753 + t1057*t942 + t1059*t950) + t753*t978 + t942*t996 + var1[0]));
  p_output1[1]=0.0288377642750394*(1.965608*(t1130 + t1132 + t1134 - 0.1351*t1139 + 0.01793*t1144 + var1[1]) + 1.316608*(t1130 + t1134 - 0.0343*t1144 + t1155 + t1156 - 0.135*t1164 - 0.049*t1170 + var1[1]) + 5.79228*(t1130 + t1134 + t1155 + t1156 - 0.17081*t1164 + t1175 + t1178 - 0.04895*t1182 - 0.14946*t1186 + var1[1]) + 1.03008*(t1130 + t1134 + t1155 + t1156 - 0.132168*t1164 + t1175 + t1178 + t1193 + t1196 - 0.255862*t1200 - 0.007761*t1205 + var1[1]) + 0.763*(t1130 + t1134 + t1155 + t1156 - 0.130288*t1164 + t1175 + t1178 + t1193 + t1196 + t1217 + t1219 - 0.000421*t1223 - 0.45406*t1233 + var1[1]) + 1.03*(t1130 + t1134 + t1155 + t1156 - 0.127241*t1164 + t1175 + t1178 + t1193 + t1196 + t1217 + t1219 + t1245 + t1249 - 0.826587*t1256 - 0.004179*t1264 + var1[1]) + 1.965608*(t1132 + t1317 + t1320 + 0.1351*t1325 + 0.01793*t1330 + var1[1]) + 1.316608*(t1317 + t1320 - 0.0343*t1330 + t1339 + t1343 + 0.135*t1351 - 0.049*t1363 + var1[1]) + 5.79228*(t1317 + t1320 + t1339 + t1343 + 0.17081*t1351 + t1370 + t1371 - 0.04895*t1375 - 0.14946*t1381 + var1[1]) + 1.03008*(t1317 + t1320 + t1339 + t1343 + 0.132168*t1351 + t1370 + t1371 + t1391 + t1393 - 0.255862*t1397 - 0.007761*t1408 + var1[1]) + 0.763*(t1317 + t1320 + t1339 + t1343 + 0.130288*t1351 + t1370 + t1371 + t1391 + t1393 + t1419 + t1421 - 0.000421*t1427 - 0.45406*t1433 + var1[1]) + 1.03*(t1317 + t1320 + t1339 + t1343 + 0.127241*t1351 + t1370 + t1371 + t1391 + t1393 + t1419 + t1421 + t1440 + t1441 - 0.826587*t1445 - 0.004179*t1455 + var1[1]) + 0.1498*(t1317 + t1320 + t1339 + t1343 + 0.13064*t1351 + t1370 + t1371 + t1391 + t1393 + t1419 + t1421 + t1440 + t1441 + t1075*t1445 + t1080*t1455 + 0.00589*(t1073*t1445 + t1068*t1455) - 1.11818*(t1068*t1445 - 1.*t1073*t1455) + var1[1]) + 10.33*(0.05066*t1116 + 0.000346*t1122 - 0.02841*t1106*t30 + var1[1]) + 0.126*(t1130 + t1134 + t1155 + t1156 + t1175 + t1178 + t1193 + t1196 + t1217 + t1219 + t1245 + t1249 + t1164*t520 + t1256*t540 + t1264*t569 + 0.01889*(t1164*t577 + t1256*t583 + t1264*t593) - 0.617968*(t1164*t598 + t1256*t611 + t1264*t615) - 0.126739*(t1164*t622 + t1256*t629 + t1264*t633) + var1[1]) + 0.1498*(t1130 + t1134 + t1155 + t1156 - 0.13064*t1164 + t1175 + t1178 + t1193 + t1196 + t1217 + t1219 + t1245 + t1249 + 0.00589*(t1264*t645 + t1256*t654) - 1.11818*(t1256*t645 - 1.*t1264*t654) + t1256*t657 + t1264*t667 + var1[1]) + 0.126*(t1317 + t1320 + t1339 + t1343 + t1370 + t1371 + t1391 + t1393 + t1419 + t1421 + t1440 + t1441 + t1014*t1455 + 0.01889*(t1021*t1351 + t1024*t1445 + t1029*t1455) - 0.617968*(t1038*t1351 + t1043*t1445 + t1046*t1455) + 0.126739*(t1055*t1351 + t1057*t1445 + t1059*t1455) + t1351*t978 + t1445*t996 + var1[1]));
  p_output1[2]=0.0288377642750394*(1.965608*(t1548 + t1551 + t1552 - 0.1351*t1562 + 0.01793*t1567 + var1[2]) + 1.316608*(t1548 + t1552 - 0.0343*t1567 + t1579 + t1582 - 0.135*t1589 - 0.049*t1594 + var1[2]) + 5.79228*(t1548 + t1552 + t1579 + t1582 - 0.17081*t1589 + t1602 + t1608 - 0.04895*t1612 - 0.14946*t1621 + var1[2]) + 1.03008*(t1548 + t1552 + t1579 + t1582 - 0.132168*t1589 + t1602 + t1608 + t1629 + t1631 - 0.255862*t1636 - 0.007761*t1645 + var1[2]) + 0.763*(t1548 + t1552 + t1579 + t1582 - 0.130288*t1589 + t1602 + t1608 + t1629 + t1631 + t1655 + t1656 - 0.000421*t1660 - 0.45406*t1668 + var1[2]) + 1.03*(t1548 + t1552 + t1579 + t1582 - 0.127241*t1589 + t1602 + t1608 + t1629 + t1631 + t1655 + t1656 + t1674 + t1675 - 0.826587*t1679 - 0.004179*t1683 + var1[2]) + 1.965608*(t1551 + t1753 + t1754 + 0.1351*t1759 + 0.01793*t1764 + var1[2]) + 1.316608*(t1753 + t1754 - 0.0343*t1764 + t1776 + t1779 + 0.135*t1782 - 0.049*t1790 + var1[2]) + 5.79228*(t1753 + t1754 + t1776 + t1779 + 0.17081*t1782 + t1798 + t1803 - 0.04895*t1809 - 0.14946*t1819 + var1[2]) + 1.03008*(t1753 + t1754 + t1776 + t1779 + 0.132168*t1782 + t1798 + t1803 + t1828 + t1830 - 0.255862*t1836 - 0.007761*t1844 + var1[2]) + 0.763*(t1753 + t1754 + t1776 + t1779 + 0.130288*t1782 + t1798 + t1803 + t1828 + t1830 + t1853 + t1854 - 0.000421*t1857 - 0.45406*t1865 + var1[2]) + 1.03*(t1753 + t1754 + t1776 + t1779 + 0.127241*t1782 + t1798 + t1803 + t1828 + t1830 + t1853 + t1854 + t1874 + t1877 - 0.826587*t1880 - 0.004179*t1885 + var1[2]) + 0.1498*(t1753 + t1754 + t1776 + t1779 + 0.13064*t1782 + t1798 + t1803 + t1828 + t1830 + t1853 + t1854 + t1874 + t1877 + t1075*t1880 + t1080*t1885 + 0.00589*(t1073*t1880 + t1068*t1885) - 1.11818*(t1068*t1880 - 1.*t1073*t1885) + var1[2]) + 10.33*(0.05066*t1533 + 0.000346*t1541 + 0.02841*t1113*t30 + var1[2]) + 0.126*(t1548 + t1552 + t1579 + t1582 + t1602 + t1608 + t1629 + t1631 + t1655 + t1656 + t1674 + t1675 + t1589*t520 + t1679*t540 + t1683*t569 + 0.01889*(t1589*t577 + t1679*t583 + t1683*t593) - 0.617968*(t1589*t598 + t1679*t611 + t1683*t615) - 0.126739*(t1589*t622 + t1679*t629 + t1683*t633) + var1[2]) + 0.1498*(t1548 + t1552 + t1579 + t1582 - 0.13064*t1589 + t1602 + t1608 + t1629 + t1631 + t1655 + t1656 + t1674 + t1675 + 0.00589*(t1683*t645 + t1679*t654) - 1.11818*(t1679*t645 - 1.*t1683*t654) + t1679*t657 + t1683*t667 + var1[2]) + 0.126*(t1753 + t1754 + t1776 + t1779 + t1798 + t1803 + t1828 + t1830 + t1853 + t1854 + t1874 + t1877 + t1014*t1885 + 0.01889*(t1021*t1782 + t1024*t1880 + t1029*t1885) - 0.617968*(t1038*t1782 + t1043*t1880 + t1046*t1885) + 0.126739*(t1055*t1782 + t1057*t1880 + t1059*t1885) + t1782*t978 + t1880*t996 + var1[2]));
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 22 && ncols == 1) && 
      !(mrows == 1 && ncols == 22))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 3, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#endif // MATLAB_MEX_FILE

namespace SymFunction
{

void p_com_absolute_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}




